
RobonAUT-control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a370  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  0800a540  0800a540  0001a540  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a994  0800a994  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a994  0800a994  0001a994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a99c  0800a99c  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a99c  0800a99c  0001a99c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9a0  0800a9a0  0001a9a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800a9a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000410  200001f4  0800ab98  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000604  0800ab98  00020604  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a77  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a18  00000000  00000000  00033c9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  000366b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e98  00000000  00000000  00037668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025080  00000000  00000000  00038500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c42  00000000  00000000  0005d580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e01d7  00000000  00000000  000711c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00151399  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052b0  00000000  00000000  001513ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a528 	.word	0x0800a528

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f8 	.word	0x200001f8
 800020c:	0800a528 	.word	0x0800a528

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <F4_Basic_Init>:

uint8_t swState[]={0,0};
uint8_t fromPC[]={0};

void F4_Basic_Init(UART_HandleTypeDef *huart,TIM_HandleTypeDef *htim,TIM_HandleTypeDef *htim3,TIM_HandleTypeDef *htim2)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08c      	sub	sp, #48	; 0x30
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
 8000ef8:	603b      	str	r3, [r7, #0]
	uint8_t buf[30];
	LED_R(0);
 8000efa:	2201      	movs	r2, #1
 8000efc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f00:	482c      	ldr	r0, [pc, #176]	; (8000fb4 <F4_Basic_Init+0xc8>)
 8000f02:	f002 fe9f 	bl	8003c44 <HAL_GPIO_WritePin>
	LED_B(0);
 8000f06:	2201      	movs	r2, #1
 8000f08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f0c:	4829      	ldr	r0, [pc, #164]	; (8000fb4 <F4_Basic_Init+0xc8>)
 8000f0e:	f002 fe99 	bl	8003c44 <HAL_GPIO_WritePin>
	LED_G(0);
 8000f12:	2201      	movs	r2, #1
 8000f14:	2102      	movs	r1, #2
 8000f16:	4827      	ldr	r0, [pc, #156]	; (8000fb4 <F4_Basic_Init+0xc8>)
 8000f18:	f002 fe94 	bl	8003c44 <HAL_GPIO_WritePin>
	LED_Y(0);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f22:	4824      	ldr	r0, [pc, #144]	; (8000fb4 <F4_Basic_Init+0xc8>)
 8000f24:	f002 fe8e 	bl	8003c44 <HAL_GPIO_WritePin>
	memset(buf,0,30); //a buf tömböt feltöltöm 0-kkal
 8000f28:	f107 0310 	add.w	r3, r7, #16
 8000f2c:	221e      	movs	r2, #30
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f006 fc0d 	bl	8007750 <memset>
	sprintf(buf,"RobonAUT 2022 Bit Bangers F4\r\n");// a buff tömb-be beleírom (stringprint) a string-emet. 1 karakter = 1 byte = 1 tömbelem
 8000f36:	f107 0310 	add.w	r3, r7, #16
 8000f3a:	491f      	ldr	r1, [pc, #124]	; (8000fb8 <F4_Basic_Init+0xcc>)
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f007 f879 	bl	8008034 <siprintf>
	HAL_UART_Transmit(huart, buf, strlen(buf), 100);// A UART2-őn (ide van kötve a programozó) kiküldöm a buf karaktertömböt (string) és maximum 10-ms -ot várok hogy ezt elvégezze a periféria
 8000f42:	f107 0310 	add.w	r3, r7, #16
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff f962 	bl	8000210 <strlen>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	f107 0110 	add.w	r1, r7, #16
 8000f54:	2364      	movs	r3, #100	; 0x64
 8000f56:	68f8      	ldr	r0, [r7, #12]
 8000f58:	f005 fba5 	bl	80066a6 <HAL_UART_Transmit>
	HAL_TIM_Base_Start(htim);//heart beat timer tick start
 8000f5c:	68b8      	ldr	r0, [r7, #8]
 8000f5e:	f003 fd2d 	bl	80049bc <HAL_TIM_Base_Start>

	//MotorEnable engedélyezése
	motorEnRemote=0;
 8000f62:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <F4_Basic_Init+0xd0>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
	motorEnBattOk=1;
 8000f68:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <F4_Basic_Init+0xd4>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	701a      	strb	r2, [r3, #0]
	motorEnLineOk=1;
 8000f6e:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <F4_Basic_Init+0xd8>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	701a      	strb	r2, [r3, #0]

	//kezdeti pwm kitoltes megadasa->0 hiszen nem akarjuk h forogjon
	TIM3->CCR1=0;
 8000f74:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <F4_Basic_Init+0xdc>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2=0;
 8000f7a:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <F4_Basic_Init+0xdc>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_1);
 8000f80:	2100      	movs	r1, #0
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f003 fdd2 	bl	8004b2c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim3, TIM_CHANNEL_2);
 8000f88:	2104      	movs	r1, #4
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f003 fdce 	bl	8004b2c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_1);
 8000f90:	2100      	movs	r1, #0
 8000f92:	6838      	ldr	r0, [r7, #0]
 8000f94:	f003 fdca 	bl	8004b2c <HAL_TIM_PWM_Start>
	TIM2->CCR1=593;
 8000f98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f9c:	f240 2251 	movw	r2, #593	; 0x251
 8000fa0:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_UART_Receive_IT(huart, fromPC, 1);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	4909      	ldr	r1, [pc, #36]	; (8000fcc <F4_Basic_Init+0xe0>)
 8000fa6:	68f8      	ldr	r0, [r7, #12]
 8000fa8:	f005 fc0f 	bl	80067ca <HAL_UART_Receive_IT>

}
 8000fac:	bf00      	nop
 8000fae:	3730      	adds	r7, #48	; 0x30
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40020400 	.word	0x40020400
 8000fb8:	0800a540 	.word	0x0800a540
 8000fbc:	200005d8 	.word	0x200005d8
 8000fc0:	200005d9 	.word	0x200005d9
 8000fc4:	200005da 	.word	0x200005da
 8000fc8:	40000400 	.word	0x40000400
 8000fcc:	20000210 	.word	0x20000210

08000fd0 <Uart_Receive_From_PC_ISR>:
	else LED_B(0);
	*/
}

void Uart_Receive_From_PC_ISR(UART_HandleTypeDef *huart)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000fd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fdc:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <Uart_Receive_From_PC_ISR+0x24>)
 8000fde:	f002 fe4a 	bl	8003c76 <HAL_GPIO_TogglePin>
	HAL_UART_Receive_IT(huart, fromPC, 1);
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	4904      	ldr	r1, [pc, #16]	; (8000ff8 <Uart_Receive_From_PC_ISR+0x28>)
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f005 fbef 	bl	80067ca <HAL_UART_Receive_IT>
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40020400 	.word	0x40020400
 8000ff8:	20000210 	.word	0x20000210

08000ffc <Motor_seq>:
	}
	motorDutyPrev=motorDuty;
}


void Motor_seq(TIM_HandleTypeDef *htim_motor,TIM_HandleTypeDef *htim_encoder,UART_HandleTypeDef *huart , uint32_t tick, uint32_t period){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08c      	sub	sp, #48	; 0x30
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
 8001008:	603b      	str	r3, [r7, #0]
	uint8_t str[4];
	uint8_t string[20];
	static uint32_t motor_seq_tick=0;


	if(motor_seq_tick>tick) return;
 800100a:	4b87      	ldr	r3, [pc, #540]	; (8001228 <Motor_seq+0x22c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	683a      	ldr	r2, [r7, #0]
 8001010:	429a      	cmp	r2, r3
 8001012:	f0c0 8104 	bcc.w	800121e <Motor_seq+0x222>
	motor_seq_tick= tick + period;
 8001016:	683a      	ldr	r2, [r7, #0]
 8001018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800101a:	4413      	add	r3, r2
 800101c:	4a82      	ldr	r2, [pc, #520]	; (8001228 <Motor_seq+0x22c>)
 800101e:	6013      	str	r3, [r2, #0]

	v =(0x8000 - __HAL_TIM_GET_COUNTER(htim_encoder));
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001026:	f5c3 4300 	rsb	r3, r3, #32768	; 0x8000
 800102a:	461a      	mov	r2, r3
 800102c:	4b7f      	ldr	r3, [pc, #508]	; (800122c <Motor_seq+0x230>)
 800102e:	601a      	str	r2, [r3, #0]
	TIM8->CNT=0x8000;
 8001030:	4b7f      	ldr	r3, [pc, #508]	; (8001230 <Motor_seq+0x234>)
 8001032:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001036:	625a      	str	r2, [r3, #36]	; 0x24
	if(v<0)v=0;
 8001038:	4b7c      	ldr	r3, [pc, #496]	; (800122c <Motor_seq+0x230>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	da02      	bge.n	8001046 <Motor_seq+0x4a>
 8001040:	4b7a      	ldr	r3, [pc, #488]	; (800122c <Motor_seq+0x230>)
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]

	if(motorEnRemote==2)//vészstop
 8001046:	4b7b      	ldr	r3, [pc, #492]	; (8001234 <Motor_seq+0x238>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b02      	cmp	r3, #2
 800104c:	d10b      	bne.n	8001066 <Motor_seq+0x6a>
	{
		MOTOR_EN(1);
 800104e:	2201      	movs	r2, #1
 8001050:	2140      	movs	r1, #64	; 0x40
 8001052:	4879      	ldr	r0, [pc, #484]	; (8001238 <Motor_seq+0x23c>)
 8001054:	f002 fdf6 	bl	8003c44 <HAL_GPIO_WritePin>
		motorDuty=-50;
 8001058:	4b78      	ldr	r3, [pc, #480]	; (800123c <Motor_seq+0x240>)
 800105a:	f06f 0231 	mvn.w	r2, #49	; 0x31
 800105e:	601a      	str	r2, [r3, #0]
		flag=0;
 8001060:	4b77      	ldr	r3, [pc, #476]	; (8001240 <Motor_seq+0x244>)
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]
	}

	if (flag==0 && motorEnRemote==1)//egységugrás indítása
 8001066:	4b76      	ldr	r3, [pc, #472]	; (8001240 <Motor_seq+0x244>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d115      	bne.n	800109a <Motor_seq+0x9e>
 800106e:	4b71      	ldr	r3, [pc, #452]	; (8001234 <Motor_seq+0x238>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d111      	bne.n	800109a <Motor_seq+0x9e>
	{
		MOTOR_EN(1);
 8001076:	2201      	movs	r2, #1
 8001078:	2140      	movs	r1, #64	; 0x40
 800107a:	486f      	ldr	r0, [pc, #444]	; (8001238 <Motor_seq+0x23c>)
 800107c:	f002 fde2 	bl	8003c44 <HAL_GPIO_WritePin>
		motorDuty=prev;
 8001080:	4b70      	ldr	r3, [pc, #448]	; (8001244 <Motor_seq+0x248>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a6d      	ldr	r2, [pc, #436]	; (800123c <Motor_seq+0x240>)
 8001086:	6013      	str	r3, [r2, #0]
		flag=1;
 8001088:	4b6d      	ldr	r3, [pc, #436]	; (8001240 <Motor_seq+0x244>)
 800108a:	2201      	movs	r2, #1
 800108c:	701a      	strb	r2, [r3, #0]
		LED_Y(0);
 800108e:	2201      	movs	r2, #1
 8001090:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001094:	4868      	ldr	r0, [pc, #416]	; (8001238 <Motor_seq+0x23c>)
 8001096:	f002 fdd5 	bl	8003c44 <HAL_GPIO_WritePin>
	}

	if(cntr<142 && flag==1)
 800109a:	4b6b      	ldr	r3, [pc, #428]	; (8001248 <Motor_seq+0x24c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2b8d      	cmp	r3, #141	; 0x8d
 80010a0:	dc25      	bgt.n	80010ee <Motor_seq+0xf2>
 80010a2:	4b67      	ldr	r3, [pc, #412]	; (8001240 <Motor_seq+0x244>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d121      	bne.n	80010ee <Motor_seq+0xf2>
	{

		str[0]=(uint8_t)((motorDuty& 0x0000ff00)>>8);
 80010aa:	4b64      	ldr	r3, [pc, #400]	; (800123c <Motor_seq+0x240>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	121b      	asrs	r3, r3, #8
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		str[1]=(uint8_t)(motorDuty & 0x000000ff);
 80010b6:	4b61      	ldr	r3, [pc, #388]	; (800123c <Motor_seq+0x240>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		str[2]=(uint8_t)((v & 0x0000ff00)>>8);
 80010c0:	4b5a      	ldr	r3, [pc, #360]	; (800122c <Motor_seq+0x230>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	121b      	asrs	r3, r3, #8
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		str[3]=(uint8_t)(v & 0x000000ff);
 80010cc:	4b57      	ldr	r3, [pc, #348]	; (800122c <Motor_seq+0x230>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		HAL_UART_Transmit(huart, str, 4, 10);
 80010d6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80010da:	230a      	movs	r3, #10
 80010dc:	2204      	movs	r2, #4
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f005 fae1 	bl	80066a6 <HAL_UART_Transmit>
		/*
		sprintf(string, "%d\n\r",v);
		HAL_UART_Transmit(huart, string, strlen(string), 10);
		*/
		cntr++;
 80010e4:	4b58      	ldr	r3, [pc, #352]	; (8001248 <Motor_seq+0x24c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	3301      	adds	r3, #1
 80010ea:	4a57      	ldr	r2, [pc, #348]	; (8001248 <Motor_seq+0x24c>)
 80010ec:	6013      	str	r3, [r2, #0]
	}
	if (cntr>=142 && flag==1){
 80010ee:	4b56      	ldr	r3, [pc, #344]	; (8001248 <Motor_seq+0x24c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b8d      	cmp	r3, #141	; 0x8d
 80010f4:	dd2b      	ble.n	800114e <Motor_seq+0x152>
 80010f6:	4b52      	ldr	r3, [pc, #328]	; (8001240 <Motor_seq+0x244>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d127      	bne.n	800114e <Motor_seq+0x152>

		str[0]=(uint8_t)((motorDuty& 0x0000ff00)>>8);
 80010fe:	4b4f      	ldr	r3, [pc, #316]	; (800123c <Motor_seq+0x240>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	121b      	asrs	r3, r3, #8
 8001104:	b2db      	uxtb	r3, r3
 8001106:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		str[1]=(uint8_t)(motorDuty & 0x000000ff);
 800110a:	4b4c      	ldr	r3, [pc, #304]	; (800123c <Motor_seq+0x240>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	b2db      	uxtb	r3, r3
 8001110:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		str[2]=(uint8_t)((v & 0x0000ff00)>>8);
 8001114:	4b45      	ldr	r3, [pc, #276]	; (800122c <Motor_seq+0x230>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	121b      	asrs	r3, r3, #8
 800111a:	b2db      	uxtb	r3, r3
 800111c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		str[3]=(uint8_t)(v & 0x000000ff);
 8001120:	4b42      	ldr	r3, [pc, #264]	; (800122c <Motor_seq+0x230>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	b2db      	uxtb	r3, r3
 8001126:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		HAL_UART_Transmit(huart, str, 4, 10);
 800112a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800112e:	230a      	movs	r3, #10
 8001130:	2204      	movs	r2, #4
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f005 fab7 	bl	80066a6 <HAL_UART_Transmit>

		/*
		sprintf(string, "%d\n\r",v);
		HAL_UART_Transmit(huart, string, strlen(string), 10);
		*/
		prev = motorDuty + 50;
 8001138:	4b40      	ldr	r3, [pc, #256]	; (800123c <Motor_seq+0x240>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	3332      	adds	r3, #50	; 0x32
 800113e:	4a41      	ldr	r2, [pc, #260]	; (8001244 <Motor_seq+0x248>)
 8001140:	6013      	str	r3, [r2, #0]
		motorDuty = 100;
 8001142:	4b3e      	ldr	r3, [pc, #248]	; (800123c <Motor_seq+0x240>)
 8001144:	2264      	movs	r2, #100	; 0x64
 8001146:	601a      	str	r2, [r3, #0]
		flag=2;
 8001148:	4b3d      	ldr	r3, [pc, #244]	; (8001240 <Motor_seq+0x244>)
 800114a:	2202      	movs	r2, #2
 800114c:	701a      	strb	r2, [r3, #0]
	}
	if(flag==2)
 800114e:	4b3c      	ldr	r3, [pc, #240]	; (8001240 <Motor_seq+0x244>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b02      	cmp	r3, #2
 8001154:	d11c      	bne.n	8001190 <Motor_seq+0x194>
	{
		str[0]=(uint8_t)((motorDuty& 0x0000ff00)>>8);
 8001156:	4b39      	ldr	r3, [pc, #228]	; (800123c <Motor_seq+0x240>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	121b      	asrs	r3, r3, #8
 800115c:	b2db      	uxtb	r3, r3
 800115e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		str[1]=(uint8_t)(motorDuty & 0x000000ff);
 8001162:	4b36      	ldr	r3, [pc, #216]	; (800123c <Motor_seq+0x240>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	b2db      	uxtb	r3, r3
 8001168:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		str[2]=(uint8_t)((v & 0x0000ff00)>>8);
 800116c:	4b2f      	ldr	r3, [pc, #188]	; (800122c <Motor_seq+0x230>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	121b      	asrs	r3, r3, #8
 8001172:	b2db      	uxtb	r3, r3
 8001174:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		str[3]=(uint8_t)(v & 0x000000ff);
 8001178:	4b2c      	ldr	r3, [pc, #176]	; (800122c <Motor_seq+0x230>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	b2db      	uxtb	r3, r3
 800117e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		HAL_UART_Transmit(huart, str, 4, 10);
 8001182:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001186:	230a      	movs	r3, #10
 8001188:	2204      	movs	r2, #4
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f005 fa8b 	bl	80066a6 <HAL_UART_Transmit>
		sprintf(string, "%d\n\r",v);
		HAL_UART_Transmit(huart, string, strlen(string), 10);
		*/
	}
	//asd
	if(v==0 && flag == 2)
 8001190:	4b26      	ldr	r3, [pc, #152]	; (800122c <Motor_seq+0x230>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d114      	bne.n	80011c2 <Motor_seq+0x1c6>
 8001198:	4b29      	ldr	r3, [pc, #164]	; (8001240 <Motor_seq+0x244>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b02      	cmp	r3, #2
 800119e:	d110      	bne.n	80011c2 <Motor_seq+0x1c6>
	{
		flag=0;
 80011a0:	4b27      	ldr	r3, [pc, #156]	; (8001240 <Motor_seq+0x244>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	701a      	strb	r2, [r3, #0]
		cntr=0;
 80011a6:	4b28      	ldr	r3, [pc, #160]	; (8001248 <Motor_seq+0x24c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
		MOTOR_EN(0);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2140      	movs	r1, #64	; 0x40
 80011b0:	4821      	ldr	r0, [pc, #132]	; (8001238 <Motor_seq+0x23c>)
 80011b2:	f002 fd47 	bl	8003c44 <HAL_GPIO_WritePin>
		LED_Y(1);
 80011b6:	2200      	movs	r2, #0
 80011b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011bc:	481e      	ldr	r0, [pc, #120]	; (8001238 <Motor_seq+0x23c>)
 80011be:	f002 fd41 	bl	8003c44 <HAL_GPIO_WritePin>
	}

	if(motorDuty!=motorDutyPrev)//csak akkor írjuk át őket ha tényleg muszáj (ha változtak az előző taskhívás óta)
 80011c2:	4b1e      	ldr	r3, [pc, #120]	; (800123c <Motor_seq+0x240>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a21      	ldr	r2, [pc, #132]	; (800124c <Motor_seq+0x250>)
 80011c8:	6812      	ldr	r2, [r2, #0]
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d021      	beq.n	8001212 <Motor_seq+0x216>
	{
		ccr2 = (motorDuty + 1000)/2-1;
 80011ce:	4b1b      	ldr	r3, [pc, #108]	; (800123c <Motor_seq+0x240>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80011d6:	0fda      	lsrs	r2, r3, #31
 80011d8:	4413      	add	r3, r2
 80011da:	105b      	asrs	r3, r3, #1
 80011dc:	3b01      	subs	r3, #1
 80011de:	62fb      	str	r3, [r7, #44]	; 0x2c
		if(ccr2>950)ccr2=950;
 80011e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e2:	f240 32b6 	movw	r2, #950	; 0x3b6
 80011e6:	4293      	cmp	r3, r2
 80011e8:	dd02      	ble.n	80011f0 <Motor_seq+0x1f4>
 80011ea:	f240 33b6 	movw	r3, #950	; 0x3b6
 80011ee:	62fb      	str	r3, [r7, #44]	; 0x2c
		if(ccr2<-950)ccr2=-950;
 80011f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f2:	4a17      	ldr	r2, [pc, #92]	; (8001250 <Motor_seq+0x254>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	da01      	bge.n	80011fc <Motor_seq+0x200>
 80011f8:	4b15      	ldr	r3, [pc, #84]	; (8001250 <Motor_seq+0x254>)
 80011fa:	62fb      	str	r3, [r7, #44]	; 0x2c
		ccr1= 1000-ccr2-2;
 80011fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011fe:	f5c3 7379 	rsb	r3, r3, #996	; 0x3e4
 8001202:	3302      	adds	r3, #2
 8001204:	62bb      	str	r3, [r7, #40]	; 0x28

		//2 Referencia megadása
		//Ezeket a loopba kéne változtatni folyamatosan, pwm-elinditas mashova kell majd
		TIM3->CCR1=ccr1;
 8001206:	4a13      	ldr	r2, [pc, #76]	; (8001254 <Motor_seq+0x258>)
 8001208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800120a:	6353      	str	r3, [r2, #52]	; 0x34
		TIM3->CCR2=ccr2;
 800120c:	4a11      	ldr	r2, [pc, #68]	; (8001254 <Motor_seq+0x258>)
 800120e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001210:	6393      	str	r3, [r2, #56]	; 0x38
	}
	motorDutyPrev=motorDuty;
 8001212:	4b0a      	ldr	r3, [pc, #40]	; (800123c <Motor_seq+0x240>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	461a      	mov	r2, r3
 8001218:	4b0c      	ldr	r3, [pc, #48]	; (800124c <Motor_seq+0x250>)
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	e000      	b.n	8001220 <Motor_seq+0x224>
	if(motor_seq_tick>tick) return;
 800121e:	bf00      	nop
}
 8001220:	3730      	adds	r7, #48	; 0x30
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20000218 	.word	0x20000218
 800122c:	20000214 	.word	0x20000214
 8001230:	40010400 	.word	0x40010400
 8001234:	200005d8 	.word	0x200005d8
 8001238:	40020400 	.word	0x40020400
 800123c:	20000000 	.word	0x20000000
 8001240:	2000021c 	.word	0x2000021c
 8001244:	20000004 	.word	0x20000004
 8001248:	20000220 	.word	0x20000220
 800124c:	20000224 	.word	0x20000224
 8001250:	fffffc4a 	.word	0xfffffc4a
 8001254:	40000400 	.word	0x40000400

08001258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800125e:	f001 fb33 	bl	80028c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001262:	f000 f84b 	bl	80012fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001266:	f000 fcc3 	bl	8001bf0 <MX_GPIO_Init>
  MX_DMA_Init();
 800126a:	f000 fca1 	bl	8001bb0 <MX_DMA_Init>
  MX_TIM2_Init();
 800126e:	f000 f9dd 	bl	800162c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001272:	f000 fc1f 	bl	8001ab4 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8001276:	f000 fad1 	bl	800181c <MX_TIM4_Init>
  MX_ADC2_Init();
 800127a:	f000 f903 	bl	8001484 <MX_ADC2_Init>
  MX_TIM3_Init();
 800127e:	f000 fa4b 	bl	8001718 <MX_TIM3_Init>
  MX_UART5_Init();
 8001282:	f000 fbed 	bl	8001a60 <MX_UART5_Init>
  MX_USART2_UART_Init();
 8001286:	f000 fc3f 	bl	8001b08 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 800128a:	f000 fb91 	bl	80019b0 <MX_TIM8_Init>
  MX_ADC1_Init();
 800128e:	f000 f8a7 	bl	80013e0 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8001292:	f000 fc63 	bl	8001b5c <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8001296:	f000 fb3d 	bl	8001914 <MX_TIM5_Init>
  MX_TIM1_Init();
 800129a:	f000 f945 	bl	8001528 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  F4_Basic_Init(&huart1, &htim5,&htim3,&htim2);
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <main+0x8c>)
 80012a0:	4a11      	ldr	r2, [pc, #68]	; (80012e8 <main+0x90>)
 80012a2:	4912      	ldr	r1, [pc, #72]	; (80012ec <main+0x94>)
 80012a4:	4812      	ldr	r0, [pc, #72]	; (80012f0 <main+0x98>)
 80012a6:	f7ff fe21 	bl	8000eec <F4_Basic_Init>
  Remote_Control_Init(&htim4, TIM_CHANNEL_3); //inicializálunk a megfelelő perifériákkal
 80012aa:	2108      	movs	r1, #8
 80012ac:	4811      	ldr	r0, [pc, #68]	; (80012f4 <main+0x9c>)
 80012ae:	f000 fd73 	bl	8001d98 <Remote_Control_Init>
  HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80012b2:	213c      	movs	r1, #60	; 0x3c
 80012b4:	4810      	ldr	r0, [pc, #64]	; (80012f8 <main+0xa0>)
 80012b6:	f003 ffab 	bl	8005210 <HAL_TIM_Encoder_Start>
	//Meas_Bat_Task(&hadc2, &huart2, TICK, 10000);
	//Motor_Drive_Task(&htim3,&htim8, &huart1, TICK, 20);
	//SW_Read_Task(TICK, 500);
	//Line_Track_Task(&huart5, &huart1, TICK, 10);

	Remote_Control_Task(&htim4, TIM_CHANNEL_3, &huart1, TICK, 10);
 80012ba:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <main+0x94>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c0:	220a      	movs	r2, #10
 80012c2:	9200      	str	r2, [sp, #0]
 80012c4:	4a0a      	ldr	r2, [pc, #40]	; (80012f0 <main+0x98>)
 80012c6:	2108      	movs	r1, #8
 80012c8:	480a      	ldr	r0, [pc, #40]	; (80012f4 <main+0x9c>)
 80012ca:	f000 fd7f 	bl	8001dcc <Remote_Control_Task>
	//Rendszer identifikáció
	Motor_seq(&htim3, &htim8, &huart1, TICK, 35);
 80012ce:	4b07      	ldr	r3, [pc, #28]	; (80012ec <main+0x94>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d4:	2223      	movs	r2, #35	; 0x23
 80012d6:	9200      	str	r2, [sp, #0]
 80012d8:	4a05      	ldr	r2, [pc, #20]	; (80012f0 <main+0x98>)
 80012da:	4907      	ldr	r1, [pc, #28]	; (80012f8 <main+0xa0>)
 80012dc:	4802      	ldr	r0, [pc, #8]	; (80012e8 <main+0x90>)
 80012de:	f7ff fe8d 	bl	8000ffc <Motor_seq>
	Remote_Control_Task(&htim4, TIM_CHANNEL_3, &huart1, TICK, 10);
 80012e2:	e7ea      	b.n	80012ba <main+0x62>
 80012e4:	20000300 	.word	0x20000300
 80012e8:	20000348 	.word	0x20000348
 80012ec:	200003d8 	.word	0x200003d8
 80012f0:	2000050c 	.word	0x2000050c
 80012f4:	20000390 	.word	0x20000390
 80012f8:	20000420 	.word	0x20000420

080012fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b094      	sub	sp, #80	; 0x50
 8001300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	2234      	movs	r2, #52	; 0x34
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f006 fa20 	bl	8007750 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001310:	f107 0308 	add.w	r3, r7, #8
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001320:	2300      	movs	r3, #0
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	4b2c      	ldr	r3, [pc, #176]	; (80013d8 <SystemClock_Config+0xdc>)
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	4a2b      	ldr	r2, [pc, #172]	; (80013d8 <SystemClock_Config+0xdc>)
 800132a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800132e:	6413      	str	r3, [r2, #64]	; 0x40
 8001330:	4b29      	ldr	r3, [pc, #164]	; (80013d8 <SystemClock_Config+0xdc>)
 8001332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800133c:	2300      	movs	r3, #0
 800133e:	603b      	str	r3, [r7, #0]
 8001340:	4b26      	ldr	r3, [pc, #152]	; (80013dc <SystemClock_Config+0xe0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a25      	ldr	r2, [pc, #148]	; (80013dc <SystemClock_Config+0xe0>)
 8001346:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800134a:	6013      	str	r3, [r2, #0]
 800134c:	4b23      	ldr	r3, [pc, #140]	; (80013dc <SystemClock_Config+0xe0>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001354:	603b      	str	r3, [r7, #0]
 8001356:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001358:	2301      	movs	r3, #1
 800135a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800135c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001360:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001362:	2302      	movs	r3, #2
 8001364:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001366:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800136a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800136c:	2304      	movs	r3, #4
 800136e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001370:	23b4      	movs	r3, #180	; 0xb4
 8001372:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001374:	2302      	movs	r3, #2
 8001376:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001378:	2302      	movs	r3, #2
 800137a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800137c:	2302      	movs	r3, #2
 800137e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001380:	f107 031c 	add.w	r3, r7, #28
 8001384:	4618      	mov	r0, r3
 8001386:	f003 f82b 	bl	80043e0 <HAL_RCC_OscConfig>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001390:	f000 fcfc 	bl	8001d8c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001394:	f002 fc8a 	bl	8003cac <HAL_PWREx_EnableOverDrive>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800139e:	f000 fcf5 	bl	8001d8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a2:	230f      	movs	r3, #15
 80013a4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a6:	2302      	movs	r3, #2
 80013a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80013ae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80013b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013ba:	f107 0308 	add.w	r3, r7, #8
 80013be:	2105      	movs	r1, #5
 80013c0:	4618      	mov	r0, r3
 80013c2:	f002 fcc3 	bl	8003d4c <HAL_RCC_ClockConfig>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80013cc:	f000 fcde 	bl	8001d8c <Error_Handler>
  }
}
 80013d0:	bf00      	nop
 80013d2:	3750      	adds	r7, #80	; 0x50
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40007000 	.word	0x40007000

080013e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013e6:	463b      	mov	r3, r7
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013f2:	4b21      	ldr	r3, [pc, #132]	; (8001478 <MX_ADC1_Init+0x98>)
 80013f4:	4a21      	ldr	r2, [pc, #132]	; (800147c <MX_ADC1_Init+0x9c>)
 80013f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013f8:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <MX_ADC1_Init+0x98>)
 80013fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001400:	4b1d      	ldr	r3, [pc, #116]	; (8001478 <MX_ADC1_Init+0x98>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001406:	4b1c      	ldr	r3, [pc, #112]	; (8001478 <MX_ADC1_Init+0x98>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800140c:	4b1a      	ldr	r3, [pc, #104]	; (8001478 <MX_ADC1_Init+0x98>)
 800140e:	2200      	movs	r2, #0
 8001410:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001412:	4b19      	ldr	r3, [pc, #100]	; (8001478 <MX_ADC1_Init+0x98>)
 8001414:	2200      	movs	r2, #0
 8001416:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800141a:	4b17      	ldr	r3, [pc, #92]	; (8001478 <MX_ADC1_Init+0x98>)
 800141c:	2200      	movs	r2, #0
 800141e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001420:	4b15      	ldr	r3, [pc, #84]	; (8001478 <MX_ADC1_Init+0x98>)
 8001422:	4a17      	ldr	r2, [pc, #92]	; (8001480 <MX_ADC1_Init+0xa0>)
 8001424:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001426:	4b14      	ldr	r3, [pc, #80]	; (8001478 <MX_ADC1_Init+0x98>)
 8001428:	2200      	movs	r2, #0
 800142a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <MX_ADC1_Init+0x98>)
 800142e:	2201      	movs	r2, #1
 8001430:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001432:	4b11      	ldr	r3, [pc, #68]	; (8001478 <MX_ADC1_Init+0x98>)
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800143a:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <MX_ADC1_Init+0x98>)
 800143c:	2201      	movs	r2, #1
 800143e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001440:	480d      	ldr	r0, [pc, #52]	; (8001478 <MX_ADC1_Init+0x98>)
 8001442:	f001 fab3 	bl	80029ac <HAL_ADC_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800144c:	f000 fc9e 	bl	8001d8c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001450:	2308      	movs	r3, #8
 8001452:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001454:	2301      	movs	r3, #1
 8001456:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001458:	2300      	movs	r3, #0
 800145a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800145c:	463b      	mov	r3, r7
 800145e:	4619      	mov	r1, r3
 8001460:	4805      	ldr	r0, [pc, #20]	; (8001478 <MX_ADC1_Init+0x98>)
 8001462:	f001 fae7 	bl	8002a34 <HAL_ADC_ConfigChannel>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800146c:	f000 fc8e 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001470:	bf00      	nop
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000228 	.word	0x20000228
 800147c:	40012000 	.word	0x40012000
 8001480:	0f000001 	.word	0x0f000001

08001484 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800148a:	463b      	mov	r3, r7
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001496:	4b21      	ldr	r3, [pc, #132]	; (800151c <MX_ADC2_Init+0x98>)
 8001498:	4a21      	ldr	r2, [pc, #132]	; (8001520 <MX_ADC2_Init+0x9c>)
 800149a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800149c:	4b1f      	ldr	r3, [pc, #124]	; (800151c <MX_ADC2_Init+0x98>)
 800149e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014a2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80014a4:	4b1d      	ldr	r3, [pc, #116]	; (800151c <MX_ADC2_Init+0x98>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80014aa:	4b1c      	ldr	r3, [pc, #112]	; (800151c <MX_ADC2_Init+0x98>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80014b0:	4b1a      	ldr	r3, [pc, #104]	; (800151c <MX_ADC2_Init+0x98>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80014b6:	4b19      	ldr	r3, [pc, #100]	; (800151c <MX_ADC2_Init+0x98>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014be:	4b17      	ldr	r3, [pc, #92]	; (800151c <MX_ADC2_Init+0x98>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014c4:	4b15      	ldr	r3, [pc, #84]	; (800151c <MX_ADC2_Init+0x98>)
 80014c6:	4a17      	ldr	r2, [pc, #92]	; (8001524 <MX_ADC2_Init+0xa0>)
 80014c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014ca:	4b14      	ldr	r3, [pc, #80]	; (800151c <MX_ADC2_Init+0x98>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80014d0:	4b12      	ldr	r3, [pc, #72]	; (800151c <MX_ADC2_Init+0x98>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80014d6:	4b11      	ldr	r3, [pc, #68]	; (800151c <MX_ADC2_Init+0x98>)
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014de:	4b0f      	ldr	r3, [pc, #60]	; (800151c <MX_ADC2_Init+0x98>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80014e4:	480d      	ldr	r0, [pc, #52]	; (800151c <MX_ADC2_Init+0x98>)
 80014e6:	f001 fa61 	bl	80029ac <HAL_ADC_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80014f0:	f000 fc4c 	bl	8001d8c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80014f4:	230d      	movs	r3, #13
 80014f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014f8:	2301      	movs	r3, #1
 80014fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001500:	463b      	mov	r3, r7
 8001502:	4619      	mov	r1, r3
 8001504:	4805      	ldr	r0, [pc, #20]	; (800151c <MX_ADC2_Init+0x98>)
 8001506:	f001 fa95 	bl	8002a34 <HAL_ADC_ConfigChannel>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001510:	f000 fc3c 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001514:	bf00      	nop
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000270 	.word	0x20000270
 8001520:	40012100 	.word	0x40012100
 8001524:	0f000001 	.word	0x0f000001

08001528 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b092      	sub	sp, #72	; 0x48
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800152e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
 8001548:	615a      	str	r2, [r3, #20]
 800154a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	2220      	movs	r2, #32
 8001550:	2100      	movs	r1, #0
 8001552:	4618      	mov	r0, r3
 8001554:	f006 f8fc 	bl	8007750 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001558:	4b32      	ldr	r3, [pc, #200]	; (8001624 <MX_TIM1_Init+0xfc>)
 800155a:	4a33      	ldr	r2, [pc, #204]	; (8001628 <MX_TIM1_Init+0x100>)
 800155c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800155e:	4b31      	ldr	r3, [pc, #196]	; (8001624 <MX_TIM1_Init+0xfc>)
 8001560:	2200      	movs	r2, #0
 8001562:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001564:	4b2f      	ldr	r3, [pc, #188]	; (8001624 <MX_TIM1_Init+0xfc>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800156a:	4b2e      	ldr	r3, [pc, #184]	; (8001624 <MX_TIM1_Init+0xfc>)
 800156c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001570:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001572:	4b2c      	ldr	r3, [pc, #176]	; (8001624 <MX_TIM1_Init+0xfc>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001578:	4b2a      	ldr	r3, [pc, #168]	; (8001624 <MX_TIM1_Init+0xfc>)
 800157a:	2200      	movs	r2, #0
 800157c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800157e:	4b29      	ldr	r3, [pc, #164]	; (8001624 <MX_TIM1_Init+0xfc>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001584:	4827      	ldr	r0, [pc, #156]	; (8001624 <MX_TIM1_Init+0xfc>)
 8001586:	f003 fa81 	bl	8004a8c <HAL_TIM_PWM_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001590:	f000 fbfc 	bl	8001d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001594:	2300      	movs	r3, #0
 8001596:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001598:	2300      	movs	r3, #0
 800159a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800159c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015a0:	4619      	mov	r1, r3
 80015a2:	4820      	ldr	r0, [pc, #128]	; (8001624 <MX_TIM1_Init+0xfc>)
 80015a4:	f004 ff50 	bl	8006448 <HAL_TIMEx_MasterConfigSynchronization>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80015ae:	f000 fbed 	bl	8001d8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b2:	2360      	movs	r3, #96	; 0x60
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ba:	2300      	movs	r3, #0
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015be:	2300      	movs	r3, #0
 80015c0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015c2:	2300      	movs	r3, #0
 80015c4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015c6:	2300      	movs	r3, #0
 80015c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ce:	220c      	movs	r2, #12
 80015d0:	4619      	mov	r1, r3
 80015d2:	4814      	ldr	r0, [pc, #80]	; (8001624 <MX_TIM1_Init+0xfc>)
 80015d4:	f004 f84e 	bl	8005674 <HAL_TIM_PWM_ConfigChannel>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 80015de:	f000 fbd5 	bl	8001d8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015fa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001600:	1d3b      	adds	r3, r7, #4
 8001602:	4619      	mov	r1, r3
 8001604:	4807      	ldr	r0, [pc, #28]	; (8001624 <MX_TIM1_Init+0xfc>)
 8001606:	f004 ff9b 	bl	8006540 <HAL_TIMEx_ConfigBreakDeadTime>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8001610:	f000 fbbc 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001614:	4803      	ldr	r0, [pc, #12]	; (8001624 <MX_TIM1_Init+0xfc>)
 8001616:	f000 fe65 	bl	80022e4 <HAL_TIM_MspPostInit>

}
 800161a:	bf00      	nop
 800161c:	3748      	adds	r7, #72	; 0x48
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	200002b8 	.word	0x200002b8
 8001628:	40010000 	.word	0x40010000

0800162c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08e      	sub	sp, #56	; 0x38
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001632:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001640:	f107 0320 	add.w	r3, r7, #32
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
 8001658:	615a      	str	r2, [r3, #20]
 800165a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800165c:	4b2d      	ldr	r3, [pc, #180]	; (8001714 <MX_TIM2_Init+0xe8>)
 800165e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001662:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8001664:	4b2b      	ldr	r3, [pc, #172]	; (8001714 <MX_TIM2_Init+0xe8>)
 8001666:	2259      	movs	r2, #89	; 0x59
 8001668:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166a:	4b2a      	ldr	r3, [pc, #168]	; (8001714 <MX_TIM2_Init+0xe8>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001670:	4b28      	ldr	r3, [pc, #160]	; (8001714 <MX_TIM2_Init+0xe8>)
 8001672:	f242 720f 	movw	r2, #9999	; 0x270f
 8001676:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001678:	4b26      	ldr	r3, [pc, #152]	; (8001714 <MX_TIM2_Init+0xe8>)
 800167a:	2200      	movs	r2, #0
 800167c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800167e:	4b25      	ldr	r3, [pc, #148]	; (8001714 <MX_TIM2_Init+0xe8>)
 8001680:	2280      	movs	r2, #128	; 0x80
 8001682:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001684:	4823      	ldr	r0, [pc, #140]	; (8001714 <MX_TIM2_Init+0xe8>)
 8001686:	f003 f949 	bl	800491c <HAL_TIM_Base_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001690:	f000 fb7c 	bl	8001d8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001698:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800169a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800169e:	4619      	mov	r1, r3
 80016a0:	481c      	ldr	r0, [pc, #112]	; (8001714 <MX_TIM2_Init+0xe8>)
 80016a2:	f004 f8a9 	bl	80057f8 <HAL_TIM_ConfigClockSource>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80016ac:	f000 fb6e 	bl	8001d8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016b0:	4818      	ldr	r0, [pc, #96]	; (8001714 <MX_TIM2_Init+0xe8>)
 80016b2:	f003 f9eb 	bl	8004a8c <HAL_TIM_PWM_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80016bc:	f000 fb66 	bl	8001d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c0:	2300      	movs	r3, #0
 80016c2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c4:	2300      	movs	r3, #0
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016c8:	f107 0320 	add.w	r3, r7, #32
 80016cc:	4619      	mov	r1, r3
 80016ce:	4811      	ldr	r0, [pc, #68]	; (8001714 <MX_TIM2_Init+0xe8>)
 80016d0:	f004 feba 	bl	8006448 <HAL_TIMEx_MasterConfigSynchronization>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80016da:	f000 fb57 	bl	8001d8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016de:	2360      	movs	r3, #96	; 0x60
 80016e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 750-1;
 80016e2:	f240 23ed 	movw	r3, #749	; 0x2ed
 80016e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	2200      	movs	r2, #0
 80016f4:	4619      	mov	r1, r3
 80016f6:	4807      	ldr	r0, [pc, #28]	; (8001714 <MX_TIM2_Init+0xe8>)
 80016f8:	f003 ffbc 	bl	8005674 <HAL_TIM_PWM_ConfigChannel>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001702:	f000 fb43 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001706:	4803      	ldr	r0, [pc, #12]	; (8001714 <MX_TIM2_Init+0xe8>)
 8001708:	f000 fdec 	bl	80022e4 <HAL_TIM_MspPostInit>

}
 800170c:	bf00      	nop
 800170e:	3738      	adds	r7, #56	; 0x38
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20000300 	.word	0x20000300

08001718 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08e      	sub	sp, #56	; 0x38
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800171e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800172c:	f107 0320 	add.w	r3, r7, #32
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	611a      	str	r2, [r3, #16]
 8001744:	615a      	str	r2, [r3, #20]
 8001746:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001748:	4b32      	ldr	r3, [pc, #200]	; (8001814 <MX_TIM3_Init+0xfc>)
 800174a:	4a33      	ldr	r2, [pc, #204]	; (8001818 <MX_TIM3_Init+0x100>)
 800174c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2-1;
 800174e:	4b31      	ldr	r3, [pc, #196]	; (8001814 <MX_TIM3_Init+0xfc>)
 8001750:	2201      	movs	r2, #1
 8001752:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8001754:	4b2f      	ldr	r3, [pc, #188]	; (8001814 <MX_TIM3_Init+0xfc>)
 8001756:	2260      	movs	r2, #96	; 0x60
 8001758:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800175a:	4b2e      	ldr	r3, [pc, #184]	; (8001814 <MX_TIM3_Init+0xfc>)
 800175c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001760:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001762:	4b2c      	ldr	r3, [pc, #176]	; (8001814 <MX_TIM3_Init+0xfc>)
 8001764:	2200      	movs	r2, #0
 8001766:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001768:	4b2a      	ldr	r3, [pc, #168]	; (8001814 <MX_TIM3_Init+0xfc>)
 800176a:	2200      	movs	r2, #0
 800176c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800176e:	4829      	ldr	r0, [pc, #164]	; (8001814 <MX_TIM3_Init+0xfc>)
 8001770:	f003 f8d4 	bl	800491c <HAL_TIM_Base_Init>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800177a:	f000 fb07 	bl	8001d8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800177e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001782:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001784:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001788:	4619      	mov	r1, r3
 800178a:	4822      	ldr	r0, [pc, #136]	; (8001814 <MX_TIM3_Init+0xfc>)
 800178c:	f004 f834 	bl	80057f8 <HAL_TIM_ConfigClockSource>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001796:	f000 faf9 	bl	8001d8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800179a:	481e      	ldr	r0, [pc, #120]	; (8001814 <MX_TIM3_Init+0xfc>)
 800179c:	f003 f976 	bl	8004a8c <HAL_TIM_PWM_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80017a6:	f000 faf1 	bl	8001d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017aa:	2300      	movs	r3, #0
 80017ac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ae:	2300      	movs	r3, #0
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017b2:	f107 0320 	add.w	r3, r7, #32
 80017b6:	4619      	mov	r1, r3
 80017b8:	4816      	ldr	r0, [pc, #88]	; (8001814 <MX_TIM3_Init+0xfc>)
 80017ba:	f004 fe45 	bl	8006448 <HAL_TIMEx_MasterConfigSynchronization>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80017c4:	f000 fae2 	bl	8001d8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017c8:	2360      	movs	r3, #96	; 0x60
 80017ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017d0:	2300      	movs	r3, #0
 80017d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	2200      	movs	r2, #0
 80017dc:	4619      	mov	r1, r3
 80017de:	480d      	ldr	r0, [pc, #52]	; (8001814 <MX_TIM3_Init+0xfc>)
 80017e0:	f003 ff48 	bl	8005674 <HAL_TIM_PWM_ConfigChannel>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80017ea:	f000 facf 	bl	8001d8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	2204      	movs	r2, #4
 80017f2:	4619      	mov	r1, r3
 80017f4:	4807      	ldr	r0, [pc, #28]	; (8001814 <MX_TIM3_Init+0xfc>)
 80017f6:	f003 ff3d 	bl	8005674 <HAL_TIM_PWM_ConfigChannel>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001800:	f000 fac4 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001804:	4803      	ldr	r0, [pc, #12]	; (8001814 <MX_TIM3_Init+0xfc>)
 8001806:	f000 fd6d 	bl	80022e4 <HAL_TIM_MspPostInit>

}
 800180a:	bf00      	nop
 800180c:	3738      	adds	r7, #56	; 0x38
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000348 	.word	0x20000348
 8001818:	40000400 	.word	0x40000400

0800181c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08a      	sub	sp, #40	; 0x28
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001822:	f107 0318 	add.w	r3, r7, #24
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001830:	f107 0310 	add.w	r3, r7, #16
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800183a:	463b      	mov	r3, r7
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001846:	4b31      	ldr	r3, [pc, #196]	; (800190c <MX_TIM4_Init+0xf0>)
 8001848:	4a31      	ldr	r2, [pc, #196]	; (8001910 <MX_TIM4_Init+0xf4>)
 800184a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 800-1;
 800184c:	4b2f      	ldr	r3, [pc, #188]	; (800190c <MX_TIM4_Init+0xf0>)
 800184e:	f240 321f 	movw	r2, #799	; 0x31f
 8001852:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001854:	4b2d      	ldr	r3, [pc, #180]	; (800190c <MX_TIM4_Init+0xf0>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65536-1;
 800185a:	4b2c      	ldr	r3, [pc, #176]	; (800190c <MX_TIM4_Init+0xf0>)
 800185c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001860:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001862:	4b2a      	ldr	r3, [pc, #168]	; (800190c <MX_TIM4_Init+0xf0>)
 8001864:	2200      	movs	r2, #0
 8001866:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001868:	4b28      	ldr	r3, [pc, #160]	; (800190c <MX_TIM4_Init+0xf0>)
 800186a:	2280      	movs	r2, #128	; 0x80
 800186c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800186e:	4827      	ldr	r0, [pc, #156]	; (800190c <MX_TIM4_Init+0xf0>)
 8001870:	f003 f854 	bl	800491c <HAL_TIM_Base_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 800187a:	f000 fa87 	bl	8001d8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800187e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001882:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001884:	f107 0318 	add.w	r3, r7, #24
 8001888:	4619      	mov	r1, r3
 800188a:	4820      	ldr	r0, [pc, #128]	; (800190c <MX_TIM4_Init+0xf0>)
 800188c:	f003 ffb4 	bl	80057f8 <HAL_TIM_ConfigClockSource>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001896:	f000 fa79 	bl	8001d8c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800189a:	481c      	ldr	r0, [pc, #112]	; (800190c <MX_TIM4_Init+0xf0>)
 800189c:	f003 fa0e 	bl	8004cbc <HAL_TIM_IC_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80018a6:	f000 fa71 	bl	8001d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018b2:	f107 0310 	add.w	r3, r7, #16
 80018b6:	4619      	mov	r1, r3
 80018b8:	4814      	ldr	r0, [pc, #80]	; (800190c <MX_TIM4_Init+0xf0>)
 80018ba:	f004 fdc5 	bl	8006448 <HAL_TIMEx_MasterConfigSynchronization>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 80018c4:	f000 fa62 	bl	8001d8c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80018c8:	230a      	movs	r3, #10
 80018ca:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80018cc:	2301      	movs	r3, #1
 80018ce:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80018d0:	2300      	movs	r3, #0
 80018d2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80018d8:	463b      	mov	r3, r7
 80018da:	2208      	movs	r2, #8
 80018dc:	4619      	mov	r1, r3
 80018de:	480b      	ldr	r0, [pc, #44]	; (800190c <MX_TIM4_Init+0xf0>)
 80018e0:	f003 fe2c 	bl	800553c <HAL_TIM_IC_ConfigChannel>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 80018ea:	f000 fa4f 	bl	8001d8c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80018ee:	463b      	mov	r3, r7
 80018f0:	220c      	movs	r2, #12
 80018f2:	4619      	mov	r1, r3
 80018f4:	4805      	ldr	r0, [pc, #20]	; (800190c <MX_TIM4_Init+0xf0>)
 80018f6:	f003 fe21 	bl	800553c <HAL_TIM_IC_ConfigChannel>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_TIM4_Init+0xe8>
  {
    Error_Handler();
 8001900:	f000 fa44 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001904:	bf00      	nop
 8001906:	3728      	adds	r7, #40	; 0x28
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000390 	.word	0x20000390
 8001910:	40000800 	.word	0x40000800

08001914 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800191a:	f107 0308 	add.w	r3, r7, #8
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001928:	463b      	mov	r3, r7
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001930:	4b1d      	ldr	r3, [pc, #116]	; (80019a8 <MX_TIM5_Init+0x94>)
 8001932:	4a1e      	ldr	r2, [pc, #120]	; (80019ac <MX_TIM5_Init+0x98>)
 8001934:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 45000-1;
 8001936:	4b1c      	ldr	r3, [pc, #112]	; (80019a8 <MX_TIM5_Init+0x94>)
 8001938:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 800193c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800193e:	4b1a      	ldr	r3, [pc, #104]	; (80019a8 <MX_TIM5_Init+0x94>)
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001944:	4b18      	ldr	r3, [pc, #96]	; (80019a8 <MX_TIM5_Init+0x94>)
 8001946:	f04f 32ff 	mov.w	r2, #4294967295
 800194a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800194c:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <MX_TIM5_Init+0x94>)
 800194e:	2200      	movs	r2, #0
 8001950:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001952:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <MX_TIM5_Init+0x94>)
 8001954:	2280      	movs	r2, #128	; 0x80
 8001956:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001958:	4813      	ldr	r0, [pc, #76]	; (80019a8 <MX_TIM5_Init+0x94>)
 800195a:	f002 ffdf 	bl	800491c <HAL_TIM_Base_Init>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001964:	f000 fa12 	bl	8001d8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800196c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800196e:	f107 0308 	add.w	r3, r7, #8
 8001972:	4619      	mov	r1, r3
 8001974:	480c      	ldr	r0, [pc, #48]	; (80019a8 <MX_TIM5_Init+0x94>)
 8001976:	f003 ff3f 	bl	80057f8 <HAL_TIM_ConfigClockSource>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001980:	f000 fa04 	bl	8001d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001984:	2300      	movs	r3, #0
 8001986:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001988:	2300      	movs	r3, #0
 800198a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800198c:	463b      	mov	r3, r7
 800198e:	4619      	mov	r1, r3
 8001990:	4805      	ldr	r0, [pc, #20]	; (80019a8 <MX_TIM5_Init+0x94>)
 8001992:	f004 fd59 	bl	8006448 <HAL_TIMEx_MasterConfigSynchronization>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800199c:	f000 f9f6 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80019a0:	bf00      	nop
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	200003d8 	.word	0x200003d8
 80019ac:	40000c00 	.word	0x40000c00

080019b0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08c      	sub	sp, #48	; 0x30
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019b6:	f107 030c 	add.w	r3, r7, #12
 80019ba:	2224      	movs	r2, #36	; 0x24
 80019bc:	2100      	movs	r1, #0
 80019be:	4618      	mov	r0, r3
 80019c0:	f005 fec6 	bl	8007750 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c4:	1d3b      	adds	r3, r7, #4
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80019cc:	4b22      	ldr	r3, [pc, #136]	; (8001a58 <MX_TIM8_Init+0xa8>)
 80019ce:	4a23      	ldr	r2, [pc, #140]	; (8001a5c <MX_TIM8_Init+0xac>)
 80019d0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80019d2:	4b21      	ldr	r3, [pc, #132]	; (8001a58 <MX_TIM8_Init+0xa8>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d8:	4b1f      	ldr	r3, [pc, #124]	; (8001a58 <MX_TIM8_Init+0xa8>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80019de:	4b1e      	ldr	r3, [pc, #120]	; (8001a58 <MX_TIM8_Init+0xa8>)
 80019e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019e4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e6:	4b1c      	ldr	r3, [pc, #112]	; (8001a58 <MX_TIM8_Init+0xa8>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80019ec:	4b1a      	ldr	r3, [pc, #104]	; (8001a58 <MX_TIM8_Init+0xa8>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019f2:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <MX_TIM8_Init+0xa8>)
 80019f4:	2280      	movs	r2, #128	; 0x80
 80019f6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019f8:	2303      	movs	r3, #3
 80019fa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019fc:	2300      	movs	r3, #0
 80019fe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a00:	2301      	movs	r3, #1
 8001a02:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a04:	2300      	movs	r3, #0
 8001a06:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 12;
 8001a08:	230c      	movs	r3, #12
 8001a0a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a10:	2301      	movs	r3, #1
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a14:	2300      	movs	r3, #0
 8001a16:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 12;
 8001a18:	230c      	movs	r3, #12
 8001a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001a1c:	f107 030c 	add.w	r3, r7, #12
 8001a20:	4619      	mov	r1, r3
 8001a22:	480d      	ldr	r0, [pc, #52]	; (8001a58 <MX_TIM8_Init+0xa8>)
 8001a24:	f003 fb4e 	bl	80050c4 <HAL_TIM_Encoder_Init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001a2e:	f000 f9ad 	bl	8001d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a32:	2300      	movs	r3, #0
 8001a34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a36:	2300      	movs	r3, #0
 8001a38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4806      	ldr	r0, [pc, #24]	; (8001a58 <MX_TIM8_Init+0xa8>)
 8001a40:	f004 fd02 	bl	8006448 <HAL_TIMEx_MasterConfigSynchronization>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001a4a:	f000 f99f 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001a4e:	bf00      	nop
 8001a50:	3730      	adds	r7, #48	; 0x30
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000420 	.word	0x20000420
 8001a5c:	40010400 	.word	0x40010400

08001a60 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001a64:	4b11      	ldr	r3, [pc, #68]	; (8001aac <MX_UART5_Init+0x4c>)
 8001a66:	4a12      	ldr	r2, [pc, #72]	; (8001ab0 <MX_UART5_Init+0x50>)
 8001a68:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 460800;
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <MX_UART5_Init+0x4c>)
 8001a6c:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001a70:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001a72:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <MX_UART5_Init+0x4c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001a78:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <MX_UART5_Init+0x4c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <MX_UART5_Init+0x4c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001a84:	4b09      	ldr	r3, [pc, #36]	; (8001aac <MX_UART5_Init+0x4c>)
 8001a86:	220c      	movs	r2, #12
 8001a88:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a8a:	4b08      	ldr	r3, [pc, #32]	; (8001aac <MX_UART5_Init+0x4c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <MX_UART5_Init+0x4c>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001a96:	4805      	ldr	r0, [pc, #20]	; (8001aac <MX_UART5_Init+0x4c>)
 8001a98:	f004 fdb8 	bl	800660c <HAL_UART_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001aa2:	f000 f973 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	200004c8 	.word	0x200004c8
 8001ab0:	40005000 	.word	0x40005000

08001ab4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ab8:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <MX_USART1_UART_Init+0x4c>)
 8001aba:	4a12      	ldr	r2, [pc, #72]	; (8001b04 <MX_USART1_UART_Init+0x50>)
 8001abc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001abe:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <MX_USART1_UART_Init+0x4c>)
 8001ac0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ac4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ac6:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <MX_USART1_UART_Init+0x4c>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <MX_USART1_UART_Init+0x4c>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ad2:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <MX_USART1_UART_Init+0x4c>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ad8:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <MX_USART1_UART_Init+0x4c>)
 8001ada:	220c      	movs	r2, #12
 8001adc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ade:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <MX_USART1_UART_Init+0x4c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <MX_USART1_UART_Init+0x4c>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001aea:	4805      	ldr	r0, [pc, #20]	; (8001b00 <MX_USART1_UART_Init+0x4c>)
 8001aec:	f004 fd8e 	bl	800660c <HAL_UART_Init>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001af6:	f000 f949 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	2000050c 	.word	0x2000050c
 8001b04:	40011000 	.word	0x40011000

08001b08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <MX_USART2_UART_Init+0x4c>)
 8001b0e:	4a12      	ldr	r2, [pc, #72]	; (8001b58 <MX_USART2_UART_Init+0x50>)
 8001b10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <MX_USART2_UART_Init+0x4c>)
 8001b14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <MX_USART2_UART_Init+0x4c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b20:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <MX_USART2_UART_Init+0x4c>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b26:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <MX_USART2_UART_Init+0x4c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b2c:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <MX_USART2_UART_Init+0x4c>)
 8001b2e:	220c      	movs	r2, #12
 8001b30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b32:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <MX_USART2_UART_Init+0x4c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <MX_USART2_UART_Init+0x4c>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b3e:	4805      	ldr	r0, [pc, #20]	; (8001b54 <MX_USART2_UART_Init+0x4c>)
 8001b40:	f004 fd64 	bl	800660c <HAL_UART_Init>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b4a:	f000 f91f 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000550 	.word	0x20000550
 8001b58:	40004400 	.word	0x40004400

08001b5c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b60:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <MX_USART3_UART_Init+0x4c>)
 8001b62:	4a12      	ldr	r2, [pc, #72]	; (8001bac <MX_USART3_UART_Init+0x50>)
 8001b64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b66:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <MX_USART3_UART_Init+0x4c>)
 8001b68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <MX_USART3_UART_Init+0x4c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <MX_USART3_UART_Init+0x4c>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <MX_USART3_UART_Init+0x4c>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b80:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <MX_USART3_UART_Init+0x4c>)
 8001b82:	220c      	movs	r2, #12
 8001b84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b86:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <MX_USART3_UART_Init+0x4c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <MX_USART3_UART_Init+0x4c>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b92:	4805      	ldr	r0, [pc, #20]	; (8001ba8 <MX_USART3_UART_Init+0x4c>)
 8001b94:	f004 fd3a 	bl	800660c <HAL_UART_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001b9e:	f000 f8f5 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000594 	.word	0x20000594
 8001bac:	40004800 	.word	0x40004800

08001bb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	607b      	str	r3, [r7, #4]
 8001bba:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <MX_DMA_Init+0x3c>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a0b      	ldr	r2, [pc, #44]	; (8001bec <MX_DMA_Init+0x3c>)
 8001bc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b09      	ldr	r3, [pc, #36]	; (8001bec <MX_DMA_Init+0x3c>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bce:	607b      	str	r3, [r7, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	202f      	movs	r0, #47	; 0x2f
 8001bd8:	f001 fa59 	bl	800308e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001bdc:	202f      	movs	r0, #47	; 0x2f
 8001bde:	f001 fa72 	bl	80030c6 <HAL_NVIC_EnableIRQ>

}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40023800 	.word	0x40023800

08001bf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08a      	sub	sp, #40	; 0x28
 8001bf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf6:	f107 0314 	add.w	r3, r7, #20
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	605a      	str	r2, [r3, #4]
 8001c00:	609a      	str	r2, [r3, #8]
 8001c02:	60da      	str	r2, [r3, #12]
 8001c04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	613b      	str	r3, [r7, #16]
 8001c0a:	4b55      	ldr	r3, [pc, #340]	; (8001d60 <MX_GPIO_Init+0x170>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	4a54      	ldr	r2, [pc, #336]	; (8001d60 <MX_GPIO_Init+0x170>)
 8001c10:	f043 0304 	orr.w	r3, r3, #4
 8001c14:	6313      	str	r3, [r2, #48]	; 0x30
 8001c16:	4b52      	ldr	r3, [pc, #328]	; (8001d60 <MX_GPIO_Init+0x170>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	f003 0304 	and.w	r3, r3, #4
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	4b4e      	ldr	r3, [pc, #312]	; (8001d60 <MX_GPIO_Init+0x170>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	4a4d      	ldr	r2, [pc, #308]	; (8001d60 <MX_GPIO_Init+0x170>)
 8001c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c30:	6313      	str	r3, [r2, #48]	; 0x30
 8001c32:	4b4b      	ldr	r3, [pc, #300]	; (8001d60 <MX_GPIO_Init+0x170>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60bb      	str	r3, [r7, #8]
 8001c42:	4b47      	ldr	r3, [pc, #284]	; (8001d60 <MX_GPIO_Init+0x170>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	4a46      	ldr	r2, [pc, #280]	; (8001d60 <MX_GPIO_Init+0x170>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4e:	4b44      	ldr	r3, [pc, #272]	; (8001d60 <MX_GPIO_Init+0x170>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	60bb      	str	r3, [r7, #8]
 8001c58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	607b      	str	r3, [r7, #4]
 8001c5e:	4b40      	ldr	r3, [pc, #256]	; (8001d60 <MX_GPIO_Init+0x170>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	4a3f      	ldr	r2, [pc, #252]	; (8001d60 <MX_GPIO_Init+0x170>)
 8001c64:	f043 0302 	orr.w	r3, r3, #2
 8001c68:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6a:	4b3d      	ldr	r3, [pc, #244]	; (8001d60 <MX_GPIO_Init+0x170>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	607b      	str	r3, [r7, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	603b      	str	r3, [r7, #0]
 8001c7a:	4b39      	ldr	r3, [pc, #228]	; (8001d60 <MX_GPIO_Init+0x170>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	4a38      	ldr	r2, [pc, #224]	; (8001d60 <MX_GPIO_Init+0x170>)
 8001c80:	f043 0308 	orr.w	r3, r3, #8
 8001c84:	6313      	str	r3, [r2, #48]	; 0x30
 8001c86:	4b36      	ldr	r3, [pc, #216]	; (8001d60 <MX_GPIO_Init+0x170>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	603b      	str	r3, [r7, #0]
 8001c90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEL_GPIO4_GPIO_Port, TEL_GPIO4_Pin, GPIO_PIN_RESET);
 8001c92:	2200      	movs	r2, #0
 8001c94:	2102      	movs	r1, #2
 8001c96:	4833      	ldr	r0, [pc, #204]	; (8001d64 <MX_GPIO_Init+0x174>)
 8001c98:	f001 ffd4 	bl	8003c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TEL_GPIO7_Pin|On_Board_LED_Pin, GPIO_PIN_RESET);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	2122      	movs	r1, #34	; 0x22
 8001ca0:	4831      	ldr	r0, [pc, #196]	; (8001d68 <MX_GPIO_Init+0x178>)
 8001ca2:	f001 ffcf 	bl	8003c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f24e 0142 	movw	r1, #57410	; 0xe042
 8001cac:	482f      	ldr	r0, [pc, #188]	; (8001d6c <MX_GPIO_Init+0x17c>)
 8001cae:	f001 ffc9 	bl	8003c44 <HAL_GPIO_WritePin>
                          |Motor_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001cb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cb8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001cc2:	f107 0314 	add.w	r3, r7, #20
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4826      	ldr	r0, [pc, #152]	; (8001d64 <MX_GPIO_Init+0x174>)
 8001cca:	f001 fe27 	bl	800391c <HAL_GPIO_Init>

  /*Configure GPIO pin : TEL_GPIO4_Pin */
  GPIO_InitStruct.Pin = TEL_GPIO4_Pin;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEL_GPIO4_GPIO_Port, &GPIO_InitStruct);
 8001cde:	f107 0314 	add.w	r3, r7, #20
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	481f      	ldr	r0, [pc, #124]	; (8001d64 <MX_GPIO_Init+0x174>)
 8001ce6:	f001 fe19 	bl	800391c <HAL_GPIO_Init>

  /*Configure GPIO pins : TEL_GPIO7_Pin On_Board_LED_Pin */
  GPIO_InitStruct.Pin = TEL_GPIO7_Pin|On_Board_LED_Pin;
 8001cea:	2322      	movs	r3, #34	; 0x22
 8001cec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfa:	f107 0314 	add.w	r3, r7, #20
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4819      	ldr	r0, [pc, #100]	; (8001d68 <MX_GPIO_Init+0x178>)
 8001d02:	f001 fe0b 	bl	800391c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED1_Pin LED2_Pin LED3_Pin
                           Motor_EN_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8001d06:	f24e 0342 	movw	r3, #57410	; 0xe042
 8001d0a:	617b      	str	r3, [r7, #20]
                          |Motor_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d14:	2300      	movs	r3, #0
 8001d16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d18:	f107 0314 	add.w	r3, r7, #20
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4813      	ldr	r0, [pc, #76]	; (8001d6c <MX_GPIO_Init+0x17c>)
 8001d20:	f001 fdfc 	bl	800391c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_Pin B1B4_Pin B2_Pin Motor_Feedback_Pin */
  GPIO_InitStruct.Pin = SW2_Pin|B1B4_Pin|B2_Pin|Motor_Feedback_Pin;
 8001d24:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8001d28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d32:	f107 0314 	add.w	r3, r7, #20
 8001d36:	4619      	mov	r1, r3
 8001d38:	480c      	ldr	r0, [pc, #48]	; (8001d6c <MX_GPIO_Init+0x17c>)
 8001d3a:	f001 fdef 	bl	800391c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8001d3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	4619      	mov	r1, r3
 8001d52:	4805      	ldr	r0, [pc, #20]	; (8001d68 <MX_GPIO_Init+0x178>)
 8001d54:	f001 fde2 	bl	800391c <HAL_GPIO_Init>

}
 8001d58:	bf00      	nop
 8001d5a:	3728      	adds	r7, #40	; 0x28
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40020800 	.word	0x40020800
 8001d68:	40020000 	.word	0x40020000
 8001d6c:	40020400 	.word	0x40020400

08001d70 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
	Uart_Receive_From_PC_ISR(&huart1);
 8001d78:	4803      	ldr	r0, [pc, #12]	; (8001d88 <HAL_UART_RxCpltCallback+0x18>)
 8001d7a:	f7ff f929 	bl	8000fd0 <Uart_Receive_From_PC_ISR>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	2000050c 	.word	0x2000050c

08001d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d90:	b672      	cpsid	i
}
 8001d92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d94:	e7fe      	b.n	8001d94 <Error_Handler+0x8>
	...

08001d98 <Remote_Control_Init>:
#include <math.h>

uint32_t tEdge[3];

void Remote_Control_Init(TIM_HandleTypeDef *htim, uint32_t channel)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
	tEdge[0] = 0;
 8001da2:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <Remote_Control_Init+0x30>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
	tEdge[1] = 0;
 8001da8:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <Remote_Control_Init+0x30>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	605a      	str	r2, [r3, #4]
	tEdge[2] = 0;
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <Remote_Control_Init+0x30>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	609a      	str	r2, [r3, #8]
	HAL_TIM_IC_Start_DMA(htim, channel, tEdge, 3);
 8001db4:	2303      	movs	r3, #3
 8001db6:	4a04      	ldr	r2, [pc, #16]	; (8001dc8 <Remote_Control_Init+0x30>)
 8001db8:	6839      	ldr	r1, [r7, #0]
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f002 ffd8 	bl	8004d70 <HAL_TIM_IC_Start_DMA>
}
 8001dc0:	bf00      	nop
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	200005dc 	.word	0x200005dc

08001dcc <Remote_Control_Task>:
void Remote_Control_Task(TIM_HandleTypeDef *htim, uint32_t channel,UART_HandleTypeDef *huart, uint32_t tick, uint32_t period)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
 8001dd8:	603b      	str	r3, [r7, #0]
	static int32_t dt1=85;
	static int32_t dt2=85;
	static uint32_t tLow=85;
	static uint32_t remote_control_tick=0;

	if(remote_control_tick>tick) return;
 8001dda:	4b53      	ldr	r3, [pc, #332]	; (8001f28 <Remote_Control_Task+0x15c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	f0c0 809d 	bcc.w	8001f20 <Remote_Control_Task+0x154>
	remote_control_tick = tick + period;
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	4413      	add	r3, r2
 8001dec:	4a4e      	ldr	r2, [pc, #312]	; (8001f28 <Remote_Control_Task+0x15c>)
 8001dee:	6013      	str	r3, [r2, #0]

	//a három időkülönbésgből egy a T_s, egy a D*T_s és egy az (1-D)*T_s, de nem tudjuk melyik melyik a cirkuláris buffer miatt
	HAL_NVIC_DisableIRQ(TIM4_IRQn);  //atomivá tesszük ezt a két műveletet
 8001df0:	201e      	movs	r0, #30
 8001df2:	f001 f976 	bl	80030e2 <HAL_NVIC_DisableIRQ>
	dt0=abs(tEdge[1]-tEdge[0]);
 8001df6:	4b4d      	ldr	r3, [pc, #308]	; (8001f2c <Remote_Control_Task+0x160>)
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	4b4c      	ldr	r3, [pc, #304]	; (8001f2c <Remote_Control_Task+0x160>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	bfb8      	it	lt
 8001e04:	425b      	neglt	r3, r3
 8001e06:	4a4a      	ldr	r2, [pc, #296]	; (8001f30 <Remote_Control_Task+0x164>)
 8001e08:	6013      	str	r3, [r2, #0]
	dt1=abs(tEdge[2]-tEdge[1]);
 8001e0a:	4b48      	ldr	r3, [pc, #288]	; (8001f2c <Remote_Control_Task+0x160>)
 8001e0c:	689a      	ldr	r2, [r3, #8]
 8001e0e:	4b47      	ldr	r3, [pc, #284]	; (8001f2c <Remote_Control_Task+0x160>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	bfb8      	it	lt
 8001e18:	425b      	neglt	r3, r3
 8001e1a:	4a46      	ldr	r2, [pc, #280]	; (8001f34 <Remote_Control_Task+0x168>)
 8001e1c:	6013      	str	r3, [r2, #0]
	dt2=abs(tEdge[0]-tEdge[2]);
 8001e1e:	4b43      	ldr	r3, [pc, #268]	; (8001f2c <Remote_Control_Task+0x160>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	4b42      	ldr	r3, [pc, #264]	; (8001f2c <Remote_Control_Task+0x160>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	bfb8      	it	lt
 8001e2c:	425b      	neglt	r3, r3
 8001e2e:	4a42      	ldr	r2, [pc, #264]	; (8001f38 <Remote_Control_Task+0x16c>)
 8001e30:	6013      	str	r3, [r2, #0]
	HAL_NVIC_EnableIRQ(TIM4_IRQn);   // mostmár fogadhatjuk az új pwm periodusokat
 8001e32:	201e      	movs	r0, #30
 8001e34:	f001 f947 	bl	80030c6 <HAL_NVIC_EnableIRQ>

	//lehet hogy a kövi fűrészjelen vagyunk, ezt ki kell kompenzálni
	if(dt0>5000)dt0=0xffff-dt0;
 8001e38:	4b3d      	ldr	r3, [pc, #244]	; (8001f30 <Remote_Control_Task+0x164>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e40:	4293      	cmp	r3, r2
 8001e42:	dd06      	ble.n	8001e52 <Remote_Control_Task+0x86>
 8001e44:	4b3a      	ldr	r3, [pc, #232]	; (8001f30 <Remote_Control_Task+0x164>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001e4c:	33ff      	adds	r3, #255	; 0xff
 8001e4e:	4a38      	ldr	r2, [pc, #224]	; (8001f30 <Remote_Control_Task+0x164>)
 8001e50:	6013      	str	r3, [r2, #0]
	if(dt1>5000)dt1=0xffff-dt1;
 8001e52:	4b38      	ldr	r3, [pc, #224]	; (8001f34 <Remote_Control_Task+0x168>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	dd06      	ble.n	8001e6c <Remote_Control_Task+0xa0>
 8001e5e:	4b35      	ldr	r3, [pc, #212]	; (8001f34 <Remote_Control_Task+0x168>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001e66:	33ff      	adds	r3, #255	; 0xff
 8001e68:	4a32      	ldr	r2, [pc, #200]	; (8001f34 <Remote_Control_Task+0x168>)
 8001e6a:	6013      	str	r3, [r2, #0]
	if(dt2>5000)dt2=0xffff-dt2;
 8001e6c:	4b32      	ldr	r3, [pc, #200]	; (8001f38 <Remote_Control_Task+0x16c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e74:	4293      	cmp	r3, r2
 8001e76:	dd06      	ble.n	8001e86 <Remote_Control_Task+0xba>
 8001e78:	4b2f      	ldr	r3, [pc, #188]	; (8001f38 <Remote_Control_Task+0x16c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001e80:	33ff      	adds	r3, #255	; 0xff
 8001e82:	4a2d      	ldr	r2, [pc, #180]	; (8001f38 <Remote_Control_Task+0x16c>)
 8001e84:	6013      	str	r3, [r2, #0]

	//mostmár tényleges időkülönbségeink vannak
	//a három különbéség közül a legkisebb kell nekünk ->
	if(dt0<dt1 && dt0<dt2) //a 4 különbésg közül a legkisebb adja a magasan töltött időt
 8001e86:	4b2a      	ldr	r3, [pc, #168]	; (8001f30 <Remote_Control_Task+0x164>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	4b2a      	ldr	r3, [pc, #168]	; (8001f34 <Remote_Control_Task+0x168>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	da0b      	bge.n	8001eaa <Remote_Control_Task+0xde>
 8001e92:	4b27      	ldr	r3, [pc, #156]	; (8001f30 <Remote_Control_Task+0x164>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	4b28      	ldr	r3, [pc, #160]	; (8001f38 <Remote_Control_Task+0x16c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	da05      	bge.n	8001eaa <Remote_Control_Task+0xde>
	{
		tLow=dt0;
 8001e9e:	4b24      	ldr	r3, [pc, #144]	; (8001f30 <Remote_Control_Task+0x164>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	4b25      	ldr	r3, [pc, #148]	; (8001f3c <Remote_Control_Task+0x170>)
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	e016      	b.n	8001ed8 <Remote_Control_Task+0x10c>
	}
	else if(dt1<dt0 && dt1<dt2)
 8001eaa:	4b22      	ldr	r3, [pc, #136]	; (8001f34 <Remote_Control_Task+0x168>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <Remote_Control_Task+0x164>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	da0b      	bge.n	8001ece <Remote_Control_Task+0x102>
 8001eb6:	4b1f      	ldr	r3, [pc, #124]	; (8001f34 <Remote_Control_Task+0x168>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	4b1f      	ldr	r3, [pc, #124]	; (8001f38 <Remote_Control_Task+0x16c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	da05      	bge.n	8001ece <Remote_Control_Task+0x102>
	{
		tLow=dt1;
 8001ec2:	4b1c      	ldr	r3, [pc, #112]	; (8001f34 <Remote_Control_Task+0x168>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	4b1c      	ldr	r3, [pc, #112]	; (8001f3c <Remote_Control_Task+0x170>)
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	e004      	b.n	8001ed8 <Remote_Control_Task+0x10c>
	}
	else
	{
		tLow=dt2;
 8001ece:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <Remote_Control_Task+0x16c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	4b19      	ldr	r3, [pc, #100]	; (8001f3c <Remote_Control_Task+0x170>)
 8001ed6:	601a      	str	r2, [r3, #0]
	}
/*
	sprintf(string,"%d\n\n\r",tLow);
	HAL_UART_Transmit(huart, string, strlen(string), 100);
*/
	if(tLow>70 && tLow<100)
 8001ed8:	4b18      	ldr	r3, [pc, #96]	; (8001f3c <Remote_Control_Task+0x170>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b46      	cmp	r3, #70	; 0x46
 8001ede:	d90d      	bls.n	8001efc <Remote_Control_Task+0x130>
 8001ee0:	4b16      	ldr	r3, [pc, #88]	; (8001f3c <Remote_Control_Task+0x170>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b63      	cmp	r3, #99	; 0x63
 8001ee6:	d809      	bhi.n	8001efc <Remote_Control_Task+0x130>
	{
		LED_R(1); //ha nincs meghuzva a ravasz tLow kb 87, ha meg van huzva kb 55, ha előre van nyomva kb 118
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001eee:	4814      	ldr	r0, [pc, #80]	; (8001f40 <Remote_Control_Task+0x174>)
 8001ef0:	f001 fea8 	bl	8003c44 <HAL_GPIO_WritePin>
		motorEnRemote=0;//állítsuk le a motort ha meghuzzuk a ravaszt
 8001ef4:	4b13      	ldr	r3, [pc, #76]	; (8001f44 <Remote_Control_Task+0x178>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	701a      	strb	r2, [r3, #0]
 8001efa:	e012      	b.n	8001f22 <Remote_Control_Task+0x156>
	}
	else
	{
		LED_R(0);
 8001efc:	2201      	movs	r2, #1
 8001efe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f02:	480f      	ldr	r0, [pc, #60]	; (8001f40 <Remote_Control_Task+0x174>)
 8001f04:	f001 fe9e 	bl	8003c44 <HAL_GPIO_WritePin>
		if(tLow <= 70) motorEnRemote=1;
 8001f08:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <Remote_Control_Task+0x170>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2b46      	cmp	r3, #70	; 0x46
 8001f0e:	d803      	bhi.n	8001f18 <Remote_Control_Task+0x14c>
 8001f10:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <Remote_Control_Task+0x178>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	701a      	strb	r2, [r3, #0]
 8001f16:	e004      	b.n	8001f22 <Remote_Control_Task+0x156>
		else motorEnRemote=2;
 8001f18:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <Remote_Control_Task+0x178>)
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	701a      	strb	r2, [r3, #0]
 8001f1e:	e000      	b.n	8001f22 <Remote_Control_Task+0x156>
	if(remote_control_tick>tick) return;
 8001f20:	bf00      	nop

	}
}
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	200005e8 	.word	0x200005e8
 8001f2c:	200005dc 	.word	0x200005dc
 8001f30:	20000008 	.word	0x20000008
 8001f34:	2000000c 	.word	0x2000000c
 8001f38:	20000010 	.word	0x20000010
 8001f3c:	20000014 	.word	0x20000014
 8001f40:	40020400 	.word	0x40020400
 8001f44:	200005d8 	.word	0x200005d8

08001f48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	607b      	str	r3, [r7, #4]
 8001f52:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <HAL_MspInit+0x4c>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f56:	4a0f      	ldr	r2, [pc, #60]	; (8001f94 <HAL_MspInit+0x4c>)
 8001f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f5e:	4b0d      	ldr	r3, [pc, #52]	; (8001f94 <HAL_MspInit+0x4c>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f66:	607b      	str	r3, [r7, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	603b      	str	r3, [r7, #0]
 8001f6e:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <HAL_MspInit+0x4c>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	4a08      	ldr	r2, [pc, #32]	; (8001f94 <HAL_MspInit+0x4c>)
 8001f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f78:	6413      	str	r3, [r2, #64]	; 0x40
 8001f7a:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_MspInit+0x4c>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f82:	603b      	str	r3, [r7, #0]
 8001f84:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f86:	2007      	movs	r0, #7
 8001f88:	f001 f876 	bl	8003078 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f8c:	bf00      	nop
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40023800 	.word	0x40023800

08001f98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08c      	sub	sp, #48	; 0x30
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa0:	f107 031c 	add.w	r3, r7, #28
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
 8001fae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a2e      	ldr	r2, [pc, #184]	; (8002070 <HAL_ADC_MspInit+0xd8>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d128      	bne.n	800200c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61bb      	str	r3, [r7, #24]
 8001fbe:	4b2d      	ldr	r3, [pc, #180]	; (8002074 <HAL_ADC_MspInit+0xdc>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc2:	4a2c      	ldr	r2, [pc, #176]	; (8002074 <HAL_ADC_MspInit+0xdc>)
 8001fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fca:	4b2a      	ldr	r3, [pc, #168]	; (8002074 <HAL_ADC_MspInit+0xdc>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd2:	61bb      	str	r3, [r7, #24]
 8001fd4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]
 8001fda:	4b26      	ldr	r3, [pc, #152]	; (8002074 <HAL_ADC_MspInit+0xdc>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	4a25      	ldr	r2, [pc, #148]	; (8002074 <HAL_ADC_MspInit+0xdc>)
 8001fe0:	f043 0302 	orr.w	r3, r3, #2
 8001fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe6:	4b23      	ldr	r3, [pc, #140]	; (8002074 <HAL_ADC_MspInit+0xdc>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = Bat_Meas_Pin;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Bat_Meas_GPIO_Port, &GPIO_InitStruct);
 8001ffe:	f107 031c 	add.w	r3, r7, #28
 8002002:	4619      	mov	r1, r3
 8002004:	481c      	ldr	r0, [pc, #112]	; (8002078 <HAL_ADC_MspInit+0xe0>)
 8002006:	f001 fc89 	bl	800391c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800200a:	e02c      	b.n	8002066 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a1a      	ldr	r2, [pc, #104]	; (800207c <HAL_ADC_MspInit+0xe4>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d127      	bne.n	8002066 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	4b16      	ldr	r3, [pc, #88]	; (8002074 <HAL_ADC_MspInit+0xdc>)
 800201c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201e:	4a15      	ldr	r2, [pc, #84]	; (8002074 <HAL_ADC_MspInit+0xdc>)
 8002020:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002024:	6453      	str	r3, [r2, #68]	; 0x44
 8002026:	4b13      	ldr	r3, [pc, #76]	; (8002074 <HAL_ADC_MspInit+0xdc>)
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800202e:	613b      	str	r3, [r7, #16]
 8002030:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <HAL_ADC_MspInit+0xdc>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	4a0e      	ldr	r2, [pc, #56]	; (8002074 <HAL_ADC_MspInit+0xdc>)
 800203c:	f043 0304 	orr.w	r3, r3, #4
 8002040:	6313      	str	r3, [r2, #48]	; 0x30
 8002042:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <HAL_ADC_MspInit+0xdc>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	f003 0304 	and.w	r3, r3, #4
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor_Bat_Pin;
 800204e:	2308      	movs	r3, #8
 8002050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002052:	2303      	movs	r3, #3
 8002054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Motor_Bat_GPIO_Port, &GPIO_InitStruct);
 800205a:	f107 031c 	add.w	r3, r7, #28
 800205e:	4619      	mov	r1, r3
 8002060:	4807      	ldr	r0, [pc, #28]	; (8002080 <HAL_ADC_MspInit+0xe8>)
 8002062:	f001 fc5b 	bl	800391c <HAL_GPIO_Init>
}
 8002066:	bf00      	nop
 8002068:	3730      	adds	r7, #48	; 0x30
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40012000 	.word	0x40012000
 8002074:	40023800 	.word	0x40023800
 8002078:	40020400 	.word	0x40020400
 800207c:	40012100 	.word	0x40012100
 8002080:	40020800 	.word	0x40020800

08002084 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a0b      	ldr	r2, [pc, #44]	; (80020c0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d10d      	bne.n	80020b2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <HAL_TIM_PWM_MspInit+0x40>)
 800209c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209e:	4a09      	ldr	r2, [pc, #36]	; (80020c4 <HAL_TIM_PWM_MspInit+0x40>)
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	6453      	str	r3, [r2, #68]	; 0x44
 80020a6:	4b07      	ldr	r3, [pc, #28]	; (80020c4 <HAL_TIM_PWM_MspInit+0x40>)
 80020a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80020b2:	bf00      	nop
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	40010000 	.word	0x40010000
 80020c4:	40023800 	.word	0x40023800

080020c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b08c      	sub	sp, #48	; 0x30
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d0:	f107 031c 	add.w	r3, r7, #28
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020e8:	d116      	bne.n	8002118 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	61bb      	str	r3, [r7, #24]
 80020ee:	4b52      	ldr	r3, [pc, #328]	; (8002238 <HAL_TIM_Base_MspInit+0x170>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	4a51      	ldr	r2, [pc, #324]	; (8002238 <HAL_TIM_Base_MspInit+0x170>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	6413      	str	r3, [r2, #64]	; 0x40
 80020fa:	4b4f      	ldr	r3, [pc, #316]	; (8002238 <HAL_TIM_Base_MspInit+0x170>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	61bb      	str	r3, [r7, #24]
 8002104:	69bb      	ldr	r3, [r7, #24]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002106:	2200      	movs	r2, #0
 8002108:	2100      	movs	r1, #0
 800210a:	201c      	movs	r0, #28
 800210c:	f000 ffbf 	bl	800308e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002110:	201c      	movs	r0, #28
 8002112:	f000 ffd8 	bl	80030c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002116:	e08b      	b.n	8002230 <HAL_TIM_Base_MspInit+0x168>
  else if(htim_base->Instance==TIM3)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a47      	ldr	r2, [pc, #284]	; (800223c <HAL_TIM_Base_MspInit+0x174>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d10e      	bne.n	8002140 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	4b44      	ldr	r3, [pc, #272]	; (8002238 <HAL_TIM_Base_MspInit+0x170>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	4a43      	ldr	r2, [pc, #268]	; (8002238 <HAL_TIM_Base_MspInit+0x170>)
 800212c:	f043 0302 	orr.w	r3, r3, #2
 8002130:	6413      	str	r3, [r2, #64]	; 0x40
 8002132:	4b41      	ldr	r3, [pc, #260]	; (8002238 <HAL_TIM_Base_MspInit+0x170>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	617b      	str	r3, [r7, #20]
 800213c:	697b      	ldr	r3, [r7, #20]
}
 800213e:	e077      	b.n	8002230 <HAL_TIM_Base_MspInit+0x168>
  else if(htim_base->Instance==TIM4)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a3e      	ldr	r2, [pc, #248]	; (8002240 <HAL_TIM_Base_MspInit+0x178>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d15f      	bne.n	800220a <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	4b3a      	ldr	r3, [pc, #232]	; (8002238 <HAL_TIM_Base_MspInit+0x170>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	4a39      	ldr	r2, [pc, #228]	; (8002238 <HAL_TIM_Base_MspInit+0x170>)
 8002154:	f043 0304 	orr.w	r3, r3, #4
 8002158:	6413      	str	r3, [r2, #64]	; 0x40
 800215a:	4b37      	ldr	r3, [pc, #220]	; (8002238 <HAL_TIM_Base_MspInit+0x170>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	613b      	str	r3, [r7, #16]
 8002164:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	4b33      	ldr	r3, [pc, #204]	; (8002238 <HAL_TIM_Base_MspInit+0x170>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	4a32      	ldr	r2, [pc, #200]	; (8002238 <HAL_TIM_Base_MspInit+0x170>)
 8002170:	f043 0302 	orr.w	r3, r3, #2
 8002174:	6313      	str	r3, [r2, #48]	; 0x30
 8002176:	4b30      	ldr	r3, [pc, #192]	; (8002238 <HAL_TIM_Base_MspInit+0x170>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RC_PWM1_Pin|GPIO_PIN_9;
 8002182:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002188:	2302      	movs	r3, #2
 800218a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002190:	2300      	movs	r3, #0
 8002192:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002194:	2302      	movs	r3, #2
 8002196:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002198:	f107 031c 	add.w	r3, r7, #28
 800219c:	4619      	mov	r1, r3
 800219e:	4829      	ldr	r0, [pc, #164]	; (8002244 <HAL_TIM_Base_MspInit+0x17c>)
 80021a0:	f001 fbbc 	bl	800391c <HAL_GPIO_Init>
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 80021a4:	4b28      	ldr	r3, [pc, #160]	; (8002248 <HAL_TIM_Base_MspInit+0x180>)
 80021a6:	4a29      	ldr	r2, [pc, #164]	; (800224c <HAL_TIM_Base_MspInit+0x184>)
 80021a8:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 80021aa:	4b27      	ldr	r3, [pc, #156]	; (8002248 <HAL_TIM_Base_MspInit+0x180>)
 80021ac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80021b0:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021b2:	4b25      	ldr	r3, [pc, #148]	; (8002248 <HAL_TIM_Base_MspInit+0x180>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80021b8:	4b23      	ldr	r3, [pc, #140]	; (8002248 <HAL_TIM_Base_MspInit+0x180>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80021be:	4b22      	ldr	r3, [pc, #136]	; (8002248 <HAL_TIM_Base_MspInit+0x180>)
 80021c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021c4:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80021c6:	4b20      	ldr	r3, [pc, #128]	; (8002248 <HAL_TIM_Base_MspInit+0x180>)
 80021c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021cc:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80021ce:	4b1e      	ldr	r3, [pc, #120]	; (8002248 <HAL_TIM_Base_MspInit+0x180>)
 80021d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021d4:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_CIRCULAR;
 80021d6:	4b1c      	ldr	r3, [pc, #112]	; (8002248 <HAL_TIM_Base_MspInit+0x180>)
 80021d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021dc:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_MEDIUM;
 80021de:	4b1a      	ldr	r3, [pc, #104]	; (8002248 <HAL_TIM_Base_MspInit+0x180>)
 80021e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80021e4:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021e6:	4b18      	ldr	r3, [pc, #96]	; (8002248 <HAL_TIM_Base_MspInit+0x180>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 80021ec:	4816      	ldr	r0, [pc, #88]	; (8002248 <HAL_TIM_Base_MspInit+0x180>)
 80021ee:	f000 ff93 	bl	8003118 <HAL_DMA_Init>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <HAL_TIM_Base_MspInit+0x134>
      Error_Handler();
 80021f8:	f7ff fdc8 	bl	8001d8c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a12      	ldr	r2, [pc, #72]	; (8002248 <HAL_TIM_Base_MspInit+0x180>)
 8002200:	62da      	str	r2, [r3, #44]	; 0x2c
 8002202:	4a11      	ldr	r2, [pc, #68]	; (8002248 <HAL_TIM_Base_MspInit+0x180>)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002208:	e012      	b.n	8002230 <HAL_TIM_Base_MspInit+0x168>
  else if(htim_base->Instance==TIM5)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a10      	ldr	r2, [pc, #64]	; (8002250 <HAL_TIM_Base_MspInit+0x188>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d10d      	bne.n	8002230 <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002214:	2300      	movs	r3, #0
 8002216:	60bb      	str	r3, [r7, #8]
 8002218:	4b07      	ldr	r3, [pc, #28]	; (8002238 <HAL_TIM_Base_MspInit+0x170>)
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	4a06      	ldr	r2, [pc, #24]	; (8002238 <HAL_TIM_Base_MspInit+0x170>)
 800221e:	f043 0308 	orr.w	r3, r3, #8
 8002222:	6413      	str	r3, [r2, #64]	; 0x40
 8002224:	4b04      	ldr	r3, [pc, #16]	; (8002238 <HAL_TIM_Base_MspInit+0x170>)
 8002226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002228:	f003 0308 	and.w	r3, r3, #8
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	68bb      	ldr	r3, [r7, #8]
}
 8002230:	bf00      	nop
 8002232:	3730      	adds	r7, #48	; 0x30
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40023800 	.word	0x40023800
 800223c:	40000400 	.word	0x40000400
 8002240:	40000800 	.word	0x40000800
 8002244:	40020400 	.word	0x40020400
 8002248:	20000468 	.word	0x20000468
 800224c:	400260b8 	.word	0x400260b8
 8002250:	40000c00 	.word	0x40000c00

08002254 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08a      	sub	sp, #40	; 0x28
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800225c:	f107 0314 	add.w	r3, r7, #20
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	60da      	str	r2, [r3, #12]
 800226a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a19      	ldr	r2, [pc, #100]	; (80022d8 <HAL_TIM_Encoder_MspInit+0x84>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d12b      	bne.n	80022ce <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	613b      	str	r3, [r7, #16]
 800227a:	4b18      	ldr	r3, [pc, #96]	; (80022dc <HAL_TIM_Encoder_MspInit+0x88>)
 800227c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227e:	4a17      	ldr	r2, [pc, #92]	; (80022dc <HAL_TIM_Encoder_MspInit+0x88>)
 8002280:	f043 0302 	orr.w	r3, r3, #2
 8002284:	6453      	str	r3, [r2, #68]	; 0x44
 8002286:	4b15      	ldr	r3, [pc, #84]	; (80022dc <HAL_TIM_Encoder_MspInit+0x88>)
 8002288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	613b      	str	r3, [r7, #16]
 8002290:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	4b11      	ldr	r3, [pc, #68]	; (80022dc <HAL_TIM_Encoder_MspInit+0x88>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	4a10      	ldr	r2, [pc, #64]	; (80022dc <HAL_TIM_Encoder_MspInit+0x88>)
 800229c:	f043 0304 	orr.w	r3, r3, #4
 80022a0:	6313      	str	r3, [r2, #48]	; 0x30
 80022a2:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <HAL_TIM_Encoder_MspInit+0x88>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	f003 0304 	and.w	r3, r3, #4
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022ae:	23c0      	movs	r3, #192	; 0xc0
 80022b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b2:	2302      	movs	r3, #2
 80022b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ba:	2300      	movs	r3, #0
 80022bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80022be:	2303      	movs	r3, #3
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022c2:	f107 0314 	add.w	r3, r7, #20
 80022c6:	4619      	mov	r1, r3
 80022c8:	4805      	ldr	r0, [pc, #20]	; (80022e0 <HAL_TIM_Encoder_MspInit+0x8c>)
 80022ca:	f001 fb27 	bl	800391c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80022ce:	bf00      	nop
 80022d0:	3728      	adds	r7, #40	; 0x28
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40010400 	.word	0x40010400
 80022dc:	40023800 	.word	0x40023800
 80022e0:	40020800 	.word	0x40020800

080022e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b08a      	sub	sp, #40	; 0x28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ec:	f107 0314 	add.w	r3, r7, #20
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	605a      	str	r2, [r3, #4]
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	60da      	str	r2, [r3, #12]
 80022fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a37      	ldr	r2, [pc, #220]	; (80023e0 <HAL_TIM_MspPostInit+0xfc>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d11f      	bne.n	8002346 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	613b      	str	r3, [r7, #16]
 800230a:	4b36      	ldr	r3, [pc, #216]	; (80023e4 <HAL_TIM_MspPostInit+0x100>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	4a35      	ldr	r2, [pc, #212]	; (80023e4 <HAL_TIM_MspPostInit+0x100>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	6313      	str	r3, [r2, #48]	; 0x30
 8002316:	4b33      	ldr	r3, [pc, #204]	; (80023e4 <HAL_TIM_MspPostInit+0x100>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	613b      	str	r3, [r7, #16]
 8002320:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Servo2_PWM_Pin;
 8002322:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002328:	2302      	movs	r3, #2
 800232a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232c:	2300      	movs	r3, #0
 800232e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002330:	2300      	movs	r3, #0
 8002332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002334:	2301      	movs	r3, #1
 8002336:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Servo2_PWM_GPIO_Port, &GPIO_InitStruct);
 8002338:	f107 0314 	add.w	r3, r7, #20
 800233c:	4619      	mov	r1, r3
 800233e:	482a      	ldr	r0, [pc, #168]	; (80023e8 <HAL_TIM_MspPostInit+0x104>)
 8002340:	f001 faec 	bl	800391c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002344:	e047      	b.n	80023d6 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800234e:	d11f      	bne.n	8002390 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002350:	2300      	movs	r3, #0
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	4b23      	ldr	r3, [pc, #140]	; (80023e4 <HAL_TIM_MspPostInit+0x100>)
 8002356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002358:	4a22      	ldr	r2, [pc, #136]	; (80023e4 <HAL_TIM_MspPostInit+0x100>)
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	6313      	str	r3, [r2, #48]	; 0x30
 8002360:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <HAL_TIM_MspPostInit+0x100>)
 8002362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo1_PWM_Pin;
 800236c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002372:	2302      	movs	r3, #2
 8002374:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002376:	2300      	movs	r3, #0
 8002378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237a:	2300      	movs	r3, #0
 800237c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800237e:	2301      	movs	r3, #1
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Servo1_PWM_GPIO_Port, &GPIO_InitStruct);
 8002382:	f107 0314 	add.w	r3, r7, #20
 8002386:	4619      	mov	r1, r3
 8002388:	4817      	ldr	r0, [pc, #92]	; (80023e8 <HAL_TIM_MspPostInit+0x104>)
 800238a:	f001 fac7 	bl	800391c <HAL_GPIO_Init>
}
 800238e:	e022      	b.n	80023d6 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a15      	ldr	r2, [pc, #84]	; (80023ec <HAL_TIM_MspPostInit+0x108>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d11d      	bne.n	80023d6 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <HAL_TIM_MspPostInit+0x100>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	4a10      	ldr	r2, [pc, #64]	; (80023e4 <HAL_TIM_MspPostInit+0x100>)
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	6313      	str	r3, [r2, #48]	; 0x30
 80023aa:	4b0e      	ldr	r3, [pc, #56]	; (80023e4 <HAL_TIM_MspPostInit+0x100>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	60bb      	str	r3, [r7, #8]
 80023b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MotorPWM1_Pin|MotorPWM2_Pin;
 80023b6:	23c0      	movs	r3, #192	; 0xc0
 80023b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ba:	2302      	movs	r3, #2
 80023bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023be:	2300      	movs	r3, #0
 80023c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c2:	2300      	movs	r3, #0
 80023c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023c6:	2302      	movs	r3, #2
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ca:	f107 0314 	add.w	r3, r7, #20
 80023ce:	4619      	mov	r1, r3
 80023d0:	4805      	ldr	r0, [pc, #20]	; (80023e8 <HAL_TIM_MspPostInit+0x104>)
 80023d2:	f001 faa3 	bl	800391c <HAL_GPIO_Init>
}
 80023d6:	bf00      	nop
 80023d8:	3728      	adds	r7, #40	; 0x28
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40010000 	.word	0x40010000
 80023e4:	40023800 	.word	0x40023800
 80023e8:	40020000 	.word	0x40020000
 80023ec:	40000400 	.word	0x40000400

080023f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b090      	sub	sp, #64	; 0x40
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	60da      	str	r2, [r3, #12]
 8002406:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a7c      	ldr	r2, [pc, #496]	; (8002600 <HAL_UART_MspInit+0x210>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d14b      	bne.n	80024aa <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	62bb      	str	r3, [r7, #40]	; 0x28
 8002416:	4b7b      	ldr	r3, [pc, #492]	; (8002604 <HAL_UART_MspInit+0x214>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	4a7a      	ldr	r2, [pc, #488]	; (8002604 <HAL_UART_MspInit+0x214>)
 800241c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002420:	6413      	str	r3, [r2, #64]	; 0x40
 8002422:	4b78      	ldr	r3, [pc, #480]	; (8002604 <HAL_UART_MspInit+0x214>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800242a:	62bb      	str	r3, [r7, #40]	; 0x28
 800242c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	627b      	str	r3, [r7, #36]	; 0x24
 8002432:	4b74      	ldr	r3, [pc, #464]	; (8002604 <HAL_UART_MspInit+0x214>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	4a73      	ldr	r2, [pc, #460]	; (8002604 <HAL_UART_MspInit+0x214>)
 8002438:	f043 0304 	orr.w	r3, r3, #4
 800243c:	6313      	str	r3, [r2, #48]	; 0x30
 800243e:	4b71      	ldr	r3, [pc, #452]	; (8002604 <HAL_UART_MspInit+0x214>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	f003 0304 	and.w	r3, r3, #4
 8002446:	627b      	str	r3, [r7, #36]	; 0x24
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	623b      	str	r3, [r7, #32]
 800244e:	4b6d      	ldr	r3, [pc, #436]	; (8002604 <HAL_UART_MspInit+0x214>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	4a6c      	ldr	r2, [pc, #432]	; (8002604 <HAL_UART_MspInit+0x214>)
 8002454:	f043 0308 	orr.w	r3, r3, #8
 8002458:	6313      	str	r3, [r2, #48]	; 0x30
 800245a:	4b6a      	ldr	r3, [pc, #424]	; (8002604 <HAL_UART_MspInit+0x214>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	623b      	str	r3, [r7, #32]
 8002464:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = NUCLEO_TX_Pin;
 8002466:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800246a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246c:	2302      	movs	r3, #2
 800246e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002470:	2300      	movs	r3, #0
 8002472:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002474:	2303      	movs	r3, #3
 8002476:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002478:	2308      	movs	r3, #8
 800247a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(NUCLEO_TX_GPIO_Port, &GPIO_InitStruct);
 800247c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002480:	4619      	mov	r1, r3
 8002482:	4861      	ldr	r0, [pc, #388]	; (8002608 <HAL_UART_MspInit+0x218>)
 8002484:	f001 fa4a 	bl	800391c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NUCLEO_RX_Pin;
 8002488:	2304      	movs	r3, #4
 800248a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248c:	2302      	movs	r3, #2
 800248e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002490:	2300      	movs	r3, #0
 8002492:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002494:	2303      	movs	r3, #3
 8002496:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002498:	2308      	movs	r3, #8
 800249a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(NUCLEO_RX_GPIO_Port, &GPIO_InitStruct);
 800249c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024a0:	4619      	mov	r1, r3
 80024a2:	485a      	ldr	r0, [pc, #360]	; (800260c <HAL_UART_MspInit+0x21c>)
 80024a4:	f001 fa3a 	bl	800391c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80024a8:	e0a6      	b.n	80025f8 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART1)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a58      	ldr	r2, [pc, #352]	; (8002610 <HAL_UART_MspInit+0x220>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d135      	bne.n	8002520 <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART1_CLK_ENABLE();
 80024b4:	2300      	movs	r3, #0
 80024b6:	61fb      	str	r3, [r7, #28]
 80024b8:	4b52      	ldr	r3, [pc, #328]	; (8002604 <HAL_UART_MspInit+0x214>)
 80024ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024bc:	4a51      	ldr	r2, [pc, #324]	; (8002604 <HAL_UART_MspInit+0x214>)
 80024be:	f043 0310 	orr.w	r3, r3, #16
 80024c2:	6453      	str	r3, [r2, #68]	; 0x44
 80024c4:	4b4f      	ldr	r3, [pc, #316]	; (8002604 <HAL_UART_MspInit+0x214>)
 80024c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c8:	f003 0310 	and.w	r3, r3, #16
 80024cc:	61fb      	str	r3, [r7, #28]
 80024ce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d0:	2300      	movs	r3, #0
 80024d2:	61bb      	str	r3, [r7, #24]
 80024d4:	4b4b      	ldr	r3, [pc, #300]	; (8002604 <HAL_UART_MspInit+0x214>)
 80024d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d8:	4a4a      	ldr	r2, [pc, #296]	; (8002604 <HAL_UART_MspInit+0x214>)
 80024da:	f043 0301 	orr.w	r3, r3, #1
 80024de:	6313      	str	r3, [r2, #48]	; 0x30
 80024e0:	4b48      	ldr	r3, [pc, #288]	; (8002604 <HAL_UART_MspInit+0x214>)
 80024e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	61bb      	str	r3, [r7, #24]
 80024ea:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TEL_TX_Pin|TEL_RX_Pin;
 80024ec:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80024f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f2:	2302      	movs	r3, #2
 80024f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024fa:	2303      	movs	r3, #3
 80024fc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024fe:	2307      	movs	r3, #7
 8002500:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002502:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002506:	4619      	mov	r1, r3
 8002508:	4842      	ldr	r0, [pc, #264]	; (8002614 <HAL_UART_MspInit+0x224>)
 800250a:	f001 fa07 	bl	800391c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800250e:	2200      	movs	r2, #0
 8002510:	2100      	movs	r1, #0
 8002512:	2025      	movs	r0, #37	; 0x25
 8002514:	f000 fdbb 	bl	800308e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002518:	2025      	movs	r0, #37	; 0x25
 800251a:	f000 fdd4 	bl	80030c6 <HAL_NVIC_EnableIRQ>
}
 800251e:	e06b      	b.n	80025f8 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART2)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a3c      	ldr	r2, [pc, #240]	; (8002618 <HAL_UART_MspInit+0x228>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d134      	bne.n	8002594 <HAL_UART_MspInit+0x1a4>
    __HAL_RCC_USART2_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]
 800252e:	4b35      	ldr	r3, [pc, #212]	; (8002604 <HAL_UART_MspInit+0x214>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	4a34      	ldr	r2, [pc, #208]	; (8002604 <HAL_UART_MspInit+0x214>)
 8002534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002538:	6413      	str	r3, [r2, #64]	; 0x40
 800253a:	4b32      	ldr	r3, [pc, #200]	; (8002604 <HAL_UART_MspInit+0x214>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002542:	617b      	str	r3, [r7, #20]
 8002544:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	4b2e      	ldr	r3, [pc, #184]	; (8002604 <HAL_UART_MspInit+0x214>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	4a2d      	ldr	r2, [pc, #180]	; (8002604 <HAL_UART_MspInit+0x214>)
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	6313      	str	r3, [r2, #48]	; 0x30
 8002556:	4b2b      	ldr	r3, [pc, #172]	; (8002604 <HAL_UART_MspInit+0x214>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	613b      	str	r3, [r7, #16]
 8002560:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8002562:	230c      	movs	r3, #12
 8002564:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002566:	2302      	movs	r3, #2
 8002568:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256a:	2300      	movs	r3, #0
 800256c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800256e:	2303      	movs	r3, #3
 8002570:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002572:	2307      	movs	r3, #7
 8002574:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002576:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800257a:	4619      	mov	r1, r3
 800257c:	4825      	ldr	r0, [pc, #148]	; (8002614 <HAL_UART_MspInit+0x224>)
 800257e:	f001 f9cd 	bl	800391c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002582:	2200      	movs	r2, #0
 8002584:	2100      	movs	r1, #0
 8002586:	2026      	movs	r0, #38	; 0x26
 8002588:	f000 fd81 	bl	800308e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800258c:	2026      	movs	r0, #38	; 0x26
 800258e:	f000 fd9a 	bl	80030c6 <HAL_NVIC_EnableIRQ>
}
 8002592:	e031      	b.n	80025f8 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART3)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a20      	ldr	r2, [pc, #128]	; (800261c <HAL_UART_MspInit+0x22c>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d12c      	bne.n	80025f8 <HAL_UART_MspInit+0x208>
    __HAL_RCC_USART3_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	4b18      	ldr	r3, [pc, #96]	; (8002604 <HAL_UART_MspInit+0x214>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	4a17      	ldr	r2, [pc, #92]	; (8002604 <HAL_UART_MspInit+0x214>)
 80025a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025ac:	6413      	str	r3, [r2, #64]	; 0x40
 80025ae:	4b15      	ldr	r3, [pc, #84]	; (8002604 <HAL_UART_MspInit+0x214>)
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	4b11      	ldr	r3, [pc, #68]	; (8002604 <HAL_UART_MspInit+0x214>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	4a10      	ldr	r2, [pc, #64]	; (8002604 <HAL_UART_MspInit+0x214>)
 80025c4:	f043 0304 	orr.w	r3, r3, #4
 80025c8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ca:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <HAL_UART_MspInit+0x214>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	f003 0304 	and.w	r3, r3, #4
 80025d2:	60bb      	str	r3, [r7, #8]
 80025d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TB_TX_Pin|TB_RX_Pin;
 80025d6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80025da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025dc:	2302      	movs	r3, #2
 80025de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e4:	2303      	movs	r3, #3
 80025e6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025e8:	2307      	movs	r3, #7
 80025ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025f0:	4619      	mov	r1, r3
 80025f2:	4805      	ldr	r0, [pc, #20]	; (8002608 <HAL_UART_MspInit+0x218>)
 80025f4:	f001 f992 	bl	800391c <HAL_GPIO_Init>
}
 80025f8:	bf00      	nop
 80025fa:	3740      	adds	r7, #64	; 0x40
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40005000 	.word	0x40005000
 8002604:	40023800 	.word	0x40023800
 8002608:	40020800 	.word	0x40020800
 800260c:	40020c00 	.word	0x40020c00
 8002610:	40011000 	.word	0x40011000
 8002614:	40020000 	.word	0x40020000
 8002618:	40004400 	.word	0x40004400
 800261c:	40004800 	.word	0x40004800

08002620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002624:	e7fe      	b.n	8002624 <NMI_Handler+0x4>

08002626 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002626:	b480      	push	{r7}
 8002628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800262a:	e7fe      	b.n	800262a <HardFault_Handler+0x4>

0800262c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002630:	e7fe      	b.n	8002630 <MemManage_Handler+0x4>

08002632 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002632:	b480      	push	{r7}
 8002634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002636:	e7fe      	b.n	8002636 <BusFault_Handler+0x4>

08002638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800263c:	e7fe      	b.n	800263c <UsageFault_Handler+0x4>

0800263e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800263e:	b480      	push	{r7}
 8002640:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002642:	bf00      	nop
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002650:	bf00      	nop
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800265a:	b480      	push	{r7}
 800265c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800266c:	f000 f97e 	bl	800296c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002670:	bf00      	nop
 8002672:	bd80      	pop	{r7, pc}

08002674 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002678:	4802      	ldr	r0, [pc, #8]	; (8002684 <TIM2_IRQHandler+0x10>)
 800267a:	f002 fe57 	bl	800532c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	20000300 	.word	0x20000300

08002688 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800268c:	4802      	ldr	r0, [pc, #8]	; (8002698 <USART1_IRQHandler+0x10>)
 800268e:	f004 f8cd 	bl	800682c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	2000050c 	.word	0x2000050c

0800269c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80026a0:	4802      	ldr	r0, [pc, #8]	; (80026ac <USART2_IRQHandler+0x10>)
 80026a2:	f004 f8c3 	bl	800682c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20000550 	.word	0x20000550

080026b0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 80026b4:	4802      	ldr	r0, [pc, #8]	; (80026c0 <DMA1_Stream7_IRQHandler+0x10>)
 80026b6:	f000 fec7 	bl	8003448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	20000468 	.word	0x20000468

080026c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
	return 1;
 80026c8:	2301      	movs	r3, #1
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <_kill>:

int _kill(int pid, int sig)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80026de:	f005 f80d 	bl	80076fc <__errno>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2216      	movs	r2, #22
 80026e6:	601a      	str	r2, [r3, #0]
	return -1;
 80026e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <_exit>:

void _exit (int status)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80026fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff ffe7 	bl	80026d4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002706:	e7fe      	b.n	8002706 <_exit+0x12>

08002708 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]
 8002718:	e00a      	b.n	8002730 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800271a:	f3af 8000 	nop.w
 800271e:	4601      	mov	r1, r0
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	1c5a      	adds	r2, r3, #1
 8002724:	60ba      	str	r2, [r7, #8]
 8002726:	b2ca      	uxtb	r2, r1
 8002728:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	3301      	adds	r3, #1
 800272e:	617b      	str	r3, [r7, #20]
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	429a      	cmp	r2, r3
 8002736:	dbf0      	blt.n	800271a <_read+0x12>
	}

return len;
 8002738:	687b      	ldr	r3, [r7, #4]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b086      	sub	sp, #24
 8002746:	af00      	add	r7, sp, #0
 8002748:	60f8      	str	r0, [r7, #12]
 800274a:	60b9      	str	r1, [r7, #8]
 800274c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]
 8002752:	e009      	b.n	8002768 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	1c5a      	adds	r2, r3, #1
 8002758:	60ba      	str	r2, [r7, #8]
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	3301      	adds	r3, #1
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	429a      	cmp	r2, r3
 800276e:	dbf1      	blt.n	8002754 <_write+0x12>
	}
	return len;
 8002770:	687b      	ldr	r3, [r7, #4]
}
 8002772:	4618      	mov	r0, r3
 8002774:	3718      	adds	r7, #24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <_close>:

int _close(int file)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
	return -1;
 8002782:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002786:	4618      	mov	r0, r3
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr

08002792 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
 800279a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027a2:	605a      	str	r2, [r3, #4]
	return 0;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <_isatty>:

int _isatty(int file)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
	return 1;
 80027ba:	2301      	movs	r3, #1
}
 80027bc:	4618      	mov	r0, r3
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
	return 0;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
	...

080027e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027ec:	4a14      	ldr	r2, [pc, #80]	; (8002840 <_sbrk+0x5c>)
 80027ee:	4b15      	ldr	r3, [pc, #84]	; (8002844 <_sbrk+0x60>)
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027f8:	4b13      	ldr	r3, [pc, #76]	; (8002848 <_sbrk+0x64>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d102      	bne.n	8002806 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002800:	4b11      	ldr	r3, [pc, #68]	; (8002848 <_sbrk+0x64>)
 8002802:	4a12      	ldr	r2, [pc, #72]	; (800284c <_sbrk+0x68>)
 8002804:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002806:	4b10      	ldr	r3, [pc, #64]	; (8002848 <_sbrk+0x64>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4413      	add	r3, r2
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	429a      	cmp	r2, r3
 8002812:	d207      	bcs.n	8002824 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002814:	f004 ff72 	bl	80076fc <__errno>
 8002818:	4603      	mov	r3, r0
 800281a:	220c      	movs	r2, #12
 800281c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800281e:	f04f 33ff 	mov.w	r3, #4294967295
 8002822:	e009      	b.n	8002838 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002824:	4b08      	ldr	r3, [pc, #32]	; (8002848 <_sbrk+0x64>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800282a:	4b07      	ldr	r3, [pc, #28]	; (8002848 <_sbrk+0x64>)
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4413      	add	r3, r2
 8002832:	4a05      	ldr	r2, [pc, #20]	; (8002848 <_sbrk+0x64>)
 8002834:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002836:	68fb      	ldr	r3, [r7, #12]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	20020000 	.word	0x20020000
 8002844:	00000400 	.word	0x00000400
 8002848:	200005ec 	.word	0x200005ec
 800284c:	20000608 	.word	0x20000608

08002850 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002854:	4b06      	ldr	r3, [pc, #24]	; (8002870 <SystemInit+0x20>)
 8002856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285a:	4a05      	ldr	r2, [pc, #20]	; (8002870 <SystemInit+0x20>)
 800285c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002860:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	e000ed00 	.word	0xe000ed00

08002874 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
	  ldr   sp, =_estack      /* set stack pointer */
 8002874:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002878:	480d      	ldr	r0, [pc, #52]	; (80028b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800287a:	490e      	ldr	r1, [pc, #56]	; (80028b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800287c:	4a0e      	ldr	r2, [pc, #56]	; (80028b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800287e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002880:	e002      	b.n	8002888 <LoopCopyDataInit>

08002882 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002882:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002884:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002886:	3304      	adds	r3, #4

08002888 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002888:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800288a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800288c:	d3f9      	bcc.n	8002882 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800288e:	4a0b      	ldr	r2, [pc, #44]	; (80028bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002890:	4c0b      	ldr	r4, [pc, #44]	; (80028c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002892:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002894:	e001      	b.n	800289a <LoopFillZerobss>

08002896 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002896:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002898:	3204      	adds	r2, #4

0800289a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800289a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800289c:	d3fb      	bcc.n	8002896 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800289e:	f7ff ffd7 	bl	8002850 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028a2:	f004 ff31 	bl	8007708 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028a6:	f7fe fcd7 	bl	8001258 <main>
  bx  lr    
 80028aa:	4770      	bx	lr
	  ldr   sp, =_estack      /* set stack pointer */
 80028ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028b4:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80028b8:	0800a9a4 	.word	0x0800a9a4
  ldr r2, =_sbss
 80028bc:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80028c0:	20000604 	.word	0x20000604

080028c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028c4:	e7fe      	b.n	80028c4 <ADC_IRQHandler>
	...

080028c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028cc:	4b0e      	ldr	r3, [pc, #56]	; (8002908 <HAL_Init+0x40>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a0d      	ldr	r2, [pc, #52]	; (8002908 <HAL_Init+0x40>)
 80028d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028d8:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <HAL_Init+0x40>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a0a      	ldr	r2, [pc, #40]	; (8002908 <HAL_Init+0x40>)
 80028de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028e4:	4b08      	ldr	r3, [pc, #32]	; (8002908 <HAL_Init+0x40>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a07      	ldr	r2, [pc, #28]	; (8002908 <HAL_Init+0x40>)
 80028ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028f0:	2003      	movs	r0, #3
 80028f2:	f000 fbc1 	bl	8003078 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028f6:	2000      	movs	r0, #0
 80028f8:	f000 f808 	bl	800290c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028fc:	f7ff fb24 	bl	8001f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40023c00 	.word	0x40023c00

0800290c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002914:	4b12      	ldr	r3, [pc, #72]	; (8002960 <HAL_InitTick+0x54>)
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	4b12      	ldr	r3, [pc, #72]	; (8002964 <HAL_InitTick+0x58>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	4619      	mov	r1, r3
 800291e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002922:	fbb3 f3f1 	udiv	r3, r3, r1
 8002926:	fbb2 f3f3 	udiv	r3, r2, r3
 800292a:	4618      	mov	r0, r3
 800292c:	f000 fbe7 	bl	80030fe <HAL_SYSTICK_Config>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e00e      	b.n	8002958 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b0f      	cmp	r3, #15
 800293e:	d80a      	bhi.n	8002956 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002940:	2200      	movs	r2, #0
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	f04f 30ff 	mov.w	r0, #4294967295
 8002948:	f000 fba1 	bl	800308e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800294c:	4a06      	ldr	r2, [pc, #24]	; (8002968 <HAL_InitTick+0x5c>)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002952:	2300      	movs	r3, #0
 8002954:	e000      	b.n	8002958 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
}
 8002958:	4618      	mov	r0, r3
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	20000018 	.word	0x20000018
 8002964:	20000020 	.word	0x20000020
 8002968:	2000001c 	.word	0x2000001c

0800296c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002970:	4b06      	ldr	r3, [pc, #24]	; (800298c <HAL_IncTick+0x20>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	461a      	mov	r2, r3
 8002976:	4b06      	ldr	r3, [pc, #24]	; (8002990 <HAL_IncTick+0x24>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4413      	add	r3, r2
 800297c:	4a04      	ldr	r2, [pc, #16]	; (8002990 <HAL_IncTick+0x24>)
 800297e:	6013      	str	r3, [r2, #0]
}
 8002980:	bf00      	nop
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	20000020 	.word	0x20000020
 8002990:	200005f0 	.word	0x200005f0

08002994 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  return uwTick;
 8002998:	4b03      	ldr	r3, [pc, #12]	; (80029a8 <HAL_GetTick+0x14>)
 800299a:	681b      	ldr	r3, [r3, #0]
}
 800299c:	4618      	mov	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	200005f0 	.word	0x200005f0

080029ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029b4:	2300      	movs	r3, #0
 80029b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e033      	b.n	8002a2a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d109      	bne.n	80029de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7ff fae4 	bl	8001f98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	f003 0310 	and.w	r3, r3, #16
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d118      	bne.n	8002a1c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029f2:	f023 0302 	bic.w	r3, r3, #2
 80029f6:	f043 0202 	orr.w	r2, r3, #2
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f94a 	bl	8002c98 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	f023 0303 	bic.w	r3, r3, #3
 8002a12:	f043 0201 	orr.w	r2, r3, #1
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	641a      	str	r2, [r3, #64]	; 0x40
 8002a1a:	e001      	b.n	8002a20 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
	...

08002a34 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d101      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x1c>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e113      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x244>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b09      	cmp	r3, #9
 8002a5e:	d925      	bls.n	8002aac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68d9      	ldr	r1, [r3, #12]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	4613      	mov	r3, r2
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	4413      	add	r3, r2
 8002a74:	3b1e      	subs	r3, #30
 8002a76:	2207      	movs	r2, #7
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	43da      	mvns	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	400a      	ands	r2, r1
 8002a84:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68d9      	ldr	r1, [r3, #12]
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	4618      	mov	r0, r3
 8002a98:	4603      	mov	r3, r0
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	4403      	add	r3, r0
 8002a9e:	3b1e      	subs	r3, #30
 8002aa0:	409a      	lsls	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	60da      	str	r2, [r3, #12]
 8002aaa:	e022      	b.n	8002af2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6919      	ldr	r1, [r3, #16]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4613      	mov	r3, r2
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	4413      	add	r3, r2
 8002ac0:	2207      	movs	r2, #7
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	43da      	mvns	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	400a      	ands	r2, r1
 8002ace:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6919      	ldr	r1, [r3, #16]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	4403      	add	r3, r0
 8002ae8:	409a      	lsls	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b06      	cmp	r3, #6
 8002af8:	d824      	bhi.n	8002b44 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	4613      	mov	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4413      	add	r3, r2
 8002b0a:	3b05      	subs	r3, #5
 8002b0c:	221f      	movs	r2, #31
 8002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b12:	43da      	mvns	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	400a      	ands	r2, r1
 8002b1a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	4618      	mov	r0, r3
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	4413      	add	r3, r2
 8002b34:	3b05      	subs	r3, #5
 8002b36:	fa00 f203 	lsl.w	r2, r0, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	635a      	str	r2, [r3, #52]	; 0x34
 8002b42:	e04c      	b.n	8002bde <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b0c      	cmp	r3, #12
 8002b4a:	d824      	bhi.n	8002b96 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	4613      	mov	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3b23      	subs	r3, #35	; 0x23
 8002b5e:	221f      	movs	r2, #31
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	43da      	mvns	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	400a      	ands	r2, r1
 8002b6c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	4613      	mov	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4413      	add	r3, r2
 8002b86:	3b23      	subs	r3, #35	; 0x23
 8002b88:	fa00 f203 	lsl.w	r2, r0, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	631a      	str	r2, [r3, #48]	; 0x30
 8002b94:	e023      	b.n	8002bde <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4413      	add	r3, r2
 8002ba6:	3b41      	subs	r3, #65	; 0x41
 8002ba8:	221f      	movs	r2, #31
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43da      	mvns	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	400a      	ands	r2, r1
 8002bb6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	3b41      	subs	r3, #65	; 0x41
 8002bd2:	fa00 f203 	lsl.w	r2, r0, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bde:	4b29      	ldr	r3, [pc, #164]	; (8002c84 <HAL_ADC_ConfigChannel+0x250>)
 8002be0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a28      	ldr	r2, [pc, #160]	; (8002c88 <HAL_ADC_ConfigChannel+0x254>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d10f      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x1d8>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2b12      	cmp	r3, #18
 8002bf2:	d10b      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a1d      	ldr	r2, [pc, #116]	; (8002c88 <HAL_ADC_ConfigChannel+0x254>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d12b      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x23a>
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a1c      	ldr	r2, [pc, #112]	; (8002c8c <HAL_ADC_ConfigChannel+0x258>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d003      	beq.n	8002c28 <HAL_ADC_ConfigChannel+0x1f4>
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2b11      	cmp	r3, #17
 8002c26:	d122      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a11      	ldr	r2, [pc, #68]	; (8002c8c <HAL_ADC_ConfigChannel+0x258>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d111      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c4a:	4b11      	ldr	r3, [pc, #68]	; (8002c90 <HAL_ADC_ConfigChannel+0x25c>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a11      	ldr	r2, [pc, #68]	; (8002c94 <HAL_ADC_ConfigChannel+0x260>)
 8002c50:	fba2 2303 	umull	r2, r3, r2, r3
 8002c54:	0c9a      	lsrs	r2, r3, #18
 8002c56:	4613      	mov	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c60:	e002      	b.n	8002c68 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	3b01      	subs	r3, #1
 8002c66:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f9      	bne.n	8002c62 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3714      	adds	r7, #20
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	40012300 	.word	0x40012300
 8002c88:	40012000 	.word	0x40012000
 8002c8c:	10000012 	.word	0x10000012
 8002c90:	20000018 	.word	0x20000018
 8002c94:	431bde83 	.word	0x431bde83

08002c98 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ca0:	4b79      	ldr	r3, [pc, #484]	; (8002e88 <ADC_Init+0x1f0>)
 8002ca2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ccc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6859      	ldr	r1, [r3, #4]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	021a      	lsls	r2, r3, #8
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002cf0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6859      	ldr	r1, [r3, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6899      	ldr	r1, [r3, #8]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68da      	ldr	r2, [r3, #12]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2a:	4a58      	ldr	r2, [pc, #352]	; (8002e8c <ADC_Init+0x1f4>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d022      	beq.n	8002d76 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689a      	ldr	r2, [r3, #8]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6899      	ldr	r1, [r3, #8]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6899      	ldr	r1, [r3, #8]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	e00f      	b.n	8002d96 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d94:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 0202 	bic.w	r2, r2, #2
 8002da4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6899      	ldr	r1, [r3, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	7e1b      	ldrb	r3, [r3, #24]
 8002db0:	005a      	lsls	r2, r3, #1
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d01b      	beq.n	8002dfc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dd2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002de2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6859      	ldr	r1, [r3, #4]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dee:	3b01      	subs	r3, #1
 8002df0:	035a      	lsls	r2, r3, #13
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	e007      	b.n	8002e0c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e0a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002e1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	3b01      	subs	r3, #1
 8002e28:	051a      	lsls	r2, r3, #20
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6899      	ldr	r1, [r3, #8]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e4e:	025a      	lsls	r2, r3, #9
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6899      	ldr	r1, [r3, #8]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	029a      	lsls	r2, r3, #10
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	609a      	str	r2, [r3, #8]
}
 8002e7c:	bf00      	nop
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	40012300 	.word	0x40012300
 8002e8c:	0f000001 	.word	0x0f000001

08002e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ea0:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002eac:	4013      	ands	r3, r2
 8002eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002eb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ec2:	4a04      	ldr	r2, [pc, #16]	; (8002ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	60d3      	str	r3, [r2, #12]
}
 8002ec8:	bf00      	nop
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	e000ed00 	.word	0xe000ed00

08002ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002edc:	4b04      	ldr	r3, [pc, #16]	; (8002ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	0a1b      	lsrs	r3, r3, #8
 8002ee2:	f003 0307 	and.w	r3, r3, #7
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	e000ed00 	.word	0xe000ed00

08002ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	4603      	mov	r3, r0
 8002efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	db0b      	blt.n	8002f1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f06:	79fb      	ldrb	r3, [r7, #7]
 8002f08:	f003 021f 	and.w	r2, r3, #31
 8002f0c:	4907      	ldr	r1, [pc, #28]	; (8002f2c <__NVIC_EnableIRQ+0x38>)
 8002f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f12:	095b      	lsrs	r3, r3, #5
 8002f14:	2001      	movs	r0, #1
 8002f16:	fa00 f202 	lsl.w	r2, r0, r2
 8002f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	e000e100 	.word	0xe000e100

08002f30 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	4603      	mov	r3, r0
 8002f38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	db12      	blt.n	8002f68 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f42:	79fb      	ldrb	r3, [r7, #7]
 8002f44:	f003 021f 	and.w	r2, r3, #31
 8002f48:	490a      	ldr	r1, [pc, #40]	; (8002f74 <__NVIC_DisableIRQ+0x44>)
 8002f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4e:	095b      	lsrs	r3, r3, #5
 8002f50:	2001      	movs	r0, #1
 8002f52:	fa00 f202 	lsl.w	r2, r0, r2
 8002f56:	3320      	adds	r3, #32
 8002f58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002f5c:	f3bf 8f4f 	dsb	sy
}
 8002f60:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002f62:	f3bf 8f6f 	isb	sy
}
 8002f66:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	e000e100 	.word	0xe000e100

08002f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	6039      	str	r1, [r7, #0]
 8002f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	db0a      	blt.n	8002fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	490c      	ldr	r1, [pc, #48]	; (8002fc4 <__NVIC_SetPriority+0x4c>)
 8002f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f96:	0112      	lsls	r2, r2, #4
 8002f98:	b2d2      	uxtb	r2, r2
 8002f9a:	440b      	add	r3, r1
 8002f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fa0:	e00a      	b.n	8002fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	b2da      	uxtb	r2, r3
 8002fa6:	4908      	ldr	r1, [pc, #32]	; (8002fc8 <__NVIC_SetPriority+0x50>)
 8002fa8:	79fb      	ldrb	r3, [r7, #7]
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	3b04      	subs	r3, #4
 8002fb0:	0112      	lsls	r2, r2, #4
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	761a      	strb	r2, [r3, #24]
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	e000e100 	.word	0xe000e100
 8002fc8:	e000ed00 	.word	0xe000ed00

08002fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b089      	sub	sp, #36	; 0x24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f003 0307 	and.w	r3, r3, #7
 8002fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	f1c3 0307 	rsb	r3, r3, #7
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	bf28      	it	cs
 8002fea:	2304      	movcs	r3, #4
 8002fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	2b06      	cmp	r3, #6
 8002ff4:	d902      	bls.n	8002ffc <NVIC_EncodePriority+0x30>
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	3b03      	subs	r3, #3
 8002ffa:	e000      	b.n	8002ffe <NVIC_EncodePriority+0x32>
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003000:	f04f 32ff 	mov.w	r2, #4294967295
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	43da      	mvns	r2, r3
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	401a      	ands	r2, r3
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003014:	f04f 31ff 	mov.w	r1, #4294967295
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	fa01 f303 	lsl.w	r3, r1, r3
 800301e:	43d9      	mvns	r1, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003024:	4313      	orrs	r3, r2
         );
}
 8003026:	4618      	mov	r0, r3
 8003028:	3724      	adds	r7, #36	; 0x24
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
	...

08003034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3b01      	subs	r3, #1
 8003040:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003044:	d301      	bcc.n	800304a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003046:	2301      	movs	r3, #1
 8003048:	e00f      	b.n	800306a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800304a:	4a0a      	ldr	r2, [pc, #40]	; (8003074 <SysTick_Config+0x40>)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3b01      	subs	r3, #1
 8003050:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003052:	210f      	movs	r1, #15
 8003054:	f04f 30ff 	mov.w	r0, #4294967295
 8003058:	f7ff ff8e 	bl	8002f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800305c:	4b05      	ldr	r3, [pc, #20]	; (8003074 <SysTick_Config+0x40>)
 800305e:	2200      	movs	r2, #0
 8003060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003062:	4b04      	ldr	r3, [pc, #16]	; (8003074 <SysTick_Config+0x40>)
 8003064:	2207      	movs	r2, #7
 8003066:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	e000e010 	.word	0xe000e010

08003078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7ff ff05 	bl	8002e90 <__NVIC_SetPriorityGrouping>
}
 8003086:	bf00      	nop
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800308e:	b580      	push	{r7, lr}
 8003090:	b086      	sub	sp, #24
 8003092:	af00      	add	r7, sp, #0
 8003094:	4603      	mov	r3, r0
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800309c:	2300      	movs	r3, #0
 800309e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030a0:	f7ff ff1a 	bl	8002ed8 <__NVIC_GetPriorityGrouping>
 80030a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	68b9      	ldr	r1, [r7, #8]
 80030aa:	6978      	ldr	r0, [r7, #20]
 80030ac:	f7ff ff8e 	bl	8002fcc <NVIC_EncodePriority>
 80030b0:	4602      	mov	r2, r0
 80030b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030b6:	4611      	mov	r1, r2
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff ff5d 	bl	8002f78 <__NVIC_SetPriority>
}
 80030be:	bf00      	nop
 80030c0:	3718      	adds	r7, #24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b082      	sub	sp, #8
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	4603      	mov	r3, r0
 80030ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff ff0d 	bl	8002ef4 <__NVIC_EnableIRQ>
}
 80030da:	bf00      	nop
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b082      	sub	sp, #8
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	4603      	mov	r3, r0
 80030ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80030ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff ff1d 	bl	8002f30 <__NVIC_DisableIRQ>
}
 80030f6:	bf00      	nop
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b082      	sub	sp, #8
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7ff ff94 	bl	8003034 <SysTick_Config>
 800310c:	4603      	mov	r3, r0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
	...

08003118 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003124:	f7ff fc36 	bl	8002994 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d101      	bne.n	8003134 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e099      	b.n	8003268 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2202      	movs	r2, #2
 8003138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0201 	bic.w	r2, r2, #1
 8003152:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003154:	e00f      	b.n	8003176 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003156:	f7ff fc1d 	bl	8002994 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b05      	cmp	r3, #5
 8003162:	d908      	bls.n	8003176 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2220      	movs	r2, #32
 8003168:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2203      	movs	r2, #3
 800316e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e078      	b.n	8003268 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1e8      	bne.n	8003156 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	4b38      	ldr	r3, [pc, #224]	; (8003270 <HAL_DMA_Init+0x158>)
 8003190:	4013      	ands	r3, r2
 8003192:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	2b04      	cmp	r3, #4
 80031ce:	d107      	bne.n	80031e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d8:	4313      	orrs	r3, r2
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	4313      	orrs	r3, r2
 80031de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f023 0307 	bic.w	r3, r3, #7
 80031f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	4313      	orrs	r3, r2
 8003200:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003206:	2b04      	cmp	r3, #4
 8003208:	d117      	bne.n	800323a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	4313      	orrs	r3, r2
 8003212:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00e      	beq.n	800323a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 fb01 	bl	8003824 <DMA_CheckFifoParam>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d008      	beq.n	800323a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2240      	movs	r2, #64	; 0x40
 800322c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003236:	2301      	movs	r3, #1
 8003238:	e016      	b.n	8003268 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 fab8 	bl	80037b8 <DMA_CalcBaseAndBitshift>
 8003248:	4603      	mov	r3, r0
 800324a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003250:	223f      	movs	r2, #63	; 0x3f
 8003252:	409a      	lsls	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	f010803f 	.word	0xf010803f

08003274 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
 8003280:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003282:	2300      	movs	r3, #0
 8003284:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003292:	2b01      	cmp	r3, #1
 8003294:	d101      	bne.n	800329a <HAL_DMA_Start_IT+0x26>
 8003296:	2302      	movs	r3, #2
 8003298:	e040      	b.n	800331c <HAL_DMA_Start_IT+0xa8>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d12f      	bne.n	800330e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2202      	movs	r2, #2
 80032b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	68b9      	ldr	r1, [r7, #8]
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 fa4a 	bl	800375c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032cc:	223f      	movs	r2, #63	; 0x3f
 80032ce:	409a      	lsls	r2, r3
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0216 	orr.w	r2, r2, #22
 80032e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d007      	beq.n	80032fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0208 	orr.w	r2, r2, #8
 80032fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0201 	orr.w	r2, r2, #1
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	e005      	b.n	800331a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003316:	2302      	movs	r3, #2
 8003318:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800331a:	7dfb      	ldrb	r3, [r7, #23]
}
 800331c:	4618      	mov	r0, r3
 800331e:	3718      	adds	r7, #24
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003330:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003332:	f7ff fb2f 	bl	8002994 <HAL_GetTick>
 8003336:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d008      	beq.n	8003356 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2280      	movs	r2, #128	; 0x80
 8003348:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e052      	b.n	80033fc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 0216 	bic.w	r2, r2, #22
 8003364:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	695a      	ldr	r2, [r3, #20]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003374:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	2b00      	cmp	r3, #0
 800337c:	d103      	bne.n	8003386 <HAL_DMA_Abort+0x62>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003382:	2b00      	cmp	r3, #0
 8003384:	d007      	beq.n	8003396 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0208 	bic.w	r2, r2, #8
 8003394:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 0201 	bic.w	r2, r2, #1
 80033a4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033a6:	e013      	b.n	80033d0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033a8:	f7ff faf4 	bl	8002994 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b05      	cmp	r3, #5
 80033b4:	d90c      	bls.n	80033d0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2220      	movs	r2, #32
 80033ba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2203      	movs	r2, #3
 80033c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e015      	b.n	80033fc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1e4      	bne.n	80033a8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e2:	223f      	movs	r2, #63	; 0x3f
 80033e4:	409a      	lsls	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d004      	beq.n	8003422 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2280      	movs	r2, #128	; 0x80
 800341c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e00c      	b.n	800343c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2205      	movs	r2, #5
 8003426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 0201 	bic.w	r2, r2, #1
 8003438:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003450:	2300      	movs	r3, #0
 8003452:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003454:	4b8e      	ldr	r3, [pc, #568]	; (8003690 <HAL_DMA_IRQHandler+0x248>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a8e      	ldr	r2, [pc, #568]	; (8003694 <HAL_DMA_IRQHandler+0x24c>)
 800345a:	fba2 2303 	umull	r2, r3, r2, r3
 800345e:	0a9b      	lsrs	r3, r3, #10
 8003460:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003466:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003472:	2208      	movs	r2, #8
 8003474:	409a      	lsls	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	4013      	ands	r3, r2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d01a      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b00      	cmp	r3, #0
 800348a:	d013      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 0204 	bic.w	r2, r2, #4
 800349a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a0:	2208      	movs	r2, #8
 80034a2:	409a      	lsls	r2, r3
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ac:	f043 0201 	orr.w	r2, r3, #1
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b8:	2201      	movs	r2, #1
 80034ba:	409a      	lsls	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4013      	ands	r3, r2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d012      	beq.n	80034ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00b      	beq.n	80034ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d6:	2201      	movs	r2, #1
 80034d8:	409a      	lsls	r2, r3
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e2:	f043 0202 	orr.w	r2, r3, #2
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ee:	2204      	movs	r2, #4
 80034f0:	409a      	lsls	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	4013      	ands	r3, r2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d012      	beq.n	8003520 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00b      	beq.n	8003520 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350c:	2204      	movs	r2, #4
 800350e:	409a      	lsls	r2, r3
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003518:	f043 0204 	orr.w	r2, r3, #4
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003524:	2210      	movs	r2, #16
 8003526:	409a      	lsls	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	4013      	ands	r3, r2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d043      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b00      	cmp	r3, #0
 800353c:	d03c      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003542:	2210      	movs	r2, #16
 8003544:	409a      	lsls	r2, r3
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d018      	beq.n	800358a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d108      	bne.n	8003578 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	2b00      	cmp	r3, #0
 800356c:	d024      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	4798      	blx	r3
 8003576:	e01f      	b.n	80035b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800357c:	2b00      	cmp	r3, #0
 800357e:	d01b      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	4798      	blx	r3
 8003588:	e016      	b.n	80035b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003594:	2b00      	cmp	r3, #0
 8003596:	d107      	bne.n	80035a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 0208 	bic.w	r2, r2, #8
 80035a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d003      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035bc:	2220      	movs	r2, #32
 80035be:	409a      	lsls	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4013      	ands	r3, r2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 808f 	beq.w	80036e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0310 	and.w	r3, r3, #16
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 8087 	beq.w	80036e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035de:	2220      	movs	r2, #32
 80035e0:	409a      	lsls	r2, r3
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b05      	cmp	r3, #5
 80035f0:	d136      	bne.n	8003660 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0216 	bic.w	r2, r2, #22
 8003600:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	695a      	ldr	r2, [r3, #20]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003610:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	2b00      	cmp	r3, #0
 8003618:	d103      	bne.n	8003622 <HAL_DMA_IRQHandler+0x1da>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800361e:	2b00      	cmp	r3, #0
 8003620:	d007      	beq.n	8003632 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0208 	bic.w	r2, r2, #8
 8003630:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003636:	223f      	movs	r2, #63	; 0x3f
 8003638:	409a      	lsls	r2, r3
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003652:	2b00      	cmp	r3, #0
 8003654:	d07e      	beq.n	8003754 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	4798      	blx	r3
        }
        return;
 800365e:	e079      	b.n	8003754 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d01d      	beq.n	80036aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10d      	bne.n	8003698 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003680:	2b00      	cmp	r3, #0
 8003682:	d031      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	4798      	blx	r3
 800368c:	e02c      	b.n	80036e8 <HAL_DMA_IRQHandler+0x2a0>
 800368e:	bf00      	nop
 8003690:	20000018 	.word	0x20000018
 8003694:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800369c:	2b00      	cmp	r3, #0
 800369e:	d023      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	4798      	blx	r3
 80036a8:	e01e      	b.n	80036e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d10f      	bne.n	80036d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0210 	bic.w	r2, r2, #16
 80036c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d003      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d032      	beq.n	8003756 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d022      	beq.n	8003742 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2205      	movs	r2, #5
 8003700:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0201 	bic.w	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	3301      	adds	r3, #1
 8003718:	60bb      	str	r3, [r7, #8]
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	429a      	cmp	r2, r3
 800371e:	d307      	bcc.n	8003730 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1f2      	bne.n	8003714 <HAL_DMA_IRQHandler+0x2cc>
 800372e:	e000      	b.n	8003732 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003730:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003746:	2b00      	cmp	r3, #0
 8003748:	d005      	beq.n	8003756 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	4798      	blx	r3
 8003752:	e000      	b.n	8003756 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003754:	bf00      	nop
    }
  }
}
 8003756:	3718      	adds	r7, #24
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
 8003768:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003778:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	2b40      	cmp	r3, #64	; 0x40
 8003788:	d108      	bne.n	800379c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800379a:	e007      	b.n	80037ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	60da      	str	r2, [r3, #12]
}
 80037ac:	bf00      	nop
 80037ae:	3714      	adds	r7, #20
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	3b10      	subs	r3, #16
 80037c8:	4a14      	ldr	r2, [pc, #80]	; (800381c <DMA_CalcBaseAndBitshift+0x64>)
 80037ca:	fba2 2303 	umull	r2, r3, r2, r3
 80037ce:	091b      	lsrs	r3, r3, #4
 80037d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037d2:	4a13      	ldr	r2, [pc, #76]	; (8003820 <DMA_CalcBaseAndBitshift+0x68>)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4413      	add	r3, r2
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	461a      	mov	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2b03      	cmp	r3, #3
 80037e4:	d909      	bls.n	80037fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037ee:	f023 0303 	bic.w	r3, r3, #3
 80037f2:	1d1a      	adds	r2, r3, #4
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	659a      	str	r2, [r3, #88]	; 0x58
 80037f8:	e007      	b.n	800380a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003802:	f023 0303 	bic.w	r3, r3, #3
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800380e:	4618      	mov	r0, r3
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	aaaaaaab 	.word	0xaaaaaaab
 8003820:	0800a5b0 	.word	0x0800a5b0

08003824 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800382c:	2300      	movs	r3, #0
 800382e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003834:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d11f      	bne.n	800387e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2b03      	cmp	r3, #3
 8003842:	d856      	bhi.n	80038f2 <DMA_CheckFifoParam+0xce>
 8003844:	a201      	add	r2, pc, #4	; (adr r2, 800384c <DMA_CheckFifoParam+0x28>)
 8003846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800384a:	bf00      	nop
 800384c:	0800385d 	.word	0x0800385d
 8003850:	0800386f 	.word	0x0800386f
 8003854:	0800385d 	.word	0x0800385d
 8003858:	080038f3 	.word	0x080038f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003860:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d046      	beq.n	80038f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800386c:	e043      	b.n	80038f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003872:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003876:	d140      	bne.n	80038fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800387c:	e03d      	b.n	80038fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003886:	d121      	bne.n	80038cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	2b03      	cmp	r3, #3
 800388c:	d837      	bhi.n	80038fe <DMA_CheckFifoParam+0xda>
 800388e:	a201      	add	r2, pc, #4	; (adr r2, 8003894 <DMA_CheckFifoParam+0x70>)
 8003890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003894:	080038a5 	.word	0x080038a5
 8003898:	080038ab 	.word	0x080038ab
 800389c:	080038a5 	.word	0x080038a5
 80038a0:	080038bd 	.word	0x080038bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	73fb      	strb	r3, [r7, #15]
      break;
 80038a8:	e030      	b.n	800390c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d025      	beq.n	8003902 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038ba:	e022      	b.n	8003902 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038c4:	d11f      	bne.n	8003906 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80038ca:	e01c      	b.n	8003906 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d903      	bls.n	80038da <DMA_CheckFifoParam+0xb6>
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	2b03      	cmp	r3, #3
 80038d6:	d003      	beq.n	80038e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80038d8:	e018      	b.n	800390c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	73fb      	strb	r3, [r7, #15]
      break;
 80038de:	e015      	b.n	800390c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00e      	beq.n	800390a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	73fb      	strb	r3, [r7, #15]
      break;
 80038f0:	e00b      	b.n	800390a <DMA_CheckFifoParam+0xe6>
      break;
 80038f2:	bf00      	nop
 80038f4:	e00a      	b.n	800390c <DMA_CheckFifoParam+0xe8>
      break;
 80038f6:	bf00      	nop
 80038f8:	e008      	b.n	800390c <DMA_CheckFifoParam+0xe8>
      break;
 80038fa:	bf00      	nop
 80038fc:	e006      	b.n	800390c <DMA_CheckFifoParam+0xe8>
      break;
 80038fe:	bf00      	nop
 8003900:	e004      	b.n	800390c <DMA_CheckFifoParam+0xe8>
      break;
 8003902:	bf00      	nop
 8003904:	e002      	b.n	800390c <DMA_CheckFifoParam+0xe8>
      break;   
 8003906:	bf00      	nop
 8003908:	e000      	b.n	800390c <DMA_CheckFifoParam+0xe8>
      break;
 800390a:	bf00      	nop
    }
  } 
  
  return status; 
 800390c:	7bfb      	ldrb	r3, [r7, #15]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3714      	adds	r7, #20
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop

0800391c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800391c:	b480      	push	{r7}
 800391e:	b089      	sub	sp, #36	; 0x24
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003926:	2300      	movs	r3, #0
 8003928:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800392a:	2300      	movs	r3, #0
 800392c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800392e:	2300      	movs	r3, #0
 8003930:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003932:	2300      	movs	r3, #0
 8003934:	61fb      	str	r3, [r7, #28]
 8003936:	e165      	b.n	8003c04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003938:	2201      	movs	r2, #1
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	4013      	ands	r3, r2
 800394a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	429a      	cmp	r2, r3
 8003952:	f040 8154 	bne.w	8003bfe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f003 0303 	and.w	r3, r3, #3
 800395e:	2b01      	cmp	r3, #1
 8003960:	d005      	beq.n	800396e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800396a:	2b02      	cmp	r3, #2
 800396c:	d130      	bne.n	80039d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	2203      	movs	r2, #3
 800397a:	fa02 f303 	lsl.w	r3, r2, r3
 800397e:	43db      	mvns	r3, r3
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	4013      	ands	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	68da      	ldr	r2, [r3, #12]
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	fa02 f303 	lsl.w	r3, r2, r3
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	4313      	orrs	r3, r2
 8003996:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	69ba      	ldr	r2, [r7, #24]
 800399c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039a4:	2201      	movs	r2, #1
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	43db      	mvns	r3, r3
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	4013      	ands	r3, r2
 80039b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	091b      	lsrs	r3, r3, #4
 80039ba:	f003 0201 	and.w	r2, r3, #1
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	fa02 f303 	lsl.w	r3, r2, r3
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f003 0303 	and.w	r3, r3, #3
 80039d8:	2b03      	cmp	r3, #3
 80039da:	d017      	beq.n	8003a0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	2203      	movs	r2, #3
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	43db      	mvns	r3, r3
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	4013      	ands	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	689a      	ldr	r2, [r3, #8]
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f003 0303 	and.w	r3, r3, #3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d123      	bne.n	8003a60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	08da      	lsrs	r2, r3, #3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3208      	adds	r2, #8
 8003a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	220f      	movs	r2, #15
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	43db      	mvns	r3, r3
 8003a36:	69ba      	ldr	r2, [r7, #24]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	691a      	ldr	r2, [r3, #16]
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	f003 0307 	and.w	r3, r3, #7
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	08da      	lsrs	r2, r3, #3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	3208      	adds	r2, #8
 8003a5a:	69b9      	ldr	r1, [r7, #24]
 8003a5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	2203      	movs	r2, #3
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	43db      	mvns	r3, r3
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	4013      	ands	r3, r2
 8003a76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f003 0203 	and.w	r2, r3, #3
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 80ae 	beq.w	8003bfe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60fb      	str	r3, [r7, #12]
 8003aa6:	4b5d      	ldr	r3, [pc, #372]	; (8003c1c <HAL_GPIO_Init+0x300>)
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aaa:	4a5c      	ldr	r2, [pc, #368]	; (8003c1c <HAL_GPIO_Init+0x300>)
 8003aac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ab2:	4b5a      	ldr	r3, [pc, #360]	; (8003c1c <HAL_GPIO_Init+0x300>)
 8003ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aba:	60fb      	str	r3, [r7, #12]
 8003abc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003abe:	4a58      	ldr	r2, [pc, #352]	; (8003c20 <HAL_GPIO_Init+0x304>)
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	089b      	lsrs	r3, r3, #2
 8003ac4:	3302      	adds	r3, #2
 8003ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	f003 0303 	and.w	r3, r3, #3
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	220f      	movs	r2, #15
 8003ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ada:	43db      	mvns	r3, r3
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a4f      	ldr	r2, [pc, #316]	; (8003c24 <HAL_GPIO_Init+0x308>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d025      	beq.n	8003b36 <HAL_GPIO_Init+0x21a>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a4e      	ldr	r2, [pc, #312]	; (8003c28 <HAL_GPIO_Init+0x30c>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d01f      	beq.n	8003b32 <HAL_GPIO_Init+0x216>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a4d      	ldr	r2, [pc, #308]	; (8003c2c <HAL_GPIO_Init+0x310>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d019      	beq.n	8003b2e <HAL_GPIO_Init+0x212>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a4c      	ldr	r2, [pc, #304]	; (8003c30 <HAL_GPIO_Init+0x314>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d013      	beq.n	8003b2a <HAL_GPIO_Init+0x20e>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a4b      	ldr	r2, [pc, #300]	; (8003c34 <HAL_GPIO_Init+0x318>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d00d      	beq.n	8003b26 <HAL_GPIO_Init+0x20a>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a4a      	ldr	r2, [pc, #296]	; (8003c38 <HAL_GPIO_Init+0x31c>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d007      	beq.n	8003b22 <HAL_GPIO_Init+0x206>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a49      	ldr	r2, [pc, #292]	; (8003c3c <HAL_GPIO_Init+0x320>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d101      	bne.n	8003b1e <HAL_GPIO_Init+0x202>
 8003b1a:	2306      	movs	r3, #6
 8003b1c:	e00c      	b.n	8003b38 <HAL_GPIO_Init+0x21c>
 8003b1e:	2307      	movs	r3, #7
 8003b20:	e00a      	b.n	8003b38 <HAL_GPIO_Init+0x21c>
 8003b22:	2305      	movs	r3, #5
 8003b24:	e008      	b.n	8003b38 <HAL_GPIO_Init+0x21c>
 8003b26:	2304      	movs	r3, #4
 8003b28:	e006      	b.n	8003b38 <HAL_GPIO_Init+0x21c>
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e004      	b.n	8003b38 <HAL_GPIO_Init+0x21c>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	e002      	b.n	8003b38 <HAL_GPIO_Init+0x21c>
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <HAL_GPIO_Init+0x21c>
 8003b36:	2300      	movs	r3, #0
 8003b38:	69fa      	ldr	r2, [r7, #28]
 8003b3a:	f002 0203 	and.w	r2, r2, #3
 8003b3e:	0092      	lsls	r2, r2, #2
 8003b40:	4093      	lsls	r3, r2
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b48:	4935      	ldr	r1, [pc, #212]	; (8003c20 <HAL_GPIO_Init+0x304>)
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	089b      	lsrs	r3, r3, #2
 8003b4e:	3302      	adds	r3, #2
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b56:	4b3a      	ldr	r3, [pc, #232]	; (8003c40 <HAL_GPIO_Init+0x324>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	43db      	mvns	r3, r3
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	4013      	ands	r3, r2
 8003b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b7a:	4a31      	ldr	r2, [pc, #196]	; (8003c40 <HAL_GPIO_Init+0x324>)
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b80:	4b2f      	ldr	r3, [pc, #188]	; (8003c40 <HAL_GPIO_Init+0x324>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d003      	beq.n	8003ba4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ba4:	4a26      	ldr	r2, [pc, #152]	; (8003c40 <HAL_GPIO_Init+0x324>)
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003baa:	4b25      	ldr	r3, [pc, #148]	; (8003c40 <HAL_GPIO_Init+0x324>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	43db      	mvns	r3, r3
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bce:	4a1c      	ldr	r2, [pc, #112]	; (8003c40 <HAL_GPIO_Init+0x324>)
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bd4:	4b1a      	ldr	r3, [pc, #104]	; (8003c40 <HAL_GPIO_Init+0x324>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	4013      	ands	r3, r2
 8003be2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d003      	beq.n	8003bf8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003bf8:	4a11      	ldr	r2, [pc, #68]	; (8003c40 <HAL_GPIO_Init+0x324>)
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	3301      	adds	r3, #1
 8003c02:	61fb      	str	r3, [r7, #28]
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	2b0f      	cmp	r3, #15
 8003c08:	f67f ae96 	bls.w	8003938 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c0c:	bf00      	nop
 8003c0e:	bf00      	nop
 8003c10:	3724      	adds	r7, #36	; 0x24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	40023800 	.word	0x40023800
 8003c20:	40013800 	.word	0x40013800
 8003c24:	40020000 	.word	0x40020000
 8003c28:	40020400 	.word	0x40020400
 8003c2c:	40020800 	.word	0x40020800
 8003c30:	40020c00 	.word	0x40020c00
 8003c34:	40021000 	.word	0x40021000
 8003c38:	40021400 	.word	0x40021400
 8003c3c:	40021800 	.word	0x40021800
 8003c40:	40013c00 	.word	0x40013c00

08003c44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	807b      	strh	r3, [r7, #2]
 8003c50:	4613      	mov	r3, r2
 8003c52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c54:	787b      	ldrb	r3, [r7, #1]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c5a:	887a      	ldrh	r2, [r7, #2]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c60:	e003      	b.n	8003c6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c62:	887b      	ldrh	r3, [r7, #2]
 8003c64:	041a      	lsls	r2, r3, #16
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	619a      	str	r2, [r3, #24]
}
 8003c6a:	bf00      	nop
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b085      	sub	sp, #20
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
 8003c7e:	460b      	mov	r3, r1
 8003c80:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c88:	887a      	ldrh	r2, [r7, #2]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	041a      	lsls	r2, r3, #16
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	43d9      	mvns	r1, r3
 8003c94:	887b      	ldrh	r3, [r7, #2]
 8003c96:	400b      	ands	r3, r1
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	619a      	str	r2, [r3, #24]
}
 8003c9e:	bf00      	nop
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
	...

08003cac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	603b      	str	r3, [r7, #0]
 8003cba:	4b20      	ldr	r3, [pc, #128]	; (8003d3c <HAL_PWREx_EnableOverDrive+0x90>)
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	4a1f      	ldr	r2, [pc, #124]	; (8003d3c <HAL_PWREx_EnableOverDrive+0x90>)
 8003cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8003cc6:	4b1d      	ldr	r3, [pc, #116]	; (8003d3c <HAL_PWREx_EnableOverDrive+0x90>)
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cce:	603b      	str	r3, [r7, #0]
 8003cd0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003cd2:	4b1b      	ldr	r3, [pc, #108]	; (8003d40 <HAL_PWREx_EnableOverDrive+0x94>)
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cd8:	f7fe fe5c 	bl	8002994 <HAL_GetTick>
 8003cdc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003cde:	e009      	b.n	8003cf4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ce0:	f7fe fe58 	bl	8002994 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cee:	d901      	bls.n	8003cf4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e01f      	b.n	8003d34 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003cf4:	4b13      	ldr	r3, [pc, #76]	; (8003d44 <HAL_PWREx_EnableOverDrive+0x98>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d00:	d1ee      	bne.n	8003ce0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003d02:	4b11      	ldr	r3, [pc, #68]	; (8003d48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d04:	2201      	movs	r2, #1
 8003d06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d08:	f7fe fe44 	bl	8002994 <HAL_GetTick>
 8003d0c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d0e:	e009      	b.n	8003d24 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d10:	f7fe fe40 	bl	8002994 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d1e:	d901      	bls.n	8003d24 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e007      	b.n	8003d34 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d24:	4b07      	ldr	r3, [pc, #28]	; (8003d44 <HAL_PWREx_EnableOverDrive+0x98>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d30:	d1ee      	bne.n	8003d10 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	40023800 	.word	0x40023800
 8003d40:	420e0040 	.word	0x420e0040
 8003d44:	40007000 	.word	0x40007000
 8003d48:	420e0044 	.word	0x420e0044

08003d4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e0cc      	b.n	8003efa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d60:	4b68      	ldr	r3, [pc, #416]	; (8003f04 <HAL_RCC_ClockConfig+0x1b8>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 030f 	and.w	r3, r3, #15
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d90c      	bls.n	8003d88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d6e:	4b65      	ldr	r3, [pc, #404]	; (8003f04 <HAL_RCC_ClockConfig+0x1b8>)
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d76:	4b63      	ldr	r3, [pc, #396]	; (8003f04 <HAL_RCC_ClockConfig+0x1b8>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 030f 	and.w	r3, r3, #15
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d001      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e0b8      	b.n	8003efa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d020      	beq.n	8003dd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d005      	beq.n	8003dac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003da0:	4b59      	ldr	r3, [pc, #356]	; (8003f08 <HAL_RCC_ClockConfig+0x1bc>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	4a58      	ldr	r2, [pc, #352]	; (8003f08 <HAL_RCC_ClockConfig+0x1bc>)
 8003da6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003daa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0308 	and.w	r3, r3, #8
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d005      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003db8:	4b53      	ldr	r3, [pc, #332]	; (8003f08 <HAL_RCC_ClockConfig+0x1bc>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	4a52      	ldr	r2, [pc, #328]	; (8003f08 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dc4:	4b50      	ldr	r3, [pc, #320]	; (8003f08 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	494d      	ldr	r1, [pc, #308]	; (8003f08 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d044      	beq.n	8003e6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d107      	bne.n	8003dfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dea:	4b47      	ldr	r3, [pc, #284]	; (8003f08 <HAL_RCC_ClockConfig+0x1bc>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d119      	bne.n	8003e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e07f      	b.n	8003efa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d003      	beq.n	8003e0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e06:	2b03      	cmp	r3, #3
 8003e08:	d107      	bne.n	8003e1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e0a:	4b3f      	ldr	r3, [pc, #252]	; (8003f08 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d109      	bne.n	8003e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e06f      	b.n	8003efa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e1a:	4b3b      	ldr	r3, [pc, #236]	; (8003f08 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e067      	b.n	8003efa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e2a:	4b37      	ldr	r3, [pc, #220]	; (8003f08 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f023 0203 	bic.w	r2, r3, #3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	4934      	ldr	r1, [pc, #208]	; (8003f08 <HAL_RCC_ClockConfig+0x1bc>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e3c:	f7fe fdaa 	bl	8002994 <HAL_GetTick>
 8003e40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e42:	e00a      	b.n	8003e5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e44:	f7fe fda6 	bl	8002994 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e04f      	b.n	8003efa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e5a:	4b2b      	ldr	r3, [pc, #172]	; (8003f08 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 020c 	and.w	r2, r3, #12
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d1eb      	bne.n	8003e44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e6c:	4b25      	ldr	r3, [pc, #148]	; (8003f04 <HAL_RCC_ClockConfig+0x1b8>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 030f 	and.w	r3, r3, #15
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d20c      	bcs.n	8003e94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e7a:	4b22      	ldr	r3, [pc, #136]	; (8003f04 <HAL_RCC_ClockConfig+0x1b8>)
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e82:	4b20      	ldr	r3, [pc, #128]	; (8003f04 <HAL_RCC_ClockConfig+0x1b8>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d001      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e032      	b.n	8003efa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d008      	beq.n	8003eb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ea0:	4b19      	ldr	r3, [pc, #100]	; (8003f08 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	4916      	ldr	r1, [pc, #88]	; (8003f08 <HAL_RCC_ClockConfig+0x1bc>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0308 	and.w	r3, r3, #8
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d009      	beq.n	8003ed2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ebe:	4b12      	ldr	r3, [pc, #72]	; (8003f08 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	490e      	ldr	r1, [pc, #56]	; (8003f08 <HAL_RCC_ClockConfig+0x1bc>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ed2:	f000 f855 	bl	8003f80 <HAL_RCC_GetSysClockFreq>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	4b0b      	ldr	r3, [pc, #44]	; (8003f08 <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	091b      	lsrs	r3, r3, #4
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	490a      	ldr	r1, [pc, #40]	; (8003f0c <HAL_RCC_ClockConfig+0x1c0>)
 8003ee4:	5ccb      	ldrb	r3, [r1, r3]
 8003ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eea:	4a09      	ldr	r2, [pc, #36]	; (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003eec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003eee:	4b09      	ldr	r3, [pc, #36]	; (8003f14 <HAL_RCC_ClockConfig+0x1c8>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fe fd0a 	bl	800290c <HAL_InitTick>

  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	40023c00 	.word	0x40023c00
 8003f08:	40023800 	.word	0x40023800
 8003f0c:	0800a598 	.word	0x0800a598
 8003f10:	20000018 	.word	0x20000018
 8003f14:	2000001c 	.word	0x2000001c

08003f18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f1c:	4b03      	ldr	r3, [pc, #12]	; (8003f2c <HAL_RCC_GetHCLKFreq+0x14>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	20000018 	.word	0x20000018

08003f30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f34:	f7ff fff0 	bl	8003f18 <HAL_RCC_GetHCLKFreq>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	4b05      	ldr	r3, [pc, #20]	; (8003f50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	0a9b      	lsrs	r3, r3, #10
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	4903      	ldr	r1, [pc, #12]	; (8003f54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f46:	5ccb      	ldrb	r3, [r1, r3]
 8003f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	40023800 	.word	0x40023800
 8003f54:	0800a5a8 	.word	0x0800a5a8

08003f58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f5c:	f7ff ffdc 	bl	8003f18 <HAL_RCC_GetHCLKFreq>
 8003f60:	4602      	mov	r2, r0
 8003f62:	4b05      	ldr	r3, [pc, #20]	; (8003f78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	0b5b      	lsrs	r3, r3, #13
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	4903      	ldr	r1, [pc, #12]	; (8003f7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f6e:	5ccb      	ldrb	r3, [r1, r3]
 8003f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	40023800 	.word	0x40023800
 8003f7c:	0800a5a8 	.word	0x0800a5a8

08003f80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f84:	b0ae      	sub	sp, #184	; 0xb8
 8003f86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fa6:	4bcb      	ldr	r3, [pc, #812]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f003 030c 	and.w	r3, r3, #12
 8003fae:	2b0c      	cmp	r3, #12
 8003fb0:	f200 8206 	bhi.w	80043c0 <HAL_RCC_GetSysClockFreq+0x440>
 8003fb4:	a201      	add	r2, pc, #4	; (adr r2, 8003fbc <HAL_RCC_GetSysClockFreq+0x3c>)
 8003fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fba:	bf00      	nop
 8003fbc:	08003ff1 	.word	0x08003ff1
 8003fc0:	080043c1 	.word	0x080043c1
 8003fc4:	080043c1 	.word	0x080043c1
 8003fc8:	080043c1 	.word	0x080043c1
 8003fcc:	08003ff9 	.word	0x08003ff9
 8003fd0:	080043c1 	.word	0x080043c1
 8003fd4:	080043c1 	.word	0x080043c1
 8003fd8:	080043c1 	.word	0x080043c1
 8003fdc:	08004001 	.word	0x08004001
 8003fe0:	080043c1 	.word	0x080043c1
 8003fe4:	080043c1 	.word	0x080043c1
 8003fe8:	080043c1 	.word	0x080043c1
 8003fec:	080041f1 	.word	0x080041f1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ff0:	4bb9      	ldr	r3, [pc, #740]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003ff2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003ff6:	e1e7      	b.n	80043c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ff8:	4bb8      	ldr	r3, [pc, #736]	; (80042dc <HAL_RCC_GetSysClockFreq+0x35c>)
 8003ffa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003ffe:	e1e3      	b.n	80043c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004000:	4bb4      	ldr	r3, [pc, #720]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004008:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800400c:	4bb1      	ldr	r3, [pc, #708]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d071      	beq.n	80040fc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004018:	4bae      	ldr	r3, [pc, #696]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	099b      	lsrs	r3, r3, #6
 800401e:	2200      	movs	r2, #0
 8004020:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004024:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004028:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800402c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004030:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004034:	2300      	movs	r3, #0
 8004036:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800403a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800403e:	4622      	mov	r2, r4
 8004040:	462b      	mov	r3, r5
 8004042:	f04f 0000 	mov.w	r0, #0
 8004046:	f04f 0100 	mov.w	r1, #0
 800404a:	0159      	lsls	r1, r3, #5
 800404c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004050:	0150      	lsls	r0, r2, #5
 8004052:	4602      	mov	r2, r0
 8004054:	460b      	mov	r3, r1
 8004056:	4621      	mov	r1, r4
 8004058:	1a51      	subs	r1, r2, r1
 800405a:	6439      	str	r1, [r7, #64]	; 0x40
 800405c:	4629      	mov	r1, r5
 800405e:	eb63 0301 	sbc.w	r3, r3, r1
 8004062:	647b      	str	r3, [r7, #68]	; 0x44
 8004064:	f04f 0200 	mov.w	r2, #0
 8004068:	f04f 0300 	mov.w	r3, #0
 800406c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004070:	4649      	mov	r1, r9
 8004072:	018b      	lsls	r3, r1, #6
 8004074:	4641      	mov	r1, r8
 8004076:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800407a:	4641      	mov	r1, r8
 800407c:	018a      	lsls	r2, r1, #6
 800407e:	4641      	mov	r1, r8
 8004080:	1a51      	subs	r1, r2, r1
 8004082:	63b9      	str	r1, [r7, #56]	; 0x38
 8004084:	4649      	mov	r1, r9
 8004086:	eb63 0301 	sbc.w	r3, r3, r1
 800408a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800408c:	f04f 0200 	mov.w	r2, #0
 8004090:	f04f 0300 	mov.w	r3, #0
 8004094:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004098:	4649      	mov	r1, r9
 800409a:	00cb      	lsls	r3, r1, #3
 800409c:	4641      	mov	r1, r8
 800409e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040a2:	4641      	mov	r1, r8
 80040a4:	00ca      	lsls	r2, r1, #3
 80040a6:	4610      	mov	r0, r2
 80040a8:	4619      	mov	r1, r3
 80040aa:	4603      	mov	r3, r0
 80040ac:	4622      	mov	r2, r4
 80040ae:	189b      	adds	r3, r3, r2
 80040b0:	633b      	str	r3, [r7, #48]	; 0x30
 80040b2:	462b      	mov	r3, r5
 80040b4:	460a      	mov	r2, r1
 80040b6:	eb42 0303 	adc.w	r3, r2, r3
 80040ba:	637b      	str	r3, [r7, #52]	; 0x34
 80040bc:	f04f 0200 	mov.w	r2, #0
 80040c0:	f04f 0300 	mov.w	r3, #0
 80040c4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80040c8:	4629      	mov	r1, r5
 80040ca:	024b      	lsls	r3, r1, #9
 80040cc:	4621      	mov	r1, r4
 80040ce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040d2:	4621      	mov	r1, r4
 80040d4:	024a      	lsls	r2, r1, #9
 80040d6:	4610      	mov	r0, r2
 80040d8:	4619      	mov	r1, r3
 80040da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040de:	2200      	movs	r2, #0
 80040e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80040e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80040e8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80040ec:	f7fc fd7c 	bl	8000be8 <__aeabi_uldivmod>
 80040f0:	4602      	mov	r2, r0
 80040f2:	460b      	mov	r3, r1
 80040f4:	4613      	mov	r3, r2
 80040f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040fa:	e067      	b.n	80041cc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040fc:	4b75      	ldr	r3, [pc, #468]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	099b      	lsrs	r3, r3, #6
 8004102:	2200      	movs	r2, #0
 8004104:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004108:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800410c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004114:	67bb      	str	r3, [r7, #120]	; 0x78
 8004116:	2300      	movs	r3, #0
 8004118:	67fb      	str	r3, [r7, #124]	; 0x7c
 800411a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800411e:	4622      	mov	r2, r4
 8004120:	462b      	mov	r3, r5
 8004122:	f04f 0000 	mov.w	r0, #0
 8004126:	f04f 0100 	mov.w	r1, #0
 800412a:	0159      	lsls	r1, r3, #5
 800412c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004130:	0150      	lsls	r0, r2, #5
 8004132:	4602      	mov	r2, r0
 8004134:	460b      	mov	r3, r1
 8004136:	4621      	mov	r1, r4
 8004138:	1a51      	subs	r1, r2, r1
 800413a:	62b9      	str	r1, [r7, #40]	; 0x28
 800413c:	4629      	mov	r1, r5
 800413e:	eb63 0301 	sbc.w	r3, r3, r1
 8004142:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004144:	f04f 0200 	mov.w	r2, #0
 8004148:	f04f 0300 	mov.w	r3, #0
 800414c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004150:	4649      	mov	r1, r9
 8004152:	018b      	lsls	r3, r1, #6
 8004154:	4641      	mov	r1, r8
 8004156:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800415a:	4641      	mov	r1, r8
 800415c:	018a      	lsls	r2, r1, #6
 800415e:	4641      	mov	r1, r8
 8004160:	ebb2 0a01 	subs.w	sl, r2, r1
 8004164:	4649      	mov	r1, r9
 8004166:	eb63 0b01 	sbc.w	fp, r3, r1
 800416a:	f04f 0200 	mov.w	r2, #0
 800416e:	f04f 0300 	mov.w	r3, #0
 8004172:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004176:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800417a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800417e:	4692      	mov	sl, r2
 8004180:	469b      	mov	fp, r3
 8004182:	4623      	mov	r3, r4
 8004184:	eb1a 0303 	adds.w	r3, sl, r3
 8004188:	623b      	str	r3, [r7, #32]
 800418a:	462b      	mov	r3, r5
 800418c:	eb4b 0303 	adc.w	r3, fp, r3
 8004190:	627b      	str	r3, [r7, #36]	; 0x24
 8004192:	f04f 0200 	mov.w	r2, #0
 8004196:	f04f 0300 	mov.w	r3, #0
 800419a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800419e:	4629      	mov	r1, r5
 80041a0:	028b      	lsls	r3, r1, #10
 80041a2:	4621      	mov	r1, r4
 80041a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041a8:	4621      	mov	r1, r4
 80041aa:	028a      	lsls	r2, r1, #10
 80041ac:	4610      	mov	r0, r2
 80041ae:	4619      	mov	r1, r3
 80041b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041b4:	2200      	movs	r2, #0
 80041b6:	673b      	str	r3, [r7, #112]	; 0x70
 80041b8:	677a      	str	r2, [r7, #116]	; 0x74
 80041ba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80041be:	f7fc fd13 	bl	8000be8 <__aeabi_uldivmod>
 80041c2:	4602      	mov	r2, r0
 80041c4:	460b      	mov	r3, r1
 80041c6:	4613      	mov	r3, r2
 80041c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041cc:	4b41      	ldr	r3, [pc, #260]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	0c1b      	lsrs	r3, r3, #16
 80041d2:	f003 0303 	and.w	r3, r3, #3
 80041d6:	3301      	adds	r3, #1
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80041de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80041e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80041e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80041ee:	e0eb      	b.n	80043c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041f0:	4b38      	ldr	r3, [pc, #224]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041fc:	4b35      	ldr	r3, [pc, #212]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d06b      	beq.n	80042e0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004208:	4b32      	ldr	r3, [pc, #200]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	099b      	lsrs	r3, r3, #6
 800420e:	2200      	movs	r2, #0
 8004210:	66bb      	str	r3, [r7, #104]	; 0x68
 8004212:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004214:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800421a:	663b      	str	r3, [r7, #96]	; 0x60
 800421c:	2300      	movs	r3, #0
 800421e:	667b      	str	r3, [r7, #100]	; 0x64
 8004220:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004224:	4622      	mov	r2, r4
 8004226:	462b      	mov	r3, r5
 8004228:	f04f 0000 	mov.w	r0, #0
 800422c:	f04f 0100 	mov.w	r1, #0
 8004230:	0159      	lsls	r1, r3, #5
 8004232:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004236:	0150      	lsls	r0, r2, #5
 8004238:	4602      	mov	r2, r0
 800423a:	460b      	mov	r3, r1
 800423c:	4621      	mov	r1, r4
 800423e:	1a51      	subs	r1, r2, r1
 8004240:	61b9      	str	r1, [r7, #24]
 8004242:	4629      	mov	r1, r5
 8004244:	eb63 0301 	sbc.w	r3, r3, r1
 8004248:	61fb      	str	r3, [r7, #28]
 800424a:	f04f 0200 	mov.w	r2, #0
 800424e:	f04f 0300 	mov.w	r3, #0
 8004252:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004256:	4659      	mov	r1, fp
 8004258:	018b      	lsls	r3, r1, #6
 800425a:	4651      	mov	r1, sl
 800425c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004260:	4651      	mov	r1, sl
 8004262:	018a      	lsls	r2, r1, #6
 8004264:	4651      	mov	r1, sl
 8004266:	ebb2 0801 	subs.w	r8, r2, r1
 800426a:	4659      	mov	r1, fp
 800426c:	eb63 0901 	sbc.w	r9, r3, r1
 8004270:	f04f 0200 	mov.w	r2, #0
 8004274:	f04f 0300 	mov.w	r3, #0
 8004278:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800427c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004280:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004284:	4690      	mov	r8, r2
 8004286:	4699      	mov	r9, r3
 8004288:	4623      	mov	r3, r4
 800428a:	eb18 0303 	adds.w	r3, r8, r3
 800428e:	613b      	str	r3, [r7, #16]
 8004290:	462b      	mov	r3, r5
 8004292:	eb49 0303 	adc.w	r3, r9, r3
 8004296:	617b      	str	r3, [r7, #20]
 8004298:	f04f 0200 	mov.w	r2, #0
 800429c:	f04f 0300 	mov.w	r3, #0
 80042a0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80042a4:	4629      	mov	r1, r5
 80042a6:	024b      	lsls	r3, r1, #9
 80042a8:	4621      	mov	r1, r4
 80042aa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042ae:	4621      	mov	r1, r4
 80042b0:	024a      	lsls	r2, r1, #9
 80042b2:	4610      	mov	r0, r2
 80042b4:	4619      	mov	r1, r3
 80042b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042ba:	2200      	movs	r2, #0
 80042bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80042be:	65fa      	str	r2, [r7, #92]	; 0x5c
 80042c0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80042c4:	f7fc fc90 	bl	8000be8 <__aeabi_uldivmod>
 80042c8:	4602      	mov	r2, r0
 80042ca:	460b      	mov	r3, r1
 80042cc:	4613      	mov	r3, r2
 80042ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042d2:	e065      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0x420>
 80042d4:	40023800 	.word	0x40023800
 80042d8:	00f42400 	.word	0x00f42400
 80042dc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042e0:	4b3d      	ldr	r3, [pc, #244]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x458>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	099b      	lsrs	r3, r3, #6
 80042e6:	2200      	movs	r2, #0
 80042e8:	4618      	mov	r0, r3
 80042ea:	4611      	mov	r1, r2
 80042ec:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80042f0:	653b      	str	r3, [r7, #80]	; 0x50
 80042f2:	2300      	movs	r3, #0
 80042f4:	657b      	str	r3, [r7, #84]	; 0x54
 80042f6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80042fa:	4642      	mov	r2, r8
 80042fc:	464b      	mov	r3, r9
 80042fe:	f04f 0000 	mov.w	r0, #0
 8004302:	f04f 0100 	mov.w	r1, #0
 8004306:	0159      	lsls	r1, r3, #5
 8004308:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800430c:	0150      	lsls	r0, r2, #5
 800430e:	4602      	mov	r2, r0
 8004310:	460b      	mov	r3, r1
 8004312:	4641      	mov	r1, r8
 8004314:	1a51      	subs	r1, r2, r1
 8004316:	60b9      	str	r1, [r7, #8]
 8004318:	4649      	mov	r1, r9
 800431a:	eb63 0301 	sbc.w	r3, r3, r1
 800431e:	60fb      	str	r3, [r7, #12]
 8004320:	f04f 0200 	mov.w	r2, #0
 8004324:	f04f 0300 	mov.w	r3, #0
 8004328:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800432c:	4659      	mov	r1, fp
 800432e:	018b      	lsls	r3, r1, #6
 8004330:	4651      	mov	r1, sl
 8004332:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004336:	4651      	mov	r1, sl
 8004338:	018a      	lsls	r2, r1, #6
 800433a:	4651      	mov	r1, sl
 800433c:	1a54      	subs	r4, r2, r1
 800433e:	4659      	mov	r1, fp
 8004340:	eb63 0501 	sbc.w	r5, r3, r1
 8004344:	f04f 0200 	mov.w	r2, #0
 8004348:	f04f 0300 	mov.w	r3, #0
 800434c:	00eb      	lsls	r3, r5, #3
 800434e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004352:	00e2      	lsls	r2, r4, #3
 8004354:	4614      	mov	r4, r2
 8004356:	461d      	mov	r5, r3
 8004358:	4643      	mov	r3, r8
 800435a:	18e3      	adds	r3, r4, r3
 800435c:	603b      	str	r3, [r7, #0]
 800435e:	464b      	mov	r3, r9
 8004360:	eb45 0303 	adc.w	r3, r5, r3
 8004364:	607b      	str	r3, [r7, #4]
 8004366:	f04f 0200 	mov.w	r2, #0
 800436a:	f04f 0300 	mov.w	r3, #0
 800436e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004372:	4629      	mov	r1, r5
 8004374:	028b      	lsls	r3, r1, #10
 8004376:	4621      	mov	r1, r4
 8004378:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800437c:	4621      	mov	r1, r4
 800437e:	028a      	lsls	r2, r1, #10
 8004380:	4610      	mov	r0, r2
 8004382:	4619      	mov	r1, r3
 8004384:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004388:	2200      	movs	r2, #0
 800438a:	64bb      	str	r3, [r7, #72]	; 0x48
 800438c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800438e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004392:	f7fc fc29 	bl	8000be8 <__aeabi_uldivmod>
 8004396:	4602      	mov	r2, r0
 8004398:	460b      	mov	r3, r1
 800439a:	4613      	mov	r3, r2
 800439c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80043a0:	4b0d      	ldr	r3, [pc, #52]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x458>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	0f1b      	lsrs	r3, r3, #28
 80043a6:	f003 0307 	and.w	r3, r3, #7
 80043aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80043ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80043b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80043b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80043be:	e003      	b.n	80043c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043c0:	4b06      	ldr	r3, [pc, #24]	; (80043dc <HAL_RCC_GetSysClockFreq+0x45c>)
 80043c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80043c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	37b8      	adds	r7, #184	; 0xb8
 80043d0:	46bd      	mov	sp, r7
 80043d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043d6:	bf00      	nop
 80043d8:	40023800 	.word	0x40023800
 80043dc:	00f42400 	.word	0x00f42400

080043e0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e28d      	b.n	800490e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 8083 	beq.w	8004506 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004400:	4b94      	ldr	r3, [pc, #592]	; (8004654 <HAL_RCC_OscConfig+0x274>)
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f003 030c 	and.w	r3, r3, #12
 8004408:	2b04      	cmp	r3, #4
 800440a:	d019      	beq.n	8004440 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800440c:	4b91      	ldr	r3, [pc, #580]	; (8004654 <HAL_RCC_OscConfig+0x274>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004414:	2b08      	cmp	r3, #8
 8004416:	d106      	bne.n	8004426 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004418:	4b8e      	ldr	r3, [pc, #568]	; (8004654 <HAL_RCC_OscConfig+0x274>)
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004420:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004424:	d00c      	beq.n	8004440 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004426:	4b8b      	ldr	r3, [pc, #556]	; (8004654 <HAL_RCC_OscConfig+0x274>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800442e:	2b0c      	cmp	r3, #12
 8004430:	d112      	bne.n	8004458 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004432:	4b88      	ldr	r3, [pc, #544]	; (8004654 <HAL_RCC_OscConfig+0x274>)
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800443a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800443e:	d10b      	bne.n	8004458 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004440:	4b84      	ldr	r3, [pc, #528]	; (8004654 <HAL_RCC_OscConfig+0x274>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d05b      	beq.n	8004504 <HAL_RCC_OscConfig+0x124>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d157      	bne.n	8004504 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e25a      	b.n	800490e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004460:	d106      	bne.n	8004470 <HAL_RCC_OscConfig+0x90>
 8004462:	4b7c      	ldr	r3, [pc, #496]	; (8004654 <HAL_RCC_OscConfig+0x274>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a7b      	ldr	r2, [pc, #492]	; (8004654 <HAL_RCC_OscConfig+0x274>)
 8004468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800446c:	6013      	str	r3, [r2, #0]
 800446e:	e01d      	b.n	80044ac <HAL_RCC_OscConfig+0xcc>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004478:	d10c      	bne.n	8004494 <HAL_RCC_OscConfig+0xb4>
 800447a:	4b76      	ldr	r3, [pc, #472]	; (8004654 <HAL_RCC_OscConfig+0x274>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a75      	ldr	r2, [pc, #468]	; (8004654 <HAL_RCC_OscConfig+0x274>)
 8004480:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004484:	6013      	str	r3, [r2, #0]
 8004486:	4b73      	ldr	r3, [pc, #460]	; (8004654 <HAL_RCC_OscConfig+0x274>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a72      	ldr	r2, [pc, #456]	; (8004654 <HAL_RCC_OscConfig+0x274>)
 800448c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004490:	6013      	str	r3, [r2, #0]
 8004492:	e00b      	b.n	80044ac <HAL_RCC_OscConfig+0xcc>
 8004494:	4b6f      	ldr	r3, [pc, #444]	; (8004654 <HAL_RCC_OscConfig+0x274>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a6e      	ldr	r2, [pc, #440]	; (8004654 <HAL_RCC_OscConfig+0x274>)
 800449a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800449e:	6013      	str	r3, [r2, #0]
 80044a0:	4b6c      	ldr	r3, [pc, #432]	; (8004654 <HAL_RCC_OscConfig+0x274>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a6b      	ldr	r2, [pc, #428]	; (8004654 <HAL_RCC_OscConfig+0x274>)
 80044a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d013      	beq.n	80044dc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b4:	f7fe fa6e 	bl	8002994 <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044bc:	f7fe fa6a 	bl	8002994 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b64      	cmp	r3, #100	; 0x64
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e21f      	b.n	800490e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ce:	4b61      	ldr	r3, [pc, #388]	; (8004654 <HAL_RCC_OscConfig+0x274>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0f0      	beq.n	80044bc <HAL_RCC_OscConfig+0xdc>
 80044da:	e014      	b.n	8004506 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044dc:	f7fe fa5a 	bl	8002994 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044e4:	f7fe fa56 	bl	8002994 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b64      	cmp	r3, #100	; 0x64
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e20b      	b.n	800490e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044f6:	4b57      	ldr	r3, [pc, #348]	; (8004654 <HAL_RCC_OscConfig+0x274>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1f0      	bne.n	80044e4 <HAL_RCC_OscConfig+0x104>
 8004502:	e000      	b.n	8004506 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004504:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d06f      	beq.n	80045f2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004512:	4b50      	ldr	r3, [pc, #320]	; (8004654 <HAL_RCC_OscConfig+0x274>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 030c 	and.w	r3, r3, #12
 800451a:	2b00      	cmp	r3, #0
 800451c:	d017      	beq.n	800454e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800451e:	4b4d      	ldr	r3, [pc, #308]	; (8004654 <HAL_RCC_OscConfig+0x274>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004526:	2b08      	cmp	r3, #8
 8004528:	d105      	bne.n	8004536 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800452a:	4b4a      	ldr	r3, [pc, #296]	; (8004654 <HAL_RCC_OscConfig+0x274>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00b      	beq.n	800454e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004536:	4b47      	ldr	r3, [pc, #284]	; (8004654 <HAL_RCC_OscConfig+0x274>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800453e:	2b0c      	cmp	r3, #12
 8004540:	d11c      	bne.n	800457c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004542:	4b44      	ldr	r3, [pc, #272]	; (8004654 <HAL_RCC_OscConfig+0x274>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d116      	bne.n	800457c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800454e:	4b41      	ldr	r3, [pc, #260]	; (8004654 <HAL_RCC_OscConfig+0x274>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d005      	beq.n	8004566 <HAL_RCC_OscConfig+0x186>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d001      	beq.n	8004566 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e1d3      	b.n	800490e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004566:	4b3b      	ldr	r3, [pc, #236]	; (8004654 <HAL_RCC_OscConfig+0x274>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	4937      	ldr	r1, [pc, #220]	; (8004654 <HAL_RCC_OscConfig+0x274>)
 8004576:	4313      	orrs	r3, r2
 8004578:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800457a:	e03a      	b.n	80045f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d020      	beq.n	80045c6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004584:	4b34      	ldr	r3, [pc, #208]	; (8004658 <HAL_RCC_OscConfig+0x278>)
 8004586:	2201      	movs	r2, #1
 8004588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800458a:	f7fe fa03 	bl	8002994 <HAL_GetTick>
 800458e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004590:	e008      	b.n	80045a4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004592:	f7fe f9ff 	bl	8002994 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	2b02      	cmp	r3, #2
 800459e:	d901      	bls.n	80045a4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e1b4      	b.n	800490e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045a4:	4b2b      	ldr	r3, [pc, #172]	; (8004654 <HAL_RCC_OscConfig+0x274>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d0f0      	beq.n	8004592 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045b0:	4b28      	ldr	r3, [pc, #160]	; (8004654 <HAL_RCC_OscConfig+0x274>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	00db      	lsls	r3, r3, #3
 80045be:	4925      	ldr	r1, [pc, #148]	; (8004654 <HAL_RCC_OscConfig+0x274>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	600b      	str	r3, [r1, #0]
 80045c4:	e015      	b.n	80045f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045c6:	4b24      	ldr	r3, [pc, #144]	; (8004658 <HAL_RCC_OscConfig+0x278>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045cc:	f7fe f9e2 	bl	8002994 <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045d4:	f7fe f9de 	bl	8002994 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e193      	b.n	800490e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045e6:	4b1b      	ldr	r3, [pc, #108]	; (8004654 <HAL_RCC_OscConfig+0x274>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1f0      	bne.n	80045d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0308 	and.w	r3, r3, #8
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d036      	beq.n	800466c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d016      	beq.n	8004634 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004606:	4b15      	ldr	r3, [pc, #84]	; (800465c <HAL_RCC_OscConfig+0x27c>)
 8004608:	2201      	movs	r2, #1
 800460a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800460c:	f7fe f9c2 	bl	8002994 <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004612:	e008      	b.n	8004626 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004614:	f7fe f9be 	bl	8002994 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e173      	b.n	800490e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004626:	4b0b      	ldr	r3, [pc, #44]	; (8004654 <HAL_RCC_OscConfig+0x274>)
 8004628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0f0      	beq.n	8004614 <HAL_RCC_OscConfig+0x234>
 8004632:	e01b      	b.n	800466c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004634:	4b09      	ldr	r3, [pc, #36]	; (800465c <HAL_RCC_OscConfig+0x27c>)
 8004636:	2200      	movs	r2, #0
 8004638:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800463a:	f7fe f9ab 	bl	8002994 <HAL_GetTick>
 800463e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004640:	e00e      	b.n	8004660 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004642:	f7fe f9a7 	bl	8002994 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	2b02      	cmp	r3, #2
 800464e:	d907      	bls.n	8004660 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e15c      	b.n	800490e <HAL_RCC_OscConfig+0x52e>
 8004654:	40023800 	.word	0x40023800
 8004658:	42470000 	.word	0x42470000
 800465c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004660:	4b8a      	ldr	r3, [pc, #552]	; (800488c <HAL_RCC_OscConfig+0x4ac>)
 8004662:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1ea      	bne.n	8004642 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 8097 	beq.w	80047a8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800467a:	2300      	movs	r3, #0
 800467c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800467e:	4b83      	ldr	r3, [pc, #524]	; (800488c <HAL_RCC_OscConfig+0x4ac>)
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10f      	bne.n	80046aa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800468a:	2300      	movs	r3, #0
 800468c:	60bb      	str	r3, [r7, #8]
 800468e:	4b7f      	ldr	r3, [pc, #508]	; (800488c <HAL_RCC_OscConfig+0x4ac>)
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	4a7e      	ldr	r2, [pc, #504]	; (800488c <HAL_RCC_OscConfig+0x4ac>)
 8004694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004698:	6413      	str	r3, [r2, #64]	; 0x40
 800469a:	4b7c      	ldr	r3, [pc, #496]	; (800488c <HAL_RCC_OscConfig+0x4ac>)
 800469c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046a2:	60bb      	str	r3, [r7, #8]
 80046a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046a6:	2301      	movs	r3, #1
 80046a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046aa:	4b79      	ldr	r3, [pc, #484]	; (8004890 <HAL_RCC_OscConfig+0x4b0>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d118      	bne.n	80046e8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046b6:	4b76      	ldr	r3, [pc, #472]	; (8004890 <HAL_RCC_OscConfig+0x4b0>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a75      	ldr	r2, [pc, #468]	; (8004890 <HAL_RCC_OscConfig+0x4b0>)
 80046bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046c2:	f7fe f967 	bl	8002994 <HAL_GetTick>
 80046c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046c8:	e008      	b.n	80046dc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ca:	f7fe f963 	bl	8002994 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d901      	bls.n	80046dc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e118      	b.n	800490e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046dc:	4b6c      	ldr	r3, [pc, #432]	; (8004890 <HAL_RCC_OscConfig+0x4b0>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d0f0      	beq.n	80046ca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d106      	bne.n	80046fe <HAL_RCC_OscConfig+0x31e>
 80046f0:	4b66      	ldr	r3, [pc, #408]	; (800488c <HAL_RCC_OscConfig+0x4ac>)
 80046f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f4:	4a65      	ldr	r2, [pc, #404]	; (800488c <HAL_RCC_OscConfig+0x4ac>)
 80046f6:	f043 0301 	orr.w	r3, r3, #1
 80046fa:	6713      	str	r3, [r2, #112]	; 0x70
 80046fc:	e01c      	b.n	8004738 <HAL_RCC_OscConfig+0x358>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	2b05      	cmp	r3, #5
 8004704:	d10c      	bne.n	8004720 <HAL_RCC_OscConfig+0x340>
 8004706:	4b61      	ldr	r3, [pc, #388]	; (800488c <HAL_RCC_OscConfig+0x4ac>)
 8004708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470a:	4a60      	ldr	r2, [pc, #384]	; (800488c <HAL_RCC_OscConfig+0x4ac>)
 800470c:	f043 0304 	orr.w	r3, r3, #4
 8004710:	6713      	str	r3, [r2, #112]	; 0x70
 8004712:	4b5e      	ldr	r3, [pc, #376]	; (800488c <HAL_RCC_OscConfig+0x4ac>)
 8004714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004716:	4a5d      	ldr	r2, [pc, #372]	; (800488c <HAL_RCC_OscConfig+0x4ac>)
 8004718:	f043 0301 	orr.w	r3, r3, #1
 800471c:	6713      	str	r3, [r2, #112]	; 0x70
 800471e:	e00b      	b.n	8004738 <HAL_RCC_OscConfig+0x358>
 8004720:	4b5a      	ldr	r3, [pc, #360]	; (800488c <HAL_RCC_OscConfig+0x4ac>)
 8004722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004724:	4a59      	ldr	r2, [pc, #356]	; (800488c <HAL_RCC_OscConfig+0x4ac>)
 8004726:	f023 0301 	bic.w	r3, r3, #1
 800472a:	6713      	str	r3, [r2, #112]	; 0x70
 800472c:	4b57      	ldr	r3, [pc, #348]	; (800488c <HAL_RCC_OscConfig+0x4ac>)
 800472e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004730:	4a56      	ldr	r2, [pc, #344]	; (800488c <HAL_RCC_OscConfig+0x4ac>)
 8004732:	f023 0304 	bic.w	r3, r3, #4
 8004736:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d015      	beq.n	800476c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004740:	f7fe f928 	bl	8002994 <HAL_GetTick>
 8004744:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004746:	e00a      	b.n	800475e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004748:	f7fe f924 	bl	8002994 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	f241 3288 	movw	r2, #5000	; 0x1388
 8004756:	4293      	cmp	r3, r2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e0d7      	b.n	800490e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800475e:	4b4b      	ldr	r3, [pc, #300]	; (800488c <HAL_RCC_OscConfig+0x4ac>)
 8004760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d0ee      	beq.n	8004748 <HAL_RCC_OscConfig+0x368>
 800476a:	e014      	b.n	8004796 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800476c:	f7fe f912 	bl	8002994 <HAL_GetTick>
 8004770:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004772:	e00a      	b.n	800478a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004774:	f7fe f90e 	bl	8002994 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004782:	4293      	cmp	r3, r2
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e0c1      	b.n	800490e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800478a:	4b40      	ldr	r3, [pc, #256]	; (800488c <HAL_RCC_OscConfig+0x4ac>)
 800478c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1ee      	bne.n	8004774 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004796:	7dfb      	ldrb	r3, [r7, #23]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d105      	bne.n	80047a8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800479c:	4b3b      	ldr	r3, [pc, #236]	; (800488c <HAL_RCC_OscConfig+0x4ac>)
 800479e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a0:	4a3a      	ldr	r2, [pc, #232]	; (800488c <HAL_RCC_OscConfig+0x4ac>)
 80047a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 80ad 	beq.w	800490c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047b2:	4b36      	ldr	r3, [pc, #216]	; (800488c <HAL_RCC_OscConfig+0x4ac>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f003 030c 	and.w	r3, r3, #12
 80047ba:	2b08      	cmp	r3, #8
 80047bc:	d060      	beq.n	8004880 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d145      	bne.n	8004852 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047c6:	4b33      	ldr	r3, [pc, #204]	; (8004894 <HAL_RCC_OscConfig+0x4b4>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047cc:	f7fe f8e2 	bl	8002994 <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047d4:	f7fe f8de 	bl	8002994 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e093      	b.n	800490e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047e6:	4b29      	ldr	r3, [pc, #164]	; (800488c <HAL_RCC_OscConfig+0x4ac>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1f0      	bne.n	80047d4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	69da      	ldr	r2, [r3, #28]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	431a      	orrs	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	019b      	lsls	r3, r3, #6
 8004802:	431a      	orrs	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004808:	085b      	lsrs	r3, r3, #1
 800480a:	3b01      	subs	r3, #1
 800480c:	041b      	lsls	r3, r3, #16
 800480e:	431a      	orrs	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004814:	061b      	lsls	r3, r3, #24
 8004816:	431a      	orrs	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481c:	071b      	lsls	r3, r3, #28
 800481e:	491b      	ldr	r1, [pc, #108]	; (800488c <HAL_RCC_OscConfig+0x4ac>)
 8004820:	4313      	orrs	r3, r2
 8004822:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004824:	4b1b      	ldr	r3, [pc, #108]	; (8004894 <HAL_RCC_OscConfig+0x4b4>)
 8004826:	2201      	movs	r2, #1
 8004828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800482a:	f7fe f8b3 	bl	8002994 <HAL_GetTick>
 800482e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004830:	e008      	b.n	8004844 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004832:	f7fe f8af 	bl	8002994 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d901      	bls.n	8004844 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e064      	b.n	800490e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004844:	4b11      	ldr	r3, [pc, #68]	; (800488c <HAL_RCC_OscConfig+0x4ac>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d0f0      	beq.n	8004832 <HAL_RCC_OscConfig+0x452>
 8004850:	e05c      	b.n	800490c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004852:	4b10      	ldr	r3, [pc, #64]	; (8004894 <HAL_RCC_OscConfig+0x4b4>)
 8004854:	2200      	movs	r2, #0
 8004856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004858:	f7fe f89c 	bl	8002994 <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004860:	f7fe f898 	bl	8002994 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e04d      	b.n	800490e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004872:	4b06      	ldr	r3, [pc, #24]	; (800488c <HAL_RCC_OscConfig+0x4ac>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1f0      	bne.n	8004860 <HAL_RCC_OscConfig+0x480>
 800487e:	e045      	b.n	800490c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d107      	bne.n	8004898 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e040      	b.n	800490e <HAL_RCC_OscConfig+0x52e>
 800488c:	40023800 	.word	0x40023800
 8004890:	40007000 	.word	0x40007000
 8004894:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004898:	4b1f      	ldr	r3, [pc, #124]	; (8004918 <HAL_RCC_OscConfig+0x538>)
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d030      	beq.n	8004908 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d129      	bne.n	8004908 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048be:	429a      	cmp	r2, r3
 80048c0:	d122      	bne.n	8004908 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048c8:	4013      	ands	r3, r2
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d119      	bne.n	8004908 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048de:	085b      	lsrs	r3, r3, #1
 80048e0:	3b01      	subs	r3, #1
 80048e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d10f      	bne.n	8004908 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d107      	bne.n	8004908 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004902:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004904:	429a      	cmp	r2, r3
 8004906:	d001      	beq.n	800490c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e000      	b.n	800490e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3718      	adds	r7, #24
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	40023800 	.word	0x40023800

0800491c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e041      	b.n	80049b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d106      	bne.n	8004948 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7fd fbc0 	bl	80020c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	3304      	adds	r3, #4
 8004958:	4619      	mov	r1, r3
 800495a:	4610      	mov	r0, r2
 800495c:	f001 f93a 	bl	8005bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
	...

080049bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d001      	beq.n	80049d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e046      	b.n	8004a62 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a23      	ldr	r2, [pc, #140]	; (8004a70 <HAL_TIM_Base_Start+0xb4>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d022      	beq.n	8004a2c <HAL_TIM_Base_Start+0x70>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ee:	d01d      	beq.n	8004a2c <HAL_TIM_Base_Start+0x70>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a1f      	ldr	r2, [pc, #124]	; (8004a74 <HAL_TIM_Base_Start+0xb8>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d018      	beq.n	8004a2c <HAL_TIM_Base_Start+0x70>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a1e      	ldr	r2, [pc, #120]	; (8004a78 <HAL_TIM_Base_Start+0xbc>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d013      	beq.n	8004a2c <HAL_TIM_Base_Start+0x70>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a1c      	ldr	r2, [pc, #112]	; (8004a7c <HAL_TIM_Base_Start+0xc0>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d00e      	beq.n	8004a2c <HAL_TIM_Base_Start+0x70>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a1b      	ldr	r2, [pc, #108]	; (8004a80 <HAL_TIM_Base_Start+0xc4>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d009      	beq.n	8004a2c <HAL_TIM_Base_Start+0x70>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a19      	ldr	r2, [pc, #100]	; (8004a84 <HAL_TIM_Base_Start+0xc8>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d004      	beq.n	8004a2c <HAL_TIM_Base_Start+0x70>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a18      	ldr	r2, [pc, #96]	; (8004a88 <HAL_TIM_Base_Start+0xcc>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d111      	bne.n	8004a50 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 0307 	and.w	r3, r3, #7
 8004a36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2b06      	cmp	r3, #6
 8004a3c:	d010      	beq.n	8004a60 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f042 0201 	orr.w	r2, r2, #1
 8004a4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a4e:	e007      	b.n	8004a60 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f042 0201 	orr.w	r2, r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	40010000 	.word	0x40010000
 8004a74:	40000400 	.word	0x40000400
 8004a78:	40000800 	.word	0x40000800
 8004a7c:	40000c00 	.word	0x40000c00
 8004a80:	40010400 	.word	0x40010400
 8004a84:	40014000 	.word	0x40014000
 8004a88:	40001800 	.word	0x40001800

08004a8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e041      	b.n	8004b22 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d106      	bne.n	8004ab8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7fd fae6 	bl	8002084 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	3304      	adds	r3, #4
 8004ac8:	4619      	mov	r1, r3
 8004aca:	4610      	mov	r0, r2
 8004acc:	f001 f882 	bl	8005bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
	...

08004b2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d109      	bne.n	8004b50 <HAL_TIM_PWM_Start+0x24>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	bf14      	ite	ne
 8004b48:	2301      	movne	r3, #1
 8004b4a:	2300      	moveq	r3, #0
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	e022      	b.n	8004b96 <HAL_TIM_PWM_Start+0x6a>
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	2b04      	cmp	r3, #4
 8004b54:	d109      	bne.n	8004b6a <HAL_TIM_PWM_Start+0x3e>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	bf14      	ite	ne
 8004b62:	2301      	movne	r3, #1
 8004b64:	2300      	moveq	r3, #0
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	e015      	b.n	8004b96 <HAL_TIM_PWM_Start+0x6a>
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	2b08      	cmp	r3, #8
 8004b6e:	d109      	bne.n	8004b84 <HAL_TIM_PWM_Start+0x58>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	bf14      	ite	ne
 8004b7c:	2301      	movne	r3, #1
 8004b7e:	2300      	moveq	r3, #0
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	e008      	b.n	8004b96 <HAL_TIM_PWM_Start+0x6a>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	bf14      	ite	ne
 8004b90:	2301      	movne	r3, #1
 8004b92:	2300      	moveq	r3, #0
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e07c      	b.n	8004c98 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d104      	bne.n	8004bae <HAL_TIM_PWM_Start+0x82>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bac:	e013      	b.n	8004bd6 <HAL_TIM_PWM_Start+0xaa>
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	2b04      	cmp	r3, #4
 8004bb2:	d104      	bne.n	8004bbe <HAL_TIM_PWM_Start+0x92>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bbc:	e00b      	b.n	8004bd6 <HAL_TIM_PWM_Start+0xaa>
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	2b08      	cmp	r3, #8
 8004bc2:	d104      	bne.n	8004bce <HAL_TIM_PWM_Start+0xa2>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bcc:	e003      	b.n	8004bd6 <HAL_TIM_PWM_Start+0xaa>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2202      	movs	r2, #2
 8004bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	6839      	ldr	r1, [r7, #0]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f001 fc0c 	bl	80063fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a2d      	ldr	r2, [pc, #180]	; (8004ca0 <HAL_TIM_PWM_Start+0x174>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d004      	beq.n	8004bf8 <HAL_TIM_PWM_Start+0xcc>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a2c      	ldr	r2, [pc, #176]	; (8004ca4 <HAL_TIM_PWM_Start+0x178>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d101      	bne.n	8004bfc <HAL_TIM_PWM_Start+0xd0>
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e000      	b.n	8004bfe <HAL_TIM_PWM_Start+0xd2>
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d007      	beq.n	8004c12 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c10:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a22      	ldr	r2, [pc, #136]	; (8004ca0 <HAL_TIM_PWM_Start+0x174>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d022      	beq.n	8004c62 <HAL_TIM_PWM_Start+0x136>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c24:	d01d      	beq.n	8004c62 <HAL_TIM_PWM_Start+0x136>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a1f      	ldr	r2, [pc, #124]	; (8004ca8 <HAL_TIM_PWM_Start+0x17c>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d018      	beq.n	8004c62 <HAL_TIM_PWM_Start+0x136>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a1d      	ldr	r2, [pc, #116]	; (8004cac <HAL_TIM_PWM_Start+0x180>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d013      	beq.n	8004c62 <HAL_TIM_PWM_Start+0x136>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a1c      	ldr	r2, [pc, #112]	; (8004cb0 <HAL_TIM_PWM_Start+0x184>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d00e      	beq.n	8004c62 <HAL_TIM_PWM_Start+0x136>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a16      	ldr	r2, [pc, #88]	; (8004ca4 <HAL_TIM_PWM_Start+0x178>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d009      	beq.n	8004c62 <HAL_TIM_PWM_Start+0x136>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a18      	ldr	r2, [pc, #96]	; (8004cb4 <HAL_TIM_PWM_Start+0x188>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d004      	beq.n	8004c62 <HAL_TIM_PWM_Start+0x136>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a16      	ldr	r2, [pc, #88]	; (8004cb8 <HAL_TIM_PWM_Start+0x18c>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d111      	bne.n	8004c86 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f003 0307 	and.w	r3, r3, #7
 8004c6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2b06      	cmp	r3, #6
 8004c72:	d010      	beq.n	8004c96 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f042 0201 	orr.w	r2, r2, #1
 8004c82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c84:	e007      	b.n	8004c96 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f042 0201 	orr.w	r2, r2, #1
 8004c94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	40010000 	.word	0x40010000
 8004ca4:	40010400 	.word	0x40010400
 8004ca8:	40000400 	.word	0x40000400
 8004cac:	40000800 	.word	0x40000800
 8004cb0:	40000c00 	.word	0x40000c00
 8004cb4:	40014000 	.word	0x40014000
 8004cb8:	40001800 	.word	0x40001800

08004cbc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e041      	b.n	8004d52 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d106      	bne.n	8004ce8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f839 	bl	8004d5a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2202      	movs	r2, #2
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	3304      	adds	r3, #4
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	4610      	mov	r0, r2
 8004cfc:	f000 ff6a 	bl	8005bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004d62:	bf00      	nop
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
	...

08004d70 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
 8004d7c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d104      	bne.n	8004d92 <HAL_TIM_IC_Start_DMA+0x22>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	e013      	b.n	8004dba <HAL_TIM_IC_Start_DMA+0x4a>
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	2b04      	cmp	r3, #4
 8004d96:	d104      	bne.n	8004da2 <HAL_TIM_IC_Start_DMA+0x32>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	e00b      	b.n	8004dba <HAL_TIM_IC_Start_DMA+0x4a>
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	2b08      	cmp	r3, #8
 8004da6:	d104      	bne.n	8004db2 <HAL_TIM_IC_Start_DMA+0x42>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	e003      	b.n	8004dba <HAL_TIM_IC_Start_DMA+0x4a>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d104      	bne.n	8004dcc <HAL_TIM_IC_Start_DMA+0x5c>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	e013      	b.n	8004df4 <HAL_TIM_IC_Start_DMA+0x84>
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	2b04      	cmp	r3, #4
 8004dd0:	d104      	bne.n	8004ddc <HAL_TIM_IC_Start_DMA+0x6c>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	e00b      	b.n	8004df4 <HAL_TIM_IC_Start_DMA+0x84>
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	2b08      	cmp	r3, #8
 8004de0:	d104      	bne.n	8004dec <HAL_TIM_IC_Start_DMA+0x7c>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	e003      	b.n	8004df4 <HAL_TIM_IC_Start_DMA+0x84>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8004df6:	7dbb      	ldrb	r3, [r7, #22]
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d002      	beq.n	8004e02 <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8004dfc:	7d7b      	ldrb	r3, [r7, #21]
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d101      	bne.n	8004e06 <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 8004e02:	2302      	movs	r3, #2
 8004e04:	e146      	b.n	8005094 <HAL_TIM_IC_Start_DMA+0x324>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8004e06:	7dbb      	ldrb	r3, [r7, #22]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d143      	bne.n	8004e94 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8004e0c:	7d7b      	ldrb	r3, [r7, #21]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d140      	bne.n	8004e94 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d104      	bne.n	8004e22 <HAL_TIM_IC_Start_DMA+0xb2>
 8004e18:	887b      	ldrh	r3, [r7, #2]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d001      	beq.n	8004e22 <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e138      	b.n	8005094 <HAL_TIM_IC_Start_DMA+0x324>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d104      	bne.n	8004e32 <HAL_TIM_IC_Start_DMA+0xc2>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e30:	e013      	b.n	8004e5a <HAL_TIM_IC_Start_DMA+0xea>
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	2b04      	cmp	r3, #4
 8004e36:	d104      	bne.n	8004e42 <HAL_TIM_IC_Start_DMA+0xd2>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2202      	movs	r2, #2
 8004e3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e40:	e00b      	b.n	8004e5a <HAL_TIM_IC_Start_DMA+0xea>
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2b08      	cmp	r3, #8
 8004e46:	d104      	bne.n	8004e52 <HAL_TIM_IC_Start_DMA+0xe2>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2202      	movs	r2, #2
 8004e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e50:	e003      	b.n	8004e5a <HAL_TIM_IC_Start_DMA+0xea>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2202      	movs	r2, #2
 8004e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d104      	bne.n	8004e6a <HAL_TIM_IC_Start_DMA+0xfa>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2202      	movs	r2, #2
 8004e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 8004e68:	e016      	b.n	8004e98 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	2b04      	cmp	r3, #4
 8004e6e:	d104      	bne.n	8004e7a <HAL_TIM_IC_Start_DMA+0x10a>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2202      	movs	r2, #2
 8004e74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 8004e78:	e00e      	b.n	8004e98 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	2b08      	cmp	r3, #8
 8004e7e:	d104      	bne.n	8004e8a <HAL_TIM_IC_Start_DMA+0x11a>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2202      	movs	r2, #2
 8004e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 8004e88:	e006      	b.n	8004e98 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2202      	movs	r2, #2
 8004e8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 8004e92:	e001      	b.n	8004e98 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e0fd      	b.n	8005094 <HAL_TIM_IC_Start_DMA+0x324>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	68b9      	ldr	r1, [r7, #8]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f001 faab 	bl	80063fc <TIM_CCxChannelCmd>

  switch (Channel)
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	2b0c      	cmp	r3, #12
 8004eaa:	f200 80ad 	bhi.w	8005008 <HAL_TIM_IC_Start_DMA+0x298>
 8004eae:	a201      	add	r2, pc, #4	; (adr r2, 8004eb4 <HAL_TIM_IC_Start_DMA+0x144>)
 8004eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb4:	08004ee9 	.word	0x08004ee9
 8004eb8:	08005009 	.word	0x08005009
 8004ebc:	08005009 	.word	0x08005009
 8004ec0:	08005009 	.word	0x08005009
 8004ec4:	08004f31 	.word	0x08004f31
 8004ec8:	08005009 	.word	0x08005009
 8004ecc:	08005009 	.word	0x08005009
 8004ed0:	08005009 	.word	0x08005009
 8004ed4:	08004f79 	.word	0x08004f79
 8004ed8:	08005009 	.word	0x08005009
 8004edc:	08005009 	.word	0x08005009
 8004ee0:	08005009 	.word	0x08005009
 8004ee4:	08004fc1 	.word	0x08004fc1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eec:	4a6b      	ldr	r2, [pc, #428]	; (800509c <HAL_TIM_IC_Start_DMA+0x32c>)
 8004eee:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef4:	4a6a      	ldr	r2, [pc, #424]	; (80050a0 <HAL_TIM_IC_Start_DMA+0x330>)
 8004ef6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efc:	4a69      	ldr	r2, [pc, #420]	; (80050a4 <HAL_TIM_IC_Start_DMA+0x334>)
 8004efe:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	3334      	adds	r3, #52	; 0x34
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	887b      	ldrh	r3, [r7, #2]
 8004f10:	f7fe f9b0 	bl	8003274 <HAL_DMA_Start_IT>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e0ba      	b.n	8005094 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68da      	ldr	r2, [r3, #12]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f2c:	60da      	str	r2, [r3, #12]
      break;
 8004f2e:	e06e      	b.n	800500e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f34:	4a59      	ldr	r2, [pc, #356]	; (800509c <HAL_TIM_IC_Start_DMA+0x32c>)
 8004f36:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3c:	4a58      	ldr	r2, [pc, #352]	; (80050a0 <HAL_TIM_IC_Start_DMA+0x330>)
 8004f3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f44:	4a57      	ldr	r2, [pc, #348]	; (80050a4 <HAL_TIM_IC_Start_DMA+0x334>)
 8004f46:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	3338      	adds	r3, #56	; 0x38
 8004f52:	4619      	mov	r1, r3
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	887b      	ldrh	r3, [r7, #2]
 8004f58:	f7fe f98c 	bl	8003274 <HAL_DMA_Start_IT>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e096      	b.n	8005094 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68da      	ldr	r2, [r3, #12]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f74:	60da      	str	r2, [r3, #12]
      break;
 8004f76:	e04a      	b.n	800500e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7c:	4a47      	ldr	r2, [pc, #284]	; (800509c <HAL_TIM_IC_Start_DMA+0x32c>)
 8004f7e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f84:	4a46      	ldr	r2, [pc, #280]	; (80050a0 <HAL_TIM_IC_Start_DMA+0x330>)
 8004f86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8c:	4a45      	ldr	r2, [pc, #276]	; (80050a4 <HAL_TIM_IC_Start_DMA+0x334>)
 8004f8e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	333c      	adds	r3, #60	; 0x3c
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	887b      	ldrh	r3, [r7, #2]
 8004fa0:	f7fe f968 	bl	8003274 <HAL_DMA_Start_IT>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e072      	b.n	8005094 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68da      	ldr	r2, [r3, #12]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fbc:	60da      	str	r2, [r3, #12]
      break;
 8004fbe:	e026      	b.n	800500e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc4:	4a35      	ldr	r2, [pc, #212]	; (800509c <HAL_TIM_IC_Start_DMA+0x32c>)
 8004fc6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fcc:	4a34      	ldr	r2, [pc, #208]	; (80050a0 <HAL_TIM_IC_Start_DMA+0x330>)
 8004fce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd4:	4a33      	ldr	r2, [pc, #204]	; (80050a4 <HAL_TIM_IC_Start_DMA+0x334>)
 8004fd6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	3340      	adds	r3, #64	; 0x40
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	887b      	ldrh	r3, [r7, #2]
 8004fe8:	f7fe f944 	bl	8003274 <HAL_DMA_Start_IT>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e04e      	b.n	8005094 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68da      	ldr	r2, [r3, #12]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005004:	60da      	str	r2, [r3, #12]
      break;
 8005006:	e002      	b.n	800500e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	75fb      	strb	r3, [r7, #23]
      break;
 800500c:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a25      	ldr	r2, [pc, #148]	; (80050a8 <HAL_TIM_IC_Start_DMA+0x338>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d022      	beq.n	800505e <HAL_TIM_IC_Start_DMA+0x2ee>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005020:	d01d      	beq.n	800505e <HAL_TIM_IC_Start_DMA+0x2ee>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a21      	ldr	r2, [pc, #132]	; (80050ac <HAL_TIM_IC_Start_DMA+0x33c>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d018      	beq.n	800505e <HAL_TIM_IC_Start_DMA+0x2ee>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a1f      	ldr	r2, [pc, #124]	; (80050b0 <HAL_TIM_IC_Start_DMA+0x340>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d013      	beq.n	800505e <HAL_TIM_IC_Start_DMA+0x2ee>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a1e      	ldr	r2, [pc, #120]	; (80050b4 <HAL_TIM_IC_Start_DMA+0x344>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d00e      	beq.n	800505e <HAL_TIM_IC_Start_DMA+0x2ee>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a1c      	ldr	r2, [pc, #112]	; (80050b8 <HAL_TIM_IC_Start_DMA+0x348>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d009      	beq.n	800505e <HAL_TIM_IC_Start_DMA+0x2ee>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a1b      	ldr	r2, [pc, #108]	; (80050bc <HAL_TIM_IC_Start_DMA+0x34c>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d004      	beq.n	800505e <HAL_TIM_IC_Start_DMA+0x2ee>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a19      	ldr	r2, [pc, #100]	; (80050c0 <HAL_TIM_IC_Start_DMA+0x350>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d111      	bne.n	8005082 <HAL_TIM_IC_Start_DMA+0x312>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	f003 0307 	and.w	r3, r3, #7
 8005068:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	2b06      	cmp	r3, #6
 800506e:	d010      	beq.n	8005092 <HAL_TIM_IC_Start_DMA+0x322>
    {
      __HAL_TIM_ENABLE(htim);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f042 0201 	orr.w	r2, r2, #1
 800507e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005080:	e007      	b.n	8005092 <HAL_TIM_IC_Start_DMA+0x322>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f042 0201 	orr.w	r2, r2, #1
 8005090:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005092:	7dfb      	ldrb	r3, [r7, #23]
}
 8005094:	4618      	mov	r0, r3
 8005096:	3718      	adds	r7, #24
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	08005aa5 	.word	0x08005aa5
 80050a0:	08005b6d 	.word	0x08005b6d
 80050a4:	08005a13 	.word	0x08005a13
 80050a8:	40010000 	.word	0x40010000
 80050ac:	40000400 	.word	0x40000400
 80050b0:	40000800 	.word	0x40000800
 80050b4:	40000c00 	.word	0x40000c00
 80050b8:	40010400 	.word	0x40010400
 80050bc:	40014000 	.word	0x40014000
 80050c0:	40001800 	.word	0x40001800

080050c4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d101      	bne.n	80050d8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e097      	b.n	8005208 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d106      	bne.n	80050f2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f7fd f8b1 	bl	8002254 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2202      	movs	r2, #2
 80050f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	6812      	ldr	r2, [r2, #0]
 8005104:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005108:	f023 0307 	bic.w	r3, r3, #7
 800510c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	3304      	adds	r3, #4
 8005116:	4619      	mov	r1, r3
 8005118:	4610      	mov	r0, r2
 800511a:	f000 fd5b 	bl	8005bd4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	6a1b      	ldr	r3, [r3, #32]
 8005134:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	4313      	orrs	r3, r2
 800513e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005146:	f023 0303 	bic.w	r3, r3, #3
 800514a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	021b      	lsls	r3, r3, #8
 8005156:	4313      	orrs	r3, r2
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	4313      	orrs	r3, r2
 800515c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005164:	f023 030c 	bic.w	r3, r3, #12
 8005168:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005170:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005174:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	68da      	ldr	r2, [r3, #12]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	021b      	lsls	r3, r3, #8
 8005180:	4313      	orrs	r3, r2
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	4313      	orrs	r3, r2
 8005186:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	011a      	lsls	r2, r3, #4
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	031b      	lsls	r3, r3, #12
 8005194:	4313      	orrs	r3, r2
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	4313      	orrs	r3, r2
 800519a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80051a2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80051aa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	011b      	lsls	r3, r3, #4
 80051b6:	4313      	orrs	r3, r2
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2201      	movs	r2, #1
 80051f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3718      	adds	r7, #24
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005220:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005228:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005230:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005238:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d110      	bne.n	8005262 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005240:	7bfb      	ldrb	r3, [r7, #15]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d102      	bne.n	800524c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005246:	7b7b      	ldrb	r3, [r7, #13]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d001      	beq.n	8005250 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e069      	b.n	8005324 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2202      	movs	r2, #2
 8005254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2202      	movs	r2, #2
 800525c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005260:	e031      	b.n	80052c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2b04      	cmp	r3, #4
 8005266:	d110      	bne.n	800528a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005268:	7bbb      	ldrb	r3, [r7, #14]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d102      	bne.n	8005274 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800526e:	7b3b      	ldrb	r3, [r7, #12]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d001      	beq.n	8005278 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e055      	b.n	8005324 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2202      	movs	r2, #2
 800527c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2202      	movs	r2, #2
 8005284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005288:	e01d      	b.n	80052c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800528a:	7bfb      	ldrb	r3, [r7, #15]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d108      	bne.n	80052a2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005290:	7bbb      	ldrb	r3, [r7, #14]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d105      	bne.n	80052a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005296:	7b7b      	ldrb	r3, [r7, #13]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d102      	bne.n	80052a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800529c:	7b3b      	ldrb	r3, [r7, #12]
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d001      	beq.n	80052a6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e03e      	b.n	8005324 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2202      	movs	r2, #2
 80052aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2202      	movs	r2, #2
 80052b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2202      	movs	r2, #2
 80052ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2202      	movs	r2, #2
 80052c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d003      	beq.n	80052d4 <HAL_TIM_Encoder_Start+0xc4>
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	2b04      	cmp	r3, #4
 80052d0:	d008      	beq.n	80052e4 <HAL_TIM_Encoder_Start+0xd4>
 80052d2:	e00f      	b.n	80052f4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2201      	movs	r2, #1
 80052da:	2100      	movs	r1, #0
 80052dc:	4618      	mov	r0, r3
 80052de:	f001 f88d 	bl	80063fc <TIM_CCxChannelCmd>
      break;
 80052e2:	e016      	b.n	8005312 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2201      	movs	r2, #1
 80052ea:	2104      	movs	r1, #4
 80052ec:	4618      	mov	r0, r3
 80052ee:	f001 f885 	bl	80063fc <TIM_CCxChannelCmd>
      break;
 80052f2:	e00e      	b.n	8005312 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2201      	movs	r2, #1
 80052fa:	2100      	movs	r1, #0
 80052fc:	4618      	mov	r0, r3
 80052fe:	f001 f87d 	bl	80063fc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2201      	movs	r2, #1
 8005308:	2104      	movs	r1, #4
 800530a:	4618      	mov	r0, r3
 800530c:	f001 f876 	bl	80063fc <TIM_CCxChannelCmd>
      break;
 8005310:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f042 0201 	orr.w	r2, r2, #1
 8005320:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b02      	cmp	r3, #2
 8005340:	d122      	bne.n	8005388 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f003 0302 	and.w	r3, r3, #2
 800534c:	2b02      	cmp	r3, #2
 800534e:	d11b      	bne.n	8005388 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f06f 0202 	mvn.w	r2, #2
 8005358:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	f003 0303 	and.w	r3, r3, #3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d003      	beq.n	8005376 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 fb1d 	bl	80059ae <HAL_TIM_IC_CaptureCallback>
 8005374:	e005      	b.n	8005382 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 fb0f 	bl	800599a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 fb2a 	bl	80059d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	f003 0304 	and.w	r3, r3, #4
 8005392:	2b04      	cmp	r3, #4
 8005394:	d122      	bne.n	80053dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	2b04      	cmp	r3, #4
 80053a2:	d11b      	bne.n	80053dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f06f 0204 	mvn.w	r2, #4
 80053ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2202      	movs	r2, #2
 80053b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d003      	beq.n	80053ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 faf3 	bl	80059ae <HAL_TIM_IC_CaptureCallback>
 80053c8:	e005      	b.n	80053d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 fae5 	bl	800599a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 fb00 	bl	80059d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	f003 0308 	and.w	r3, r3, #8
 80053e6:	2b08      	cmp	r3, #8
 80053e8:	d122      	bne.n	8005430 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f003 0308 	and.w	r3, r3, #8
 80053f4:	2b08      	cmp	r3, #8
 80053f6:	d11b      	bne.n	8005430 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f06f 0208 	mvn.w	r2, #8
 8005400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2204      	movs	r2, #4
 8005406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	69db      	ldr	r3, [r3, #28]
 800540e:	f003 0303 	and.w	r3, r3, #3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 fac9 	bl	80059ae <HAL_TIM_IC_CaptureCallback>
 800541c:	e005      	b.n	800542a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 fabb 	bl	800599a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 fad6 	bl	80059d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	f003 0310 	and.w	r3, r3, #16
 800543a:	2b10      	cmp	r3, #16
 800543c:	d122      	bne.n	8005484 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f003 0310 	and.w	r3, r3, #16
 8005448:	2b10      	cmp	r3, #16
 800544a:	d11b      	bne.n	8005484 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f06f 0210 	mvn.w	r2, #16
 8005454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2208      	movs	r2, #8
 800545a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005466:	2b00      	cmp	r3, #0
 8005468:	d003      	beq.n	8005472 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 fa9f 	bl	80059ae <HAL_TIM_IC_CaptureCallback>
 8005470:	e005      	b.n	800547e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 fa91 	bl	800599a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 faac 	bl	80059d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b01      	cmp	r3, #1
 8005490:	d10e      	bne.n	80054b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	2b01      	cmp	r3, #1
 800549e:	d107      	bne.n	80054b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f06f 0201 	mvn.w	r2, #1
 80054a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 fa6b 	bl	8005986 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ba:	2b80      	cmp	r3, #128	; 0x80
 80054bc:	d10e      	bne.n	80054dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c8:	2b80      	cmp	r3, #128	; 0x80
 80054ca:	d107      	bne.n	80054dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f001 f88e 	bl	80065f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e6:	2b40      	cmp	r3, #64	; 0x40
 80054e8:	d10e      	bne.n	8005508 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f4:	2b40      	cmp	r3, #64	; 0x40
 80054f6:	d107      	bne.n	8005508 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 fa71 	bl	80059ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	f003 0320 	and.w	r3, r3, #32
 8005512:	2b20      	cmp	r3, #32
 8005514:	d10e      	bne.n	8005534 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	f003 0320 	and.w	r3, r3, #32
 8005520:	2b20      	cmp	r3, #32
 8005522:	d107      	bne.n	8005534 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f06f 0220 	mvn.w	r2, #32
 800552c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f001 f858 	bl	80065e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005534:	bf00      	nop
 8005536:	3708      	adds	r7, #8
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005548:	2300      	movs	r3, #0
 800554a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005552:	2b01      	cmp	r3, #1
 8005554:	d101      	bne.n	800555a <HAL_TIM_IC_ConfigChannel+0x1e>
 8005556:	2302      	movs	r3, #2
 8005558:	e088      	b.n	800566c <HAL_TIM_IC_ConfigChannel+0x130>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d11b      	bne.n	80055a0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6818      	ldr	r0, [r3, #0]
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	6819      	ldr	r1, [r3, #0]
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	f000 fd7c 	bl	8006074 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	699a      	ldr	r2, [r3, #24]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f022 020c 	bic.w	r2, r2, #12
 800558a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6999      	ldr	r1, [r3, #24]
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	689a      	ldr	r2, [r3, #8]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	430a      	orrs	r2, r1
 800559c:	619a      	str	r2, [r3, #24]
 800559e:	e060      	b.n	8005662 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b04      	cmp	r3, #4
 80055a4:	d11c      	bne.n	80055e0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6818      	ldr	r0, [r3, #0]
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	6819      	ldr	r1, [r3, #0]
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	f000 fe00 	bl	80061ba <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	699a      	ldr	r2, [r3, #24]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80055c8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6999      	ldr	r1, [r3, #24]
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	021a      	lsls	r2, r3, #8
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	430a      	orrs	r2, r1
 80055dc:	619a      	str	r2, [r3, #24]
 80055de:	e040      	b.n	8005662 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2b08      	cmp	r3, #8
 80055e4:	d11b      	bne.n	800561e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6818      	ldr	r0, [r3, #0]
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	6819      	ldr	r1, [r3, #0]
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	685a      	ldr	r2, [r3, #4]
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	f000 fe4d 	bl	8006294 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	69da      	ldr	r2, [r3, #28]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 020c 	bic.w	r2, r2, #12
 8005608:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	69d9      	ldr	r1, [r3, #28]
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	689a      	ldr	r2, [r3, #8]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	61da      	str	r2, [r3, #28]
 800561c:	e021      	b.n	8005662 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2b0c      	cmp	r3, #12
 8005622:	d11c      	bne.n	800565e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6818      	ldr	r0, [r3, #0]
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	6819      	ldr	r1, [r3, #0]
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	f000 fe6a 	bl	800630c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	69da      	ldr	r2, [r3, #28]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005646:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	69d9      	ldr	r1, [r3, #28]
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	021a      	lsls	r2, r3, #8
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	430a      	orrs	r2, r1
 800565a:	61da      	str	r2, [r3, #28]
 800565c:	e001      	b.n	8005662 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800566a:	7dfb      	ldrb	r3, [r7, #23]
}
 800566c:	4618      	mov	r0, r3
 800566e:	3718      	adds	r7, #24
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b086      	sub	sp, #24
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005680:	2300      	movs	r3, #0
 8005682:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800568a:	2b01      	cmp	r3, #1
 800568c:	d101      	bne.n	8005692 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800568e:	2302      	movs	r3, #2
 8005690:	e0ae      	b.n	80057f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b0c      	cmp	r3, #12
 800569e:	f200 809f 	bhi.w	80057e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80056a2:	a201      	add	r2, pc, #4	; (adr r2, 80056a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80056a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a8:	080056dd 	.word	0x080056dd
 80056ac:	080057e1 	.word	0x080057e1
 80056b0:	080057e1 	.word	0x080057e1
 80056b4:	080057e1 	.word	0x080057e1
 80056b8:	0800571d 	.word	0x0800571d
 80056bc:	080057e1 	.word	0x080057e1
 80056c0:	080057e1 	.word	0x080057e1
 80056c4:	080057e1 	.word	0x080057e1
 80056c8:	0800575f 	.word	0x0800575f
 80056cc:	080057e1 	.word	0x080057e1
 80056d0:	080057e1 	.word	0x080057e1
 80056d4:	080057e1 	.word	0x080057e1
 80056d8:	0800579f 	.word	0x0800579f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68b9      	ldr	r1, [r7, #8]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f000 fb16 	bl	8005d14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	699a      	ldr	r2, [r3, #24]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f042 0208 	orr.w	r2, r2, #8
 80056f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	699a      	ldr	r2, [r3, #24]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f022 0204 	bic.w	r2, r2, #4
 8005706:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6999      	ldr	r1, [r3, #24]
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	691a      	ldr	r2, [r3, #16]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	430a      	orrs	r2, r1
 8005718:	619a      	str	r2, [r3, #24]
      break;
 800571a:	e064      	b.n	80057e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68b9      	ldr	r1, [r7, #8]
 8005722:	4618      	mov	r0, r3
 8005724:	f000 fb66 	bl	8005df4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	699a      	ldr	r2, [r3, #24]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005736:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	699a      	ldr	r2, [r3, #24]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005746:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6999      	ldr	r1, [r3, #24]
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	021a      	lsls	r2, r3, #8
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	430a      	orrs	r2, r1
 800575a:	619a      	str	r2, [r3, #24]
      break;
 800575c:	e043      	b.n	80057e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68b9      	ldr	r1, [r7, #8]
 8005764:	4618      	mov	r0, r3
 8005766:	f000 fbbb 	bl	8005ee0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	69da      	ldr	r2, [r3, #28]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f042 0208 	orr.w	r2, r2, #8
 8005778:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	69da      	ldr	r2, [r3, #28]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 0204 	bic.w	r2, r2, #4
 8005788:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	69d9      	ldr	r1, [r3, #28]
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	691a      	ldr	r2, [r3, #16]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	430a      	orrs	r2, r1
 800579a:	61da      	str	r2, [r3, #28]
      break;
 800579c:	e023      	b.n	80057e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68b9      	ldr	r1, [r7, #8]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f000 fc0f 	bl	8005fc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	69da      	ldr	r2, [r3, #28]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	69da      	ldr	r2, [r3, #28]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	69d9      	ldr	r1, [r3, #28]
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	021a      	lsls	r2, r3, #8
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	430a      	orrs	r2, r1
 80057dc:	61da      	str	r2, [r3, #28]
      break;
 80057de:	e002      	b.n	80057e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	75fb      	strb	r3, [r7, #23]
      break;
 80057e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3718      	adds	r7, #24
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005802:	2300      	movs	r3, #0
 8005804:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800580c:	2b01      	cmp	r3, #1
 800580e:	d101      	bne.n	8005814 <HAL_TIM_ConfigClockSource+0x1c>
 8005810:	2302      	movs	r3, #2
 8005812:	e0b4      	b.n	800597e <HAL_TIM_ConfigClockSource+0x186>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2202      	movs	r2, #2
 8005820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005832:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800583a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800584c:	d03e      	beq.n	80058cc <HAL_TIM_ConfigClockSource+0xd4>
 800584e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005852:	f200 8087 	bhi.w	8005964 <HAL_TIM_ConfigClockSource+0x16c>
 8005856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800585a:	f000 8086 	beq.w	800596a <HAL_TIM_ConfigClockSource+0x172>
 800585e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005862:	d87f      	bhi.n	8005964 <HAL_TIM_ConfigClockSource+0x16c>
 8005864:	2b70      	cmp	r3, #112	; 0x70
 8005866:	d01a      	beq.n	800589e <HAL_TIM_ConfigClockSource+0xa6>
 8005868:	2b70      	cmp	r3, #112	; 0x70
 800586a:	d87b      	bhi.n	8005964 <HAL_TIM_ConfigClockSource+0x16c>
 800586c:	2b60      	cmp	r3, #96	; 0x60
 800586e:	d050      	beq.n	8005912 <HAL_TIM_ConfigClockSource+0x11a>
 8005870:	2b60      	cmp	r3, #96	; 0x60
 8005872:	d877      	bhi.n	8005964 <HAL_TIM_ConfigClockSource+0x16c>
 8005874:	2b50      	cmp	r3, #80	; 0x50
 8005876:	d03c      	beq.n	80058f2 <HAL_TIM_ConfigClockSource+0xfa>
 8005878:	2b50      	cmp	r3, #80	; 0x50
 800587a:	d873      	bhi.n	8005964 <HAL_TIM_ConfigClockSource+0x16c>
 800587c:	2b40      	cmp	r3, #64	; 0x40
 800587e:	d058      	beq.n	8005932 <HAL_TIM_ConfigClockSource+0x13a>
 8005880:	2b40      	cmp	r3, #64	; 0x40
 8005882:	d86f      	bhi.n	8005964 <HAL_TIM_ConfigClockSource+0x16c>
 8005884:	2b30      	cmp	r3, #48	; 0x30
 8005886:	d064      	beq.n	8005952 <HAL_TIM_ConfigClockSource+0x15a>
 8005888:	2b30      	cmp	r3, #48	; 0x30
 800588a:	d86b      	bhi.n	8005964 <HAL_TIM_ConfigClockSource+0x16c>
 800588c:	2b20      	cmp	r3, #32
 800588e:	d060      	beq.n	8005952 <HAL_TIM_ConfigClockSource+0x15a>
 8005890:	2b20      	cmp	r3, #32
 8005892:	d867      	bhi.n	8005964 <HAL_TIM_ConfigClockSource+0x16c>
 8005894:	2b00      	cmp	r3, #0
 8005896:	d05c      	beq.n	8005952 <HAL_TIM_ConfigClockSource+0x15a>
 8005898:	2b10      	cmp	r3, #16
 800589a:	d05a      	beq.n	8005952 <HAL_TIM_ConfigClockSource+0x15a>
 800589c:	e062      	b.n	8005964 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6818      	ldr	r0, [r3, #0]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	6899      	ldr	r1, [r3, #8]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	685a      	ldr	r2, [r3, #4]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f000 fd85 	bl	80063bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68ba      	ldr	r2, [r7, #8]
 80058c8:	609a      	str	r2, [r3, #8]
      break;
 80058ca:	e04f      	b.n	800596c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6818      	ldr	r0, [r3, #0]
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	6899      	ldr	r1, [r3, #8]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	f000 fd6e 	bl	80063bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689a      	ldr	r2, [r3, #8]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058ee:	609a      	str	r2, [r3, #8]
      break;
 80058f0:	e03c      	b.n	800596c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6818      	ldr	r0, [r3, #0]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	6859      	ldr	r1, [r3, #4]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	461a      	mov	r2, r3
 8005900:	f000 fc2c 	bl	800615c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2150      	movs	r1, #80	; 0x50
 800590a:	4618      	mov	r0, r3
 800590c:	f000 fd3b 	bl	8006386 <TIM_ITRx_SetConfig>
      break;
 8005910:	e02c      	b.n	800596c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6818      	ldr	r0, [r3, #0]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	6859      	ldr	r1, [r3, #4]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	461a      	mov	r2, r3
 8005920:	f000 fc88 	bl	8006234 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2160      	movs	r1, #96	; 0x60
 800592a:	4618      	mov	r0, r3
 800592c:	f000 fd2b 	bl	8006386 <TIM_ITRx_SetConfig>
      break;
 8005930:	e01c      	b.n	800596c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6818      	ldr	r0, [r3, #0]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	6859      	ldr	r1, [r3, #4]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	461a      	mov	r2, r3
 8005940:	f000 fc0c 	bl	800615c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2140      	movs	r1, #64	; 0x40
 800594a:	4618      	mov	r0, r3
 800594c:	f000 fd1b 	bl	8006386 <TIM_ITRx_SetConfig>
      break;
 8005950:	e00c      	b.n	800596c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4619      	mov	r1, r3
 800595c:	4610      	mov	r0, r2
 800595e:	f000 fd12 	bl	8006386 <TIM_ITRx_SetConfig>
      break;
 8005962:	e003      	b.n	800596c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	73fb      	strb	r3, [r7, #15]
      break;
 8005968:	e000      	b.n	800596c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800596a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800597c:	7bfb      	ldrb	r3, [r7, #15]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005986:	b480      	push	{r7}
 8005988:	b083      	sub	sp, #12
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800598e:	bf00      	nop
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800599a:	b480      	push	{r7}
 800599c:	b083      	sub	sp, #12
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059a2:	bf00      	nop
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b083      	sub	sp, #12
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059b6:	bf00      	nop
 80059b8:	370c      	adds	r7, #12
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr

080059c2 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80059c2:	b480      	push	{r7}
 80059c4:	b083      	sub	sp, #12
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80059ca:	bf00      	nop
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr

080059d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059d6:	b480      	push	{r7}
 80059d8:	b083      	sub	sp, #12
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059de:	bf00      	nop
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr

080059ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059ea:	b480      	push	{r7}
 80059ec:	b083      	sub	sp, #12
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059f2:	bf00      	nop
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b083      	sub	sp, #12
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005a06:	bf00      	nop
 8005a08:	370c      	adds	r7, #12
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b084      	sub	sp, #16
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d107      	bne.n	8005a3a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a38:	e02a      	b.n	8005a90 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d107      	bne.n	8005a54 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2202      	movs	r2, #2
 8005a48:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a52:	e01d      	b.n	8005a90 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d107      	bne.n	8005a6e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2204      	movs	r2, #4
 8005a62:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a6c:	e010      	b.n	8005a90 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d107      	bne.n	8005a88 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2208      	movs	r2, #8
 8005a7c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a86:	e003      	b.n	8005a90 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f7ff ffb4 	bl	80059fe <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	771a      	strb	r2, [r3, #28]
}
 8005a9c:	bf00      	nop
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d10f      	bne.n	8005adc <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	69db      	ldr	r3, [r3, #28]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d146      	bne.n	8005b58 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ada:	e03d      	b.n	8005b58 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d10f      	bne.n	8005b06 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2202      	movs	r2, #2
 8005aea:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	69db      	ldr	r3, [r3, #28]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d131      	bne.n	8005b58 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b04:	e028      	b.n	8005b58 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d10f      	bne.n	8005b30 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2204      	movs	r2, #4
 8005b14:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	69db      	ldr	r3, [r3, #28]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d11c      	bne.n	8005b58 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b2e:	e013      	b.n	8005b58 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d10e      	bne.n	8005b58 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2208      	movs	r2, #8
 8005b3e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	69db      	ldr	r3, [r3, #28]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d107      	bne.n	8005b58 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f7ff ff28 	bl	80059ae <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	771a      	strb	r2, [r3, #28]
}
 8005b64:	bf00      	nop
 8005b66:	3710      	adds	r7, #16
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b78:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d103      	bne.n	8005b8c <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2201      	movs	r2, #1
 8005b88:	771a      	strb	r2, [r3, #28]
 8005b8a:	e019      	b.n	8005bc0 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d103      	bne.n	8005b9e <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2202      	movs	r2, #2
 8005b9a:	771a      	strb	r2, [r3, #28]
 8005b9c:	e010      	b.n	8005bc0 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d103      	bne.n	8005bb0 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2204      	movs	r2, #4
 8005bac:	771a      	strb	r2, [r3, #28]
 8005bae:	e007      	b.n	8005bc0 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d102      	bne.n	8005bc0 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2208      	movs	r2, #8
 8005bbe:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	f7ff fefe 	bl	80059c2 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	771a      	strb	r2, [r3, #28]
}
 8005bcc:	bf00      	nop
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a40      	ldr	r2, [pc, #256]	; (8005ce8 <TIM_Base_SetConfig+0x114>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d013      	beq.n	8005c14 <TIM_Base_SetConfig+0x40>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bf2:	d00f      	beq.n	8005c14 <TIM_Base_SetConfig+0x40>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a3d      	ldr	r2, [pc, #244]	; (8005cec <TIM_Base_SetConfig+0x118>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d00b      	beq.n	8005c14 <TIM_Base_SetConfig+0x40>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a3c      	ldr	r2, [pc, #240]	; (8005cf0 <TIM_Base_SetConfig+0x11c>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d007      	beq.n	8005c14 <TIM_Base_SetConfig+0x40>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a3b      	ldr	r2, [pc, #236]	; (8005cf4 <TIM_Base_SetConfig+0x120>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d003      	beq.n	8005c14 <TIM_Base_SetConfig+0x40>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a3a      	ldr	r2, [pc, #232]	; (8005cf8 <TIM_Base_SetConfig+0x124>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d108      	bne.n	8005c26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a2f      	ldr	r2, [pc, #188]	; (8005ce8 <TIM_Base_SetConfig+0x114>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d02b      	beq.n	8005c86 <TIM_Base_SetConfig+0xb2>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c34:	d027      	beq.n	8005c86 <TIM_Base_SetConfig+0xb2>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a2c      	ldr	r2, [pc, #176]	; (8005cec <TIM_Base_SetConfig+0x118>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d023      	beq.n	8005c86 <TIM_Base_SetConfig+0xb2>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a2b      	ldr	r2, [pc, #172]	; (8005cf0 <TIM_Base_SetConfig+0x11c>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d01f      	beq.n	8005c86 <TIM_Base_SetConfig+0xb2>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a2a      	ldr	r2, [pc, #168]	; (8005cf4 <TIM_Base_SetConfig+0x120>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d01b      	beq.n	8005c86 <TIM_Base_SetConfig+0xb2>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a29      	ldr	r2, [pc, #164]	; (8005cf8 <TIM_Base_SetConfig+0x124>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d017      	beq.n	8005c86 <TIM_Base_SetConfig+0xb2>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a28      	ldr	r2, [pc, #160]	; (8005cfc <TIM_Base_SetConfig+0x128>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d013      	beq.n	8005c86 <TIM_Base_SetConfig+0xb2>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a27      	ldr	r2, [pc, #156]	; (8005d00 <TIM_Base_SetConfig+0x12c>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d00f      	beq.n	8005c86 <TIM_Base_SetConfig+0xb2>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a26      	ldr	r2, [pc, #152]	; (8005d04 <TIM_Base_SetConfig+0x130>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d00b      	beq.n	8005c86 <TIM_Base_SetConfig+0xb2>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a25      	ldr	r2, [pc, #148]	; (8005d08 <TIM_Base_SetConfig+0x134>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d007      	beq.n	8005c86 <TIM_Base_SetConfig+0xb2>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a24      	ldr	r2, [pc, #144]	; (8005d0c <TIM_Base_SetConfig+0x138>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d003      	beq.n	8005c86 <TIM_Base_SetConfig+0xb2>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a23      	ldr	r2, [pc, #140]	; (8005d10 <TIM_Base_SetConfig+0x13c>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d108      	bne.n	8005c98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	689a      	ldr	r2, [r3, #8]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a0a      	ldr	r2, [pc, #40]	; (8005ce8 <TIM_Base_SetConfig+0x114>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d003      	beq.n	8005ccc <TIM_Base_SetConfig+0xf8>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a0c      	ldr	r2, [pc, #48]	; (8005cf8 <TIM_Base_SetConfig+0x124>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d103      	bne.n	8005cd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	691a      	ldr	r2, [r3, #16]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	615a      	str	r2, [r3, #20]
}
 8005cda:	bf00      	nop
 8005cdc:	3714      	adds	r7, #20
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	40010000 	.word	0x40010000
 8005cec:	40000400 	.word	0x40000400
 8005cf0:	40000800 	.word	0x40000800
 8005cf4:	40000c00 	.word	0x40000c00
 8005cf8:	40010400 	.word	0x40010400
 8005cfc:	40014000 	.word	0x40014000
 8005d00:	40014400 	.word	0x40014400
 8005d04:	40014800 	.word	0x40014800
 8005d08:	40001800 	.word	0x40001800
 8005d0c:	40001c00 	.word	0x40001c00
 8005d10:	40002000 	.word	0x40002000

08005d14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b087      	sub	sp, #28
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	f023 0201 	bic.w	r2, r3, #1
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f023 0303 	bic.w	r3, r3, #3
 8005d4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	f023 0302 	bic.w	r3, r3, #2
 8005d5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a20      	ldr	r2, [pc, #128]	; (8005dec <TIM_OC1_SetConfig+0xd8>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d003      	beq.n	8005d78 <TIM_OC1_SetConfig+0x64>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a1f      	ldr	r2, [pc, #124]	; (8005df0 <TIM_OC1_SetConfig+0xdc>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d10c      	bne.n	8005d92 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	f023 0308 	bic.w	r3, r3, #8
 8005d7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	697a      	ldr	r2, [r7, #20]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	f023 0304 	bic.w	r3, r3, #4
 8005d90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a15      	ldr	r2, [pc, #84]	; (8005dec <TIM_OC1_SetConfig+0xd8>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d003      	beq.n	8005da2 <TIM_OC1_SetConfig+0x8e>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a14      	ldr	r2, [pc, #80]	; (8005df0 <TIM_OC1_SetConfig+0xdc>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d111      	bne.n	8005dc6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005da8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005db0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	685a      	ldr	r2, [r3, #4]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	621a      	str	r2, [r3, #32]
}
 8005de0:	bf00      	nop
 8005de2:	371c      	adds	r7, #28
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr
 8005dec:	40010000 	.word	0x40010000
 8005df0:	40010400 	.word	0x40010400

08005df4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b087      	sub	sp, #28
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	f023 0210 	bic.w	r2, r3, #16
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	021b      	lsls	r3, r3, #8
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	f023 0320 	bic.w	r3, r3, #32
 8005e3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	011b      	lsls	r3, r3, #4
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a22      	ldr	r2, [pc, #136]	; (8005ed8 <TIM_OC2_SetConfig+0xe4>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d003      	beq.n	8005e5c <TIM_OC2_SetConfig+0x68>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a21      	ldr	r2, [pc, #132]	; (8005edc <TIM_OC2_SetConfig+0xe8>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d10d      	bne.n	8005e78 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	011b      	lsls	r3, r3, #4
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a17      	ldr	r2, [pc, #92]	; (8005ed8 <TIM_OC2_SetConfig+0xe4>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d003      	beq.n	8005e88 <TIM_OC2_SetConfig+0x94>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a16      	ldr	r2, [pc, #88]	; (8005edc <TIM_OC2_SetConfig+0xe8>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d113      	bne.n	8005eb0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	695b      	ldr	r3, [r3, #20]
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	685a      	ldr	r2, [r3, #4]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	697a      	ldr	r2, [r7, #20]
 8005ec8:	621a      	str	r2, [r3, #32]
}
 8005eca:	bf00      	nop
 8005ecc:	371c      	adds	r7, #28
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	40010000 	.word	0x40010000
 8005edc:	40010400 	.word	0x40010400

08005ee0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b087      	sub	sp, #28
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	69db      	ldr	r3, [r3, #28]
 8005f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f023 0303 	bic.w	r3, r3, #3
 8005f16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	021b      	lsls	r3, r3, #8
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a21      	ldr	r2, [pc, #132]	; (8005fc0 <TIM_OC3_SetConfig+0xe0>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d003      	beq.n	8005f46 <TIM_OC3_SetConfig+0x66>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a20      	ldr	r2, [pc, #128]	; (8005fc4 <TIM_OC3_SetConfig+0xe4>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d10d      	bne.n	8005f62 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	021b      	lsls	r3, r3, #8
 8005f54:	697a      	ldr	r2, [r7, #20]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a16      	ldr	r2, [pc, #88]	; (8005fc0 <TIM_OC3_SetConfig+0xe0>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d003      	beq.n	8005f72 <TIM_OC3_SetConfig+0x92>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a15      	ldr	r2, [pc, #84]	; (8005fc4 <TIM_OC3_SetConfig+0xe4>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d113      	bne.n	8005f9a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	011b      	lsls	r3, r3, #4
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	699b      	ldr	r3, [r3, #24]
 8005f92:	011b      	lsls	r3, r3, #4
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	685a      	ldr	r2, [r3, #4]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	621a      	str	r2, [r3, #32]
}
 8005fb4:	bf00      	nop
 8005fb6:	371c      	adds	r7, #28
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr
 8005fc0:	40010000 	.word	0x40010000
 8005fc4:	40010400 	.word	0x40010400

08005fc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b087      	sub	sp, #28
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
 8005fd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a1b      	ldr	r3, [r3, #32]
 8005fe2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	69db      	ldr	r3, [r3, #28]
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	021b      	lsls	r3, r3, #8
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	4313      	orrs	r3, r2
 800600a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006012:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	031b      	lsls	r3, r3, #12
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	4313      	orrs	r3, r2
 800601e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a12      	ldr	r2, [pc, #72]	; (800606c <TIM_OC4_SetConfig+0xa4>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d003      	beq.n	8006030 <TIM_OC4_SetConfig+0x68>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a11      	ldr	r2, [pc, #68]	; (8006070 <TIM_OC4_SetConfig+0xa8>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d109      	bne.n	8006044 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006036:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	695b      	ldr	r3, [r3, #20]
 800603c:	019b      	lsls	r3, r3, #6
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	4313      	orrs	r3, r2
 8006042:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	697a      	ldr	r2, [r7, #20]
 8006048:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	685a      	ldr	r2, [r3, #4]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	693a      	ldr	r2, [r7, #16]
 800605c:	621a      	str	r2, [r3, #32]
}
 800605e:	bf00      	nop
 8006060:	371c      	adds	r7, #28
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	40010000 	.word	0x40010000
 8006070:	40010400 	.word	0x40010400

08006074 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006074:	b480      	push	{r7}
 8006076:	b087      	sub	sp, #28
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]
 8006080:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	f023 0201 	bic.w	r2, r3, #1
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6a1b      	ldr	r3, [r3, #32]
 8006098:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	4a28      	ldr	r2, [pc, #160]	; (8006140 <TIM_TI1_SetConfig+0xcc>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d01b      	beq.n	80060da <TIM_TI1_SetConfig+0x66>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060a8:	d017      	beq.n	80060da <TIM_TI1_SetConfig+0x66>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	4a25      	ldr	r2, [pc, #148]	; (8006144 <TIM_TI1_SetConfig+0xd0>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d013      	beq.n	80060da <TIM_TI1_SetConfig+0x66>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	4a24      	ldr	r2, [pc, #144]	; (8006148 <TIM_TI1_SetConfig+0xd4>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d00f      	beq.n	80060da <TIM_TI1_SetConfig+0x66>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	4a23      	ldr	r2, [pc, #140]	; (800614c <TIM_TI1_SetConfig+0xd8>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d00b      	beq.n	80060da <TIM_TI1_SetConfig+0x66>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	4a22      	ldr	r2, [pc, #136]	; (8006150 <TIM_TI1_SetConfig+0xdc>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d007      	beq.n	80060da <TIM_TI1_SetConfig+0x66>
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	4a21      	ldr	r2, [pc, #132]	; (8006154 <TIM_TI1_SetConfig+0xe0>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d003      	beq.n	80060da <TIM_TI1_SetConfig+0x66>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	4a20      	ldr	r2, [pc, #128]	; (8006158 <TIM_TI1_SetConfig+0xe4>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d101      	bne.n	80060de <TIM_TI1_SetConfig+0x6a>
 80060da:	2301      	movs	r3, #1
 80060dc:	e000      	b.n	80060e0 <TIM_TI1_SetConfig+0x6c>
 80060de:	2300      	movs	r3, #0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d008      	beq.n	80060f6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	f023 0303 	bic.w	r3, r3, #3
 80060ea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	617b      	str	r3, [r7, #20]
 80060f4:	e003      	b.n	80060fe <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	f043 0301 	orr.w	r3, r3, #1
 80060fc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006104:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	011b      	lsls	r3, r3, #4
 800610a:	b2db      	uxtb	r3, r3
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	4313      	orrs	r3, r2
 8006110:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	f023 030a 	bic.w	r3, r3, #10
 8006118:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	f003 030a 	and.w	r3, r3, #10
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	4313      	orrs	r3, r2
 8006124:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	621a      	str	r2, [r3, #32]
}
 8006132:	bf00      	nop
 8006134:	371c      	adds	r7, #28
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	40010000 	.word	0x40010000
 8006144:	40000400 	.word	0x40000400
 8006148:	40000800 	.word	0x40000800
 800614c:	40000c00 	.word	0x40000c00
 8006150:	40010400 	.word	0x40010400
 8006154:	40014000 	.word	0x40014000
 8006158:	40001800 	.word	0x40001800

0800615c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6a1b      	ldr	r3, [r3, #32]
 800616c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	f023 0201 	bic.w	r2, r3, #1
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006186:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	011b      	lsls	r3, r3, #4
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	4313      	orrs	r3, r2
 8006190:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	f023 030a 	bic.w	r3, r3, #10
 8006198:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	4313      	orrs	r3, r2
 80061a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	621a      	str	r2, [r3, #32]
}
 80061ae:	bf00      	nop
 80061b0:	371c      	adds	r7, #28
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b087      	sub	sp, #28
 80061be:	af00      	add	r7, sp, #0
 80061c0:	60f8      	str	r0, [r7, #12]
 80061c2:	60b9      	str	r1, [r7, #8]
 80061c4:	607a      	str	r2, [r7, #4]
 80061c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	f023 0210 	bic.w	r2, r3, #16
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	699b      	ldr	r3, [r3, #24]
 80061d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6a1b      	ldr	r3, [r3, #32]
 80061de:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	021b      	lsls	r3, r3, #8
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	031b      	lsls	r3, r3, #12
 80061fe:	b29b      	uxth	r3, r3
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	4313      	orrs	r3, r2
 8006204:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800620c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	011b      	lsls	r3, r3, #4
 8006212:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006216:	693a      	ldr	r2, [r7, #16]
 8006218:	4313      	orrs	r3, r2
 800621a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	693a      	ldr	r2, [r7, #16]
 8006226:	621a      	str	r2, [r3, #32]
}
 8006228:	bf00      	nop
 800622a:	371c      	adds	r7, #28
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006234:	b480      	push	{r7}
 8006236:	b087      	sub	sp, #28
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6a1b      	ldr	r3, [r3, #32]
 8006244:	f023 0210 	bic.w	r2, r3, #16
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6a1b      	ldr	r3, [r3, #32]
 8006256:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800625e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	031b      	lsls	r3, r3, #12
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	4313      	orrs	r3, r2
 8006268:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006270:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	011b      	lsls	r3, r3, #4
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	4313      	orrs	r3, r2
 800627a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	621a      	str	r2, [r3, #32]
}
 8006288:	bf00      	nop
 800628a:	371c      	adds	r7, #28
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006294:	b480      	push	{r7}
 8006296:	b087      	sub	sp, #28
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
 80062a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	69db      	ldr	r3, [r3, #28]
 80062b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6a1b      	ldr	r3, [r3, #32]
 80062b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	f023 0303 	bic.w	r3, r3, #3
 80062c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062d0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	011b      	lsls	r3, r3, #4
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	697a      	ldr	r2, [r7, #20]
 80062da:	4313      	orrs	r3, r2
 80062dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80062e4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	021b      	lsls	r3, r3, #8
 80062ea:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80062ee:	693a      	ldr	r2, [r7, #16]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	621a      	str	r2, [r3, #32]
}
 8006300:	bf00      	nop
 8006302:	371c      	adds	r7, #28
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800630c:	b480      	push	{r7}
 800630e:	b087      	sub	sp, #28
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
 8006318:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6a1b      	ldr	r3, [r3, #32]
 8006330:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006338:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	021b      	lsls	r3, r3, #8
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	4313      	orrs	r3, r2
 8006342:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800634a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	031b      	lsls	r3, r3, #12
 8006350:	b29b      	uxth	r3, r3
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	4313      	orrs	r3, r2
 8006356:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800635e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	031b      	lsls	r3, r3, #12
 8006364:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	4313      	orrs	r3, r2
 800636c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	697a      	ldr	r2, [r7, #20]
 8006372:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	621a      	str	r2, [r3, #32]
}
 800637a:	bf00      	nop
 800637c:	371c      	adds	r7, #28
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr

08006386 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006386:	b480      	push	{r7}
 8006388:	b085      	sub	sp, #20
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
 800638e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800639c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	f043 0307 	orr.w	r3, r3, #7
 80063a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	609a      	str	r2, [r3, #8]
}
 80063b0:	bf00      	nop
 80063b2:	3714      	adds	r7, #20
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063bc:	b480      	push	{r7}
 80063be:	b087      	sub	sp, #28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
 80063c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	021a      	lsls	r2, r3, #8
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	431a      	orrs	r2, r3
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	697a      	ldr	r2, [r7, #20]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	697a      	ldr	r2, [r7, #20]
 80063ee:	609a      	str	r2, [r3, #8]
}
 80063f0:	bf00      	nop
 80063f2:	371c      	adds	r7, #28
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b087      	sub	sp, #28
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	f003 031f 	and.w	r3, r3, #31
 800640e:	2201      	movs	r2, #1
 8006410:	fa02 f303 	lsl.w	r3, r2, r3
 8006414:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6a1a      	ldr	r2, [r3, #32]
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	43db      	mvns	r3, r3
 800641e:	401a      	ands	r2, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6a1a      	ldr	r2, [r3, #32]
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	f003 031f 	and.w	r3, r3, #31
 800642e:	6879      	ldr	r1, [r7, #4]
 8006430:	fa01 f303 	lsl.w	r3, r1, r3
 8006434:	431a      	orrs	r2, r3
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	621a      	str	r2, [r3, #32]
}
 800643a:	bf00      	nop
 800643c:	371c      	adds	r7, #28
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
	...

08006448 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006458:	2b01      	cmp	r3, #1
 800645a:	d101      	bne.n	8006460 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800645c:	2302      	movs	r3, #2
 800645e:	e05a      	b.n	8006516 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2202      	movs	r2, #2
 800646c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006486:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	4313      	orrs	r3, r2
 8006490:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a21      	ldr	r2, [pc, #132]	; (8006524 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d022      	beq.n	80064ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ac:	d01d      	beq.n	80064ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a1d      	ldr	r2, [pc, #116]	; (8006528 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d018      	beq.n	80064ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a1b      	ldr	r2, [pc, #108]	; (800652c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d013      	beq.n	80064ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a1a      	ldr	r2, [pc, #104]	; (8006530 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d00e      	beq.n	80064ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a18      	ldr	r2, [pc, #96]	; (8006534 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d009      	beq.n	80064ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a17      	ldr	r2, [pc, #92]	; (8006538 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d004      	beq.n	80064ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a15      	ldr	r2, [pc, #84]	; (800653c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d10c      	bne.n	8006504 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	68ba      	ldr	r2, [r7, #8]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	40010000 	.word	0x40010000
 8006528:	40000400 	.word	0x40000400
 800652c:	40000800 	.word	0x40000800
 8006530:	40000c00 	.word	0x40000c00
 8006534:	40010400 	.word	0x40010400
 8006538:	40014000 	.word	0x40014000
 800653c:	40001800 	.word	0x40001800

08006540 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800654a:	2300      	movs	r3, #0
 800654c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006554:	2b01      	cmp	r3, #1
 8006556:	d101      	bne.n	800655c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006558:	2302      	movs	r3, #2
 800655a:	e03d      	b.n	80065d8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	4313      	orrs	r3, r2
 8006570:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	4313      	orrs	r3, r2
 800657e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	4313      	orrs	r3, r2
 800658c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4313      	orrs	r3, r2
 800659a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	695b      	ldr	r3, [r3, #20]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	69db      	ldr	r3, [r3, #28]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3714      	adds	r7, #20
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065ec:	bf00      	nop
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006600:	bf00      	nop
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d101      	bne.n	800661e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e03f      	b.n	800669e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006624:	b2db      	uxtb	r3, r3
 8006626:	2b00      	cmp	r3, #0
 8006628:	d106      	bne.n	8006638 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f7fb fedc 	bl	80023f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2224      	movs	r2, #36	; 0x24
 800663c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68da      	ldr	r2, [r3, #12]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800664e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 fddf 	bl	8007214 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	691a      	ldr	r2, [r3, #16]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006664:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	695a      	ldr	r2, [r3, #20]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006674:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68da      	ldr	r2, [r3, #12]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006684:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2220      	movs	r2, #32
 8006690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2220      	movs	r2, #32
 8006698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3708      	adds	r7, #8
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b08a      	sub	sp, #40	; 0x28
 80066aa:	af02      	add	r7, sp, #8
 80066ac:	60f8      	str	r0, [r7, #12]
 80066ae:	60b9      	str	r1, [r7, #8]
 80066b0:	603b      	str	r3, [r7, #0]
 80066b2:	4613      	mov	r3, r2
 80066b4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80066b6:	2300      	movs	r3, #0
 80066b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b20      	cmp	r3, #32
 80066c4:	d17c      	bne.n	80067c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d002      	beq.n	80066d2 <HAL_UART_Transmit+0x2c>
 80066cc:	88fb      	ldrh	r3, [r7, #6]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d101      	bne.n	80066d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e075      	b.n	80067c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d101      	bne.n	80066e4 <HAL_UART_Transmit+0x3e>
 80066e0:	2302      	movs	r3, #2
 80066e2:	e06e      	b.n	80067c2 <HAL_UART_Transmit+0x11c>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2221      	movs	r2, #33	; 0x21
 80066f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066fa:	f7fc f94b 	bl	8002994 <HAL_GetTick>
 80066fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	88fa      	ldrh	r2, [r7, #6]
 8006704:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	88fa      	ldrh	r2, [r7, #6]
 800670a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006714:	d108      	bne.n	8006728 <HAL_UART_Transmit+0x82>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d104      	bne.n	8006728 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800671e:	2300      	movs	r3, #0
 8006720:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	61bb      	str	r3, [r7, #24]
 8006726:	e003      	b.n	8006730 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800672c:	2300      	movs	r3, #0
 800672e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006738:	e02a      	b.n	8006790 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	9300      	str	r3, [sp, #0]
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	2200      	movs	r2, #0
 8006742:	2180      	movs	r1, #128	; 0x80
 8006744:	68f8      	ldr	r0, [r7, #12]
 8006746:	f000 fb1f 	bl	8006d88 <UART_WaitOnFlagUntilTimeout>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d001      	beq.n	8006754 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	e036      	b.n	80067c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10b      	bne.n	8006772 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	881b      	ldrh	r3, [r3, #0]
 800675e:	461a      	mov	r2, r3
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006768:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	3302      	adds	r3, #2
 800676e:	61bb      	str	r3, [r7, #24]
 8006770:	e007      	b.n	8006782 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	781a      	ldrb	r2, [r3, #0]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	3301      	adds	r3, #1
 8006780:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006786:	b29b      	uxth	r3, r3
 8006788:	3b01      	subs	r3, #1
 800678a:	b29a      	uxth	r2, r3
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006794:	b29b      	uxth	r3, r3
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1cf      	bne.n	800673a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	9300      	str	r3, [sp, #0]
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	2200      	movs	r2, #0
 80067a2:	2140      	movs	r1, #64	; 0x40
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f000 faef 	bl	8006d88 <UART_WaitOnFlagUntilTimeout>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d001      	beq.n	80067b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e006      	b.n	80067c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2220      	movs	r2, #32
 80067b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80067bc:	2300      	movs	r3, #0
 80067be:	e000      	b.n	80067c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80067c0:	2302      	movs	r3, #2
  }
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3720      	adds	r7, #32
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b084      	sub	sp, #16
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	60f8      	str	r0, [r7, #12]
 80067d2:	60b9      	str	r1, [r7, #8]
 80067d4:	4613      	mov	r3, r2
 80067d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	2b20      	cmp	r3, #32
 80067e2:	d11d      	bne.n	8006820 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d002      	beq.n	80067f0 <HAL_UART_Receive_IT+0x26>
 80067ea:	88fb      	ldrh	r3, [r7, #6]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d101      	bne.n	80067f4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e016      	b.n	8006822 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d101      	bne.n	8006802 <HAL_UART_Receive_IT+0x38>
 80067fe:	2302      	movs	r3, #2
 8006800:	e00f      	b.n	8006822 <HAL_UART_Receive_IT+0x58>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2201      	movs	r2, #1
 8006806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006810:	88fb      	ldrh	r3, [r7, #6]
 8006812:	461a      	mov	r2, r3
 8006814:	68b9      	ldr	r1, [r7, #8]
 8006816:	68f8      	ldr	r0, [r7, #12]
 8006818:	f000 fb24 	bl	8006e64 <UART_Start_Receive_IT>
 800681c:	4603      	mov	r3, r0
 800681e:	e000      	b.n	8006822 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006820:	2302      	movs	r3, #2
  }
}
 8006822:	4618      	mov	r0, r3
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
	...

0800682c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b0ba      	sub	sp, #232	; 0xe8
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	695b      	ldr	r3, [r3, #20]
 800684e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006852:	2300      	movs	r3, #0
 8006854:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006858:	2300      	movs	r3, #0
 800685a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800685e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006862:	f003 030f 	and.w	r3, r3, #15
 8006866:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800686a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10f      	bne.n	8006892 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006876:	f003 0320 	and.w	r3, r3, #32
 800687a:	2b00      	cmp	r3, #0
 800687c:	d009      	beq.n	8006892 <HAL_UART_IRQHandler+0x66>
 800687e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006882:	f003 0320 	and.w	r3, r3, #32
 8006886:	2b00      	cmp	r3, #0
 8006888:	d003      	beq.n	8006892 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 fc07 	bl	800709e <UART_Receive_IT>
      return;
 8006890:	e256      	b.n	8006d40 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006892:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006896:	2b00      	cmp	r3, #0
 8006898:	f000 80de 	beq.w	8006a58 <HAL_UART_IRQHandler+0x22c>
 800689c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068a0:	f003 0301 	and.w	r3, r3, #1
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d106      	bne.n	80068b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80068a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f000 80d1 	beq.w	8006a58 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80068b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ba:	f003 0301 	and.w	r3, r3, #1
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00b      	beq.n	80068da <HAL_UART_IRQHandler+0xae>
 80068c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d005      	beq.n	80068da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d2:	f043 0201 	orr.w	r2, r3, #1
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068de:	f003 0304 	and.w	r3, r3, #4
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d00b      	beq.n	80068fe <HAL_UART_IRQHandler+0xd2>
 80068e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068ea:	f003 0301 	and.w	r3, r3, #1
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d005      	beq.n	80068fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f6:	f043 0202 	orr.w	r2, r3, #2
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006902:	f003 0302 	and.w	r3, r3, #2
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00b      	beq.n	8006922 <HAL_UART_IRQHandler+0xf6>
 800690a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800690e:	f003 0301 	and.w	r3, r3, #1
 8006912:	2b00      	cmp	r3, #0
 8006914:	d005      	beq.n	8006922 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691a:	f043 0204 	orr.w	r2, r3, #4
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006926:	f003 0308 	and.w	r3, r3, #8
 800692a:	2b00      	cmp	r3, #0
 800692c:	d011      	beq.n	8006952 <HAL_UART_IRQHandler+0x126>
 800692e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006932:	f003 0320 	and.w	r3, r3, #32
 8006936:	2b00      	cmp	r3, #0
 8006938:	d105      	bne.n	8006946 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800693a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800693e:	f003 0301 	and.w	r3, r3, #1
 8006942:	2b00      	cmp	r3, #0
 8006944:	d005      	beq.n	8006952 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694a:	f043 0208 	orr.w	r2, r3, #8
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006956:	2b00      	cmp	r3, #0
 8006958:	f000 81ed 	beq.w	8006d36 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800695c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006960:	f003 0320 	and.w	r3, r3, #32
 8006964:	2b00      	cmp	r3, #0
 8006966:	d008      	beq.n	800697a <HAL_UART_IRQHandler+0x14e>
 8006968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800696c:	f003 0320 	and.w	r3, r3, #32
 8006970:	2b00      	cmp	r3, #0
 8006972:	d002      	beq.n	800697a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 fb92 	bl	800709e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	695b      	ldr	r3, [r3, #20]
 8006980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006984:	2b40      	cmp	r3, #64	; 0x40
 8006986:	bf0c      	ite	eq
 8006988:	2301      	moveq	r3, #1
 800698a:	2300      	movne	r3, #0
 800698c:	b2db      	uxtb	r3, r3
 800698e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006996:	f003 0308 	and.w	r3, r3, #8
 800699a:	2b00      	cmp	r3, #0
 800699c:	d103      	bne.n	80069a6 <HAL_UART_IRQHandler+0x17a>
 800699e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d04f      	beq.n	8006a46 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 fa9a 	bl	8006ee0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	695b      	ldr	r3, [r3, #20]
 80069b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069b6:	2b40      	cmp	r3, #64	; 0x40
 80069b8:	d141      	bne.n	8006a3e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	3314      	adds	r3, #20
 80069c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069c8:	e853 3f00 	ldrex	r3, [r3]
 80069cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80069d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	3314      	adds	r3, #20
 80069e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80069e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80069ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80069f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80069f6:	e841 2300 	strex	r3, r2, [r1]
 80069fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80069fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1d9      	bne.n	80069ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d013      	beq.n	8006a36 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a12:	4a7d      	ldr	r2, [pc, #500]	; (8006c08 <HAL_UART_IRQHandler+0x3dc>)
 8006a14:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7fc fcf2 	bl	8003404 <HAL_DMA_Abort_IT>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d016      	beq.n	8006a54 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a30:	4610      	mov	r0, r2
 8006a32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a34:	e00e      	b.n	8006a54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 f990 	bl	8006d5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a3c:	e00a      	b.n	8006a54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f98c 	bl	8006d5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a44:	e006      	b.n	8006a54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 f988 	bl	8006d5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006a52:	e170      	b.n	8006d36 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a54:	bf00      	nop
    return;
 8006a56:	e16e      	b.n	8006d36 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	f040 814a 	bne.w	8006cf6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a66:	f003 0310 	and.w	r3, r3, #16
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f000 8143 	beq.w	8006cf6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a74:	f003 0310 	and.w	r3, r3, #16
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f000 813c 	beq.w	8006cf6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a7e:	2300      	movs	r3, #0
 8006a80:	60bb      	str	r3, [r7, #8]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	60bb      	str	r3, [r7, #8]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	60bb      	str	r3, [r7, #8]
 8006a92:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	695b      	ldr	r3, [r3, #20]
 8006a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a9e:	2b40      	cmp	r3, #64	; 0x40
 8006aa0:	f040 80b4 	bne.w	8006c0c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ab0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	f000 8140 	beq.w	8006d3a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006abe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	f080 8139 	bcs.w	8006d3a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ace:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad4:	69db      	ldr	r3, [r3, #28]
 8006ad6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ada:	f000 8088 	beq.w	8006bee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	330c      	adds	r3, #12
 8006ae4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006aec:	e853 3f00 	ldrex	r3, [r3]
 8006af0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006af4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006af8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006afc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	330c      	adds	r3, #12
 8006b06:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006b0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b12:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006b16:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006b1a:	e841 2300 	strex	r3, r2, [r1]
 8006b1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006b22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1d9      	bne.n	8006ade <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	3314      	adds	r3, #20
 8006b30:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b34:	e853 3f00 	ldrex	r3, [r3]
 8006b38:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b3c:	f023 0301 	bic.w	r3, r3, #1
 8006b40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	3314      	adds	r3, #20
 8006b4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b4e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006b52:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b54:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b56:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b5a:	e841 2300 	strex	r3, r2, [r1]
 8006b5e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1e1      	bne.n	8006b2a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	3314      	adds	r3, #20
 8006b6c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b70:	e853 3f00 	ldrex	r3, [r3]
 8006b74:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	3314      	adds	r3, #20
 8006b86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b8c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006b90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b92:	e841 2300 	strex	r3, r2, [r1]
 8006b96:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006b98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1e3      	bne.n	8006b66 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	330c      	adds	r3, #12
 8006bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bb6:	e853 3f00 	ldrex	r3, [r3]
 8006bba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006bbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bbe:	f023 0310 	bic.w	r3, r3, #16
 8006bc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	330c      	adds	r3, #12
 8006bcc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006bd0:	65ba      	str	r2, [r7, #88]	; 0x58
 8006bd2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006bd6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006bd8:	e841 2300 	strex	r3, r2, [r1]
 8006bdc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d1e3      	bne.n	8006bac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7fc fb9b 	bl	8003324 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f8b6 	bl	8006d70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c04:	e099      	b.n	8006d3a <HAL_UART_IRQHandler+0x50e>
 8006c06:	bf00      	nop
 8006c08:	08006fa7 	.word	0x08006fa7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	f000 808b 	beq.w	8006d3e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006c28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f000 8086 	beq.w	8006d3e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	330c      	adds	r3, #12
 8006c38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3c:	e853 3f00 	ldrex	r3, [r3]
 8006c40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	330c      	adds	r3, #12
 8006c52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006c56:	647a      	str	r2, [r7, #68]	; 0x44
 8006c58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c5e:	e841 2300 	strex	r3, r2, [r1]
 8006c62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1e3      	bne.n	8006c32 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	3314      	adds	r3, #20
 8006c70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c74:	e853 3f00 	ldrex	r3, [r3]
 8006c78:	623b      	str	r3, [r7, #32]
   return(result);
 8006c7a:	6a3b      	ldr	r3, [r7, #32]
 8006c7c:	f023 0301 	bic.w	r3, r3, #1
 8006c80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	3314      	adds	r3, #20
 8006c8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006c8e:	633a      	str	r2, [r7, #48]	; 0x30
 8006c90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c96:	e841 2300 	strex	r3, r2, [r1]
 8006c9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d1e3      	bne.n	8006c6a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2220      	movs	r2, #32
 8006ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	330c      	adds	r3, #12
 8006cb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	e853 3f00 	ldrex	r3, [r3]
 8006cbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f023 0310 	bic.w	r3, r3, #16
 8006cc6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	330c      	adds	r3, #12
 8006cd0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006cd4:	61fa      	str	r2, [r7, #28]
 8006cd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd8:	69b9      	ldr	r1, [r7, #24]
 8006cda:	69fa      	ldr	r2, [r7, #28]
 8006cdc:	e841 2300 	strex	r3, r2, [r1]
 8006ce0:	617b      	str	r3, [r7, #20]
   return(result);
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1e3      	bne.n	8006cb0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ce8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006cec:	4619      	mov	r1, r3
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 f83e 	bl	8006d70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006cf4:	e023      	b.n	8006d3e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d009      	beq.n	8006d16 <HAL_UART_IRQHandler+0x4ea>
 8006d02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d003      	beq.n	8006d16 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f95d 	bl	8006fce <UART_Transmit_IT>
    return;
 8006d14:	e014      	b.n	8006d40 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00e      	beq.n	8006d40 <HAL_UART_IRQHandler+0x514>
 8006d22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d008      	beq.n	8006d40 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 f99d 	bl	800706e <UART_EndTransmit_IT>
    return;
 8006d34:	e004      	b.n	8006d40 <HAL_UART_IRQHandler+0x514>
    return;
 8006d36:	bf00      	nop
 8006d38:	e002      	b.n	8006d40 <HAL_UART_IRQHandler+0x514>
      return;
 8006d3a:	bf00      	nop
 8006d3c:	e000      	b.n	8006d40 <HAL_UART_IRQHandler+0x514>
      return;
 8006d3e:	bf00      	nop
  }
}
 8006d40:	37e8      	adds	r7, #232	; 0xe8
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop

08006d48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d50:	bf00      	nop
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d64:	bf00      	nop
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	460b      	mov	r3, r1
 8006d7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d7c:	bf00      	nop
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b090      	sub	sp, #64	; 0x40
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	603b      	str	r3, [r7, #0]
 8006d94:	4613      	mov	r3, r2
 8006d96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d98:	e050      	b.n	8006e3c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da0:	d04c      	beq.n	8006e3c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d007      	beq.n	8006db8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006da8:	f7fb fdf4 	bl	8002994 <HAL_GetTick>
 8006dac:	4602      	mov	r2, r0
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d241      	bcs.n	8006e3c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	330c      	adds	r3, #12
 8006dbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc2:	e853 3f00 	ldrex	r3, [r3]
 8006dc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006dce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	330c      	adds	r3, #12
 8006dd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006dd8:	637a      	str	r2, [r7, #52]	; 0x34
 8006dda:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ddc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006dde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006de0:	e841 2300 	strex	r3, r2, [r1]
 8006de4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1e5      	bne.n	8006db8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	3314      	adds	r3, #20
 8006df2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	e853 3f00 	ldrex	r3, [r3]
 8006dfa:	613b      	str	r3, [r7, #16]
   return(result);
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	f023 0301 	bic.w	r3, r3, #1
 8006e02:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	3314      	adds	r3, #20
 8006e0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e0c:	623a      	str	r2, [r7, #32]
 8006e0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e10:	69f9      	ldr	r1, [r7, #28]
 8006e12:	6a3a      	ldr	r2, [r7, #32]
 8006e14:	e841 2300 	strex	r3, r2, [r1]
 8006e18:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1e5      	bne.n	8006dec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2220      	movs	r2, #32
 8006e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2220      	movs	r2, #32
 8006e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006e38:	2303      	movs	r3, #3
 8006e3a:	e00f      	b.n	8006e5c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	4013      	ands	r3, r2
 8006e46:	68ba      	ldr	r2, [r7, #8]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	bf0c      	ite	eq
 8006e4c:	2301      	moveq	r3, #1
 8006e4e:	2300      	movne	r3, #0
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	461a      	mov	r2, r3
 8006e54:	79fb      	ldrb	r3, [r7, #7]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d09f      	beq.n	8006d9a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e5a:	2300      	movs	r3, #0
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3740      	adds	r7, #64	; 0x40
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b085      	sub	sp, #20
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	4613      	mov	r3, r2
 8006e70:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	88fa      	ldrh	r2, [r7, #6]
 8006e7c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	88fa      	ldrh	r2, [r7, #6]
 8006e82:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2200      	movs	r2, #0
 8006e88:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2222      	movs	r2, #34	; 0x22
 8006e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d007      	beq.n	8006eb2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68da      	ldr	r2, [r3, #12]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006eb0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	695a      	ldr	r2, [r3, #20]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f042 0201 	orr.w	r2, r2, #1
 8006ec0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68da      	ldr	r2, [r3, #12]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f042 0220 	orr.w	r2, r2, #32
 8006ed0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3714      	adds	r7, #20
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b095      	sub	sp, #84	; 0x54
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	330c      	adds	r3, #12
 8006eee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ef2:	e853 3f00 	ldrex	r3, [r3]
 8006ef6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006efe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	330c      	adds	r3, #12
 8006f06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f08:	643a      	str	r2, [r7, #64]	; 0x40
 8006f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f10:	e841 2300 	strex	r3, r2, [r1]
 8006f14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1e5      	bne.n	8006ee8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	3314      	adds	r3, #20
 8006f22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f24:	6a3b      	ldr	r3, [r7, #32]
 8006f26:	e853 3f00 	ldrex	r3, [r3]
 8006f2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	f023 0301 	bic.w	r3, r3, #1
 8006f32:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	3314      	adds	r3, #20
 8006f3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f44:	e841 2300 	strex	r3, r2, [r1]
 8006f48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1e5      	bne.n	8006f1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d119      	bne.n	8006f8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	330c      	adds	r3, #12
 8006f5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	e853 3f00 	ldrex	r3, [r3]
 8006f66:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	f023 0310 	bic.w	r3, r3, #16
 8006f6e:	647b      	str	r3, [r7, #68]	; 0x44
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	330c      	adds	r3, #12
 8006f76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f78:	61ba      	str	r2, [r7, #24]
 8006f7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7c:	6979      	ldr	r1, [r7, #20]
 8006f7e:	69ba      	ldr	r2, [r7, #24]
 8006f80:	e841 2300 	strex	r3, r2, [r1]
 8006f84:	613b      	str	r3, [r7, #16]
   return(result);
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1e5      	bne.n	8006f58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2220      	movs	r2, #32
 8006f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006f9a:	bf00      	nop
 8006f9c:	3754      	adds	r7, #84	; 0x54
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr

08006fa6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b084      	sub	sp, #16
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f7ff fecb 	bl	8006d5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fc6:	bf00      	nop
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006fce:	b480      	push	{r7}
 8006fd0:	b085      	sub	sp, #20
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	2b21      	cmp	r3, #33	; 0x21
 8006fe0:	d13e      	bne.n	8007060 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fea:	d114      	bne.n	8007016 <UART_Transmit_IT+0x48>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d110      	bne.n	8007016 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a1b      	ldr	r3, [r3, #32]
 8006ff8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	881b      	ldrh	r3, [r3, #0]
 8006ffe:	461a      	mov	r2, r3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007008:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a1b      	ldr	r3, [r3, #32]
 800700e:	1c9a      	adds	r2, r3, #2
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	621a      	str	r2, [r3, #32]
 8007014:	e008      	b.n	8007028 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	1c59      	adds	r1, r3, #1
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	6211      	str	r1, [r2, #32]
 8007020:	781a      	ldrb	r2, [r3, #0]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800702c:	b29b      	uxth	r3, r3
 800702e:	3b01      	subs	r3, #1
 8007030:	b29b      	uxth	r3, r3
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	4619      	mov	r1, r3
 8007036:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10f      	bne.n	800705c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68da      	ldr	r2, [r3, #12]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800704a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68da      	ldr	r2, [r3, #12]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800705a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800705c:	2300      	movs	r3, #0
 800705e:	e000      	b.n	8007062 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007060:	2302      	movs	r3, #2
  }
}
 8007062:	4618      	mov	r0, r3
 8007064:	3714      	adds	r7, #20
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr

0800706e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b082      	sub	sp, #8
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68da      	ldr	r2, [r3, #12]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007084:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2220      	movs	r2, #32
 800708a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f7ff fe5a 	bl	8006d48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3708      	adds	r7, #8
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b08c      	sub	sp, #48	; 0x30
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	2b22      	cmp	r3, #34	; 0x22
 80070b0:	f040 80ab 	bne.w	800720a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070bc:	d117      	bne.n	80070ee <UART_Receive_IT+0x50>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d113      	bne.n	80070ee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80070c6:	2300      	movs	r3, #0
 80070c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070dc:	b29a      	uxth	r2, r3
 80070de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e6:	1c9a      	adds	r2, r3, #2
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	629a      	str	r2, [r3, #40]	; 0x28
 80070ec:	e026      	b.n	800713c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80070f4:	2300      	movs	r3, #0
 80070f6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007100:	d007      	beq.n	8007112 <UART_Receive_IT+0x74>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d10a      	bne.n	8007120 <UART_Receive_IT+0x82>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d106      	bne.n	8007120 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	b2da      	uxtb	r2, r3
 800711a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711c:	701a      	strb	r2, [r3, #0]
 800711e:	e008      	b.n	8007132 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	b2db      	uxtb	r3, r3
 8007128:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800712c:	b2da      	uxtb	r2, r3
 800712e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007130:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007136:	1c5a      	adds	r2, r3, #1
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007140:	b29b      	uxth	r3, r3
 8007142:	3b01      	subs	r3, #1
 8007144:	b29b      	uxth	r3, r3
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	4619      	mov	r1, r3
 800714a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800714c:	2b00      	cmp	r3, #0
 800714e:	d15a      	bne.n	8007206 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68da      	ldr	r2, [r3, #12]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f022 0220 	bic.w	r2, r2, #32
 800715e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68da      	ldr	r2, [r3, #12]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800716e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	695a      	ldr	r2, [r3, #20]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f022 0201 	bic.w	r2, r2, #1
 800717e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2220      	movs	r2, #32
 8007184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718c:	2b01      	cmp	r3, #1
 800718e:	d135      	bne.n	80071fc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	330c      	adds	r3, #12
 800719c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	e853 3f00 	ldrex	r3, [r3]
 80071a4:	613b      	str	r3, [r7, #16]
   return(result);
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	f023 0310 	bic.w	r3, r3, #16
 80071ac:	627b      	str	r3, [r7, #36]	; 0x24
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	330c      	adds	r3, #12
 80071b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071b6:	623a      	str	r2, [r7, #32]
 80071b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ba:	69f9      	ldr	r1, [r7, #28]
 80071bc:	6a3a      	ldr	r2, [r7, #32]
 80071be:	e841 2300 	strex	r3, r2, [r1]
 80071c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1e5      	bne.n	8007196 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 0310 	and.w	r3, r3, #16
 80071d4:	2b10      	cmp	r3, #16
 80071d6:	d10a      	bne.n	80071ee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80071d8:	2300      	movs	r3, #0
 80071da:	60fb      	str	r3, [r7, #12]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	60fb      	str	r3, [r7, #12]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	60fb      	str	r3, [r7, #12]
 80071ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80071f2:	4619      	mov	r1, r3
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f7ff fdbb 	bl	8006d70 <HAL_UARTEx_RxEventCallback>
 80071fa:	e002      	b.n	8007202 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f7fa fdb7 	bl	8001d70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007202:	2300      	movs	r3, #0
 8007204:	e002      	b.n	800720c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007206:	2300      	movs	r3, #0
 8007208:	e000      	b.n	800720c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800720a:	2302      	movs	r3, #2
  }
}
 800720c:	4618      	mov	r0, r3
 800720e:	3730      	adds	r7, #48	; 0x30
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007218:	b0c0      	sub	sp, #256	; 0x100
 800721a:	af00      	add	r7, sp, #0
 800721c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800722c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007230:	68d9      	ldr	r1, [r3, #12]
 8007232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	ea40 0301 	orr.w	r3, r0, r1
 800723c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800723e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007242:	689a      	ldr	r2, [r3, #8]
 8007244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	431a      	orrs	r2, r3
 800724c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007250:	695b      	ldr	r3, [r3, #20]
 8007252:	431a      	orrs	r2, r3
 8007254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007258:	69db      	ldr	r3, [r3, #28]
 800725a:	4313      	orrs	r3, r2
 800725c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800726c:	f021 010c 	bic.w	r1, r1, #12
 8007270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800727a:	430b      	orrs	r3, r1
 800727c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800727e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800728a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800728e:	6999      	ldr	r1, [r3, #24]
 8007290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	ea40 0301 	orr.w	r3, r0, r1
 800729a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800729c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	4b8f      	ldr	r3, [pc, #572]	; (80074e0 <UART_SetConfig+0x2cc>)
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d005      	beq.n	80072b4 <UART_SetConfig+0xa0>
 80072a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	4b8d      	ldr	r3, [pc, #564]	; (80074e4 <UART_SetConfig+0x2d0>)
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d104      	bne.n	80072be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80072b4:	f7fc fe50 	bl	8003f58 <HAL_RCC_GetPCLK2Freq>
 80072b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80072bc:	e003      	b.n	80072c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80072be:	f7fc fe37 	bl	8003f30 <HAL_RCC_GetPCLK1Freq>
 80072c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ca:	69db      	ldr	r3, [r3, #28]
 80072cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072d0:	f040 810c 	bne.w	80074ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80072d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072d8:	2200      	movs	r2, #0
 80072da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80072de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80072e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80072e6:	4622      	mov	r2, r4
 80072e8:	462b      	mov	r3, r5
 80072ea:	1891      	adds	r1, r2, r2
 80072ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80072ee:	415b      	adcs	r3, r3
 80072f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80072f6:	4621      	mov	r1, r4
 80072f8:	eb12 0801 	adds.w	r8, r2, r1
 80072fc:	4629      	mov	r1, r5
 80072fe:	eb43 0901 	adc.w	r9, r3, r1
 8007302:	f04f 0200 	mov.w	r2, #0
 8007306:	f04f 0300 	mov.w	r3, #0
 800730a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800730e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007312:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007316:	4690      	mov	r8, r2
 8007318:	4699      	mov	r9, r3
 800731a:	4623      	mov	r3, r4
 800731c:	eb18 0303 	adds.w	r3, r8, r3
 8007320:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007324:	462b      	mov	r3, r5
 8007326:	eb49 0303 	adc.w	r3, r9, r3
 800732a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800732e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800733a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800733e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007342:	460b      	mov	r3, r1
 8007344:	18db      	adds	r3, r3, r3
 8007346:	653b      	str	r3, [r7, #80]	; 0x50
 8007348:	4613      	mov	r3, r2
 800734a:	eb42 0303 	adc.w	r3, r2, r3
 800734e:	657b      	str	r3, [r7, #84]	; 0x54
 8007350:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007354:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007358:	f7f9 fc46 	bl	8000be8 <__aeabi_uldivmod>
 800735c:	4602      	mov	r2, r0
 800735e:	460b      	mov	r3, r1
 8007360:	4b61      	ldr	r3, [pc, #388]	; (80074e8 <UART_SetConfig+0x2d4>)
 8007362:	fba3 2302 	umull	r2, r3, r3, r2
 8007366:	095b      	lsrs	r3, r3, #5
 8007368:	011c      	lsls	r4, r3, #4
 800736a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800736e:	2200      	movs	r2, #0
 8007370:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007374:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007378:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800737c:	4642      	mov	r2, r8
 800737e:	464b      	mov	r3, r9
 8007380:	1891      	adds	r1, r2, r2
 8007382:	64b9      	str	r1, [r7, #72]	; 0x48
 8007384:	415b      	adcs	r3, r3
 8007386:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007388:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800738c:	4641      	mov	r1, r8
 800738e:	eb12 0a01 	adds.w	sl, r2, r1
 8007392:	4649      	mov	r1, r9
 8007394:	eb43 0b01 	adc.w	fp, r3, r1
 8007398:	f04f 0200 	mov.w	r2, #0
 800739c:	f04f 0300 	mov.w	r3, #0
 80073a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80073a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80073a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073ac:	4692      	mov	sl, r2
 80073ae:	469b      	mov	fp, r3
 80073b0:	4643      	mov	r3, r8
 80073b2:	eb1a 0303 	adds.w	r3, sl, r3
 80073b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80073ba:	464b      	mov	r3, r9
 80073bc:	eb4b 0303 	adc.w	r3, fp, r3
 80073c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80073c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80073d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80073d8:	460b      	mov	r3, r1
 80073da:	18db      	adds	r3, r3, r3
 80073dc:	643b      	str	r3, [r7, #64]	; 0x40
 80073de:	4613      	mov	r3, r2
 80073e0:	eb42 0303 	adc.w	r3, r2, r3
 80073e4:	647b      	str	r3, [r7, #68]	; 0x44
 80073e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80073ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80073ee:	f7f9 fbfb 	bl	8000be8 <__aeabi_uldivmod>
 80073f2:	4602      	mov	r2, r0
 80073f4:	460b      	mov	r3, r1
 80073f6:	4611      	mov	r1, r2
 80073f8:	4b3b      	ldr	r3, [pc, #236]	; (80074e8 <UART_SetConfig+0x2d4>)
 80073fa:	fba3 2301 	umull	r2, r3, r3, r1
 80073fe:	095b      	lsrs	r3, r3, #5
 8007400:	2264      	movs	r2, #100	; 0x64
 8007402:	fb02 f303 	mul.w	r3, r2, r3
 8007406:	1acb      	subs	r3, r1, r3
 8007408:	00db      	lsls	r3, r3, #3
 800740a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800740e:	4b36      	ldr	r3, [pc, #216]	; (80074e8 <UART_SetConfig+0x2d4>)
 8007410:	fba3 2302 	umull	r2, r3, r3, r2
 8007414:	095b      	lsrs	r3, r3, #5
 8007416:	005b      	lsls	r3, r3, #1
 8007418:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800741c:	441c      	add	r4, r3
 800741e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007422:	2200      	movs	r2, #0
 8007424:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007428:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800742c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007430:	4642      	mov	r2, r8
 8007432:	464b      	mov	r3, r9
 8007434:	1891      	adds	r1, r2, r2
 8007436:	63b9      	str	r1, [r7, #56]	; 0x38
 8007438:	415b      	adcs	r3, r3
 800743a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800743c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007440:	4641      	mov	r1, r8
 8007442:	1851      	adds	r1, r2, r1
 8007444:	6339      	str	r1, [r7, #48]	; 0x30
 8007446:	4649      	mov	r1, r9
 8007448:	414b      	adcs	r3, r1
 800744a:	637b      	str	r3, [r7, #52]	; 0x34
 800744c:	f04f 0200 	mov.w	r2, #0
 8007450:	f04f 0300 	mov.w	r3, #0
 8007454:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007458:	4659      	mov	r1, fp
 800745a:	00cb      	lsls	r3, r1, #3
 800745c:	4651      	mov	r1, sl
 800745e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007462:	4651      	mov	r1, sl
 8007464:	00ca      	lsls	r2, r1, #3
 8007466:	4610      	mov	r0, r2
 8007468:	4619      	mov	r1, r3
 800746a:	4603      	mov	r3, r0
 800746c:	4642      	mov	r2, r8
 800746e:	189b      	adds	r3, r3, r2
 8007470:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007474:	464b      	mov	r3, r9
 8007476:	460a      	mov	r2, r1
 8007478:	eb42 0303 	adc.w	r3, r2, r3
 800747c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800748c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007490:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007494:	460b      	mov	r3, r1
 8007496:	18db      	adds	r3, r3, r3
 8007498:	62bb      	str	r3, [r7, #40]	; 0x28
 800749a:	4613      	mov	r3, r2
 800749c:	eb42 0303 	adc.w	r3, r2, r3
 80074a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80074a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80074aa:	f7f9 fb9d 	bl	8000be8 <__aeabi_uldivmod>
 80074ae:	4602      	mov	r2, r0
 80074b0:	460b      	mov	r3, r1
 80074b2:	4b0d      	ldr	r3, [pc, #52]	; (80074e8 <UART_SetConfig+0x2d4>)
 80074b4:	fba3 1302 	umull	r1, r3, r3, r2
 80074b8:	095b      	lsrs	r3, r3, #5
 80074ba:	2164      	movs	r1, #100	; 0x64
 80074bc:	fb01 f303 	mul.w	r3, r1, r3
 80074c0:	1ad3      	subs	r3, r2, r3
 80074c2:	00db      	lsls	r3, r3, #3
 80074c4:	3332      	adds	r3, #50	; 0x32
 80074c6:	4a08      	ldr	r2, [pc, #32]	; (80074e8 <UART_SetConfig+0x2d4>)
 80074c8:	fba2 2303 	umull	r2, r3, r2, r3
 80074cc:	095b      	lsrs	r3, r3, #5
 80074ce:	f003 0207 	and.w	r2, r3, #7
 80074d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4422      	add	r2, r4
 80074da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80074dc:	e105      	b.n	80076ea <UART_SetConfig+0x4d6>
 80074de:	bf00      	nop
 80074e0:	40011000 	.word	0x40011000
 80074e4:	40011400 	.word	0x40011400
 80074e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074f0:	2200      	movs	r2, #0
 80074f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80074f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80074fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80074fe:	4642      	mov	r2, r8
 8007500:	464b      	mov	r3, r9
 8007502:	1891      	adds	r1, r2, r2
 8007504:	6239      	str	r1, [r7, #32]
 8007506:	415b      	adcs	r3, r3
 8007508:	627b      	str	r3, [r7, #36]	; 0x24
 800750a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800750e:	4641      	mov	r1, r8
 8007510:	1854      	adds	r4, r2, r1
 8007512:	4649      	mov	r1, r9
 8007514:	eb43 0501 	adc.w	r5, r3, r1
 8007518:	f04f 0200 	mov.w	r2, #0
 800751c:	f04f 0300 	mov.w	r3, #0
 8007520:	00eb      	lsls	r3, r5, #3
 8007522:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007526:	00e2      	lsls	r2, r4, #3
 8007528:	4614      	mov	r4, r2
 800752a:	461d      	mov	r5, r3
 800752c:	4643      	mov	r3, r8
 800752e:	18e3      	adds	r3, r4, r3
 8007530:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007534:	464b      	mov	r3, r9
 8007536:	eb45 0303 	adc.w	r3, r5, r3
 800753a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800753e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800754a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800754e:	f04f 0200 	mov.w	r2, #0
 8007552:	f04f 0300 	mov.w	r3, #0
 8007556:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800755a:	4629      	mov	r1, r5
 800755c:	008b      	lsls	r3, r1, #2
 800755e:	4621      	mov	r1, r4
 8007560:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007564:	4621      	mov	r1, r4
 8007566:	008a      	lsls	r2, r1, #2
 8007568:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800756c:	f7f9 fb3c 	bl	8000be8 <__aeabi_uldivmod>
 8007570:	4602      	mov	r2, r0
 8007572:	460b      	mov	r3, r1
 8007574:	4b60      	ldr	r3, [pc, #384]	; (80076f8 <UART_SetConfig+0x4e4>)
 8007576:	fba3 2302 	umull	r2, r3, r3, r2
 800757a:	095b      	lsrs	r3, r3, #5
 800757c:	011c      	lsls	r4, r3, #4
 800757e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007582:	2200      	movs	r2, #0
 8007584:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007588:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800758c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007590:	4642      	mov	r2, r8
 8007592:	464b      	mov	r3, r9
 8007594:	1891      	adds	r1, r2, r2
 8007596:	61b9      	str	r1, [r7, #24]
 8007598:	415b      	adcs	r3, r3
 800759a:	61fb      	str	r3, [r7, #28]
 800759c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075a0:	4641      	mov	r1, r8
 80075a2:	1851      	adds	r1, r2, r1
 80075a4:	6139      	str	r1, [r7, #16]
 80075a6:	4649      	mov	r1, r9
 80075a8:	414b      	adcs	r3, r1
 80075aa:	617b      	str	r3, [r7, #20]
 80075ac:	f04f 0200 	mov.w	r2, #0
 80075b0:	f04f 0300 	mov.w	r3, #0
 80075b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80075b8:	4659      	mov	r1, fp
 80075ba:	00cb      	lsls	r3, r1, #3
 80075bc:	4651      	mov	r1, sl
 80075be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075c2:	4651      	mov	r1, sl
 80075c4:	00ca      	lsls	r2, r1, #3
 80075c6:	4610      	mov	r0, r2
 80075c8:	4619      	mov	r1, r3
 80075ca:	4603      	mov	r3, r0
 80075cc:	4642      	mov	r2, r8
 80075ce:	189b      	adds	r3, r3, r2
 80075d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80075d4:	464b      	mov	r3, r9
 80075d6:	460a      	mov	r2, r1
 80075d8:	eb42 0303 	adc.w	r3, r2, r3
 80075dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80075e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80075ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80075ec:	f04f 0200 	mov.w	r2, #0
 80075f0:	f04f 0300 	mov.w	r3, #0
 80075f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80075f8:	4649      	mov	r1, r9
 80075fa:	008b      	lsls	r3, r1, #2
 80075fc:	4641      	mov	r1, r8
 80075fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007602:	4641      	mov	r1, r8
 8007604:	008a      	lsls	r2, r1, #2
 8007606:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800760a:	f7f9 faed 	bl	8000be8 <__aeabi_uldivmod>
 800760e:	4602      	mov	r2, r0
 8007610:	460b      	mov	r3, r1
 8007612:	4b39      	ldr	r3, [pc, #228]	; (80076f8 <UART_SetConfig+0x4e4>)
 8007614:	fba3 1302 	umull	r1, r3, r3, r2
 8007618:	095b      	lsrs	r3, r3, #5
 800761a:	2164      	movs	r1, #100	; 0x64
 800761c:	fb01 f303 	mul.w	r3, r1, r3
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	011b      	lsls	r3, r3, #4
 8007624:	3332      	adds	r3, #50	; 0x32
 8007626:	4a34      	ldr	r2, [pc, #208]	; (80076f8 <UART_SetConfig+0x4e4>)
 8007628:	fba2 2303 	umull	r2, r3, r2, r3
 800762c:	095b      	lsrs	r3, r3, #5
 800762e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007632:	441c      	add	r4, r3
 8007634:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007638:	2200      	movs	r2, #0
 800763a:	673b      	str	r3, [r7, #112]	; 0x70
 800763c:	677a      	str	r2, [r7, #116]	; 0x74
 800763e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007642:	4642      	mov	r2, r8
 8007644:	464b      	mov	r3, r9
 8007646:	1891      	adds	r1, r2, r2
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	415b      	adcs	r3, r3
 800764c:	60fb      	str	r3, [r7, #12]
 800764e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007652:	4641      	mov	r1, r8
 8007654:	1851      	adds	r1, r2, r1
 8007656:	6039      	str	r1, [r7, #0]
 8007658:	4649      	mov	r1, r9
 800765a:	414b      	adcs	r3, r1
 800765c:	607b      	str	r3, [r7, #4]
 800765e:	f04f 0200 	mov.w	r2, #0
 8007662:	f04f 0300 	mov.w	r3, #0
 8007666:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800766a:	4659      	mov	r1, fp
 800766c:	00cb      	lsls	r3, r1, #3
 800766e:	4651      	mov	r1, sl
 8007670:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007674:	4651      	mov	r1, sl
 8007676:	00ca      	lsls	r2, r1, #3
 8007678:	4610      	mov	r0, r2
 800767a:	4619      	mov	r1, r3
 800767c:	4603      	mov	r3, r0
 800767e:	4642      	mov	r2, r8
 8007680:	189b      	adds	r3, r3, r2
 8007682:	66bb      	str	r3, [r7, #104]	; 0x68
 8007684:	464b      	mov	r3, r9
 8007686:	460a      	mov	r2, r1
 8007688:	eb42 0303 	adc.w	r3, r2, r3
 800768c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800768e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	663b      	str	r3, [r7, #96]	; 0x60
 8007698:	667a      	str	r2, [r7, #100]	; 0x64
 800769a:	f04f 0200 	mov.w	r2, #0
 800769e:	f04f 0300 	mov.w	r3, #0
 80076a2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80076a6:	4649      	mov	r1, r9
 80076a8:	008b      	lsls	r3, r1, #2
 80076aa:	4641      	mov	r1, r8
 80076ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076b0:	4641      	mov	r1, r8
 80076b2:	008a      	lsls	r2, r1, #2
 80076b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80076b8:	f7f9 fa96 	bl	8000be8 <__aeabi_uldivmod>
 80076bc:	4602      	mov	r2, r0
 80076be:	460b      	mov	r3, r1
 80076c0:	4b0d      	ldr	r3, [pc, #52]	; (80076f8 <UART_SetConfig+0x4e4>)
 80076c2:	fba3 1302 	umull	r1, r3, r3, r2
 80076c6:	095b      	lsrs	r3, r3, #5
 80076c8:	2164      	movs	r1, #100	; 0x64
 80076ca:	fb01 f303 	mul.w	r3, r1, r3
 80076ce:	1ad3      	subs	r3, r2, r3
 80076d0:	011b      	lsls	r3, r3, #4
 80076d2:	3332      	adds	r3, #50	; 0x32
 80076d4:	4a08      	ldr	r2, [pc, #32]	; (80076f8 <UART_SetConfig+0x4e4>)
 80076d6:	fba2 2303 	umull	r2, r3, r2, r3
 80076da:	095b      	lsrs	r3, r3, #5
 80076dc:	f003 020f 	and.w	r2, r3, #15
 80076e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4422      	add	r2, r4
 80076e8:	609a      	str	r2, [r3, #8]
}
 80076ea:	bf00      	nop
 80076ec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80076f0:	46bd      	mov	sp, r7
 80076f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076f6:	bf00      	nop
 80076f8:	51eb851f 	.word	0x51eb851f

080076fc <__errno>:
 80076fc:	4b01      	ldr	r3, [pc, #4]	; (8007704 <__errno+0x8>)
 80076fe:	6818      	ldr	r0, [r3, #0]
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	20000024 	.word	0x20000024

08007708 <__libc_init_array>:
 8007708:	b570      	push	{r4, r5, r6, lr}
 800770a:	4d0d      	ldr	r5, [pc, #52]	; (8007740 <__libc_init_array+0x38>)
 800770c:	4c0d      	ldr	r4, [pc, #52]	; (8007744 <__libc_init_array+0x3c>)
 800770e:	1b64      	subs	r4, r4, r5
 8007710:	10a4      	asrs	r4, r4, #2
 8007712:	2600      	movs	r6, #0
 8007714:	42a6      	cmp	r6, r4
 8007716:	d109      	bne.n	800772c <__libc_init_array+0x24>
 8007718:	4d0b      	ldr	r5, [pc, #44]	; (8007748 <__libc_init_array+0x40>)
 800771a:	4c0c      	ldr	r4, [pc, #48]	; (800774c <__libc_init_array+0x44>)
 800771c:	f002 ff04 	bl	800a528 <_init>
 8007720:	1b64      	subs	r4, r4, r5
 8007722:	10a4      	asrs	r4, r4, #2
 8007724:	2600      	movs	r6, #0
 8007726:	42a6      	cmp	r6, r4
 8007728:	d105      	bne.n	8007736 <__libc_init_array+0x2e>
 800772a:	bd70      	pop	{r4, r5, r6, pc}
 800772c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007730:	4798      	blx	r3
 8007732:	3601      	adds	r6, #1
 8007734:	e7ee      	b.n	8007714 <__libc_init_array+0xc>
 8007736:	f855 3b04 	ldr.w	r3, [r5], #4
 800773a:	4798      	blx	r3
 800773c:	3601      	adds	r6, #1
 800773e:	e7f2      	b.n	8007726 <__libc_init_array+0x1e>
 8007740:	0800a99c 	.word	0x0800a99c
 8007744:	0800a99c 	.word	0x0800a99c
 8007748:	0800a99c 	.word	0x0800a99c
 800774c:	0800a9a0 	.word	0x0800a9a0

08007750 <memset>:
 8007750:	4402      	add	r2, r0
 8007752:	4603      	mov	r3, r0
 8007754:	4293      	cmp	r3, r2
 8007756:	d100      	bne.n	800775a <memset+0xa>
 8007758:	4770      	bx	lr
 800775a:	f803 1b01 	strb.w	r1, [r3], #1
 800775e:	e7f9      	b.n	8007754 <memset+0x4>

08007760 <__cvt>:
 8007760:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007764:	ec55 4b10 	vmov	r4, r5, d0
 8007768:	2d00      	cmp	r5, #0
 800776a:	460e      	mov	r6, r1
 800776c:	4619      	mov	r1, r3
 800776e:	462b      	mov	r3, r5
 8007770:	bfbb      	ittet	lt
 8007772:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007776:	461d      	movlt	r5, r3
 8007778:	2300      	movge	r3, #0
 800777a:	232d      	movlt	r3, #45	; 0x2d
 800777c:	700b      	strb	r3, [r1, #0]
 800777e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007780:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007784:	4691      	mov	r9, r2
 8007786:	f023 0820 	bic.w	r8, r3, #32
 800778a:	bfbc      	itt	lt
 800778c:	4622      	movlt	r2, r4
 800778e:	4614      	movlt	r4, r2
 8007790:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007794:	d005      	beq.n	80077a2 <__cvt+0x42>
 8007796:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800779a:	d100      	bne.n	800779e <__cvt+0x3e>
 800779c:	3601      	adds	r6, #1
 800779e:	2102      	movs	r1, #2
 80077a0:	e000      	b.n	80077a4 <__cvt+0x44>
 80077a2:	2103      	movs	r1, #3
 80077a4:	ab03      	add	r3, sp, #12
 80077a6:	9301      	str	r3, [sp, #4]
 80077a8:	ab02      	add	r3, sp, #8
 80077aa:	9300      	str	r3, [sp, #0]
 80077ac:	ec45 4b10 	vmov	d0, r4, r5
 80077b0:	4653      	mov	r3, sl
 80077b2:	4632      	mov	r2, r6
 80077b4:	f000 fcec 	bl	8008190 <_dtoa_r>
 80077b8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80077bc:	4607      	mov	r7, r0
 80077be:	d102      	bne.n	80077c6 <__cvt+0x66>
 80077c0:	f019 0f01 	tst.w	r9, #1
 80077c4:	d022      	beq.n	800780c <__cvt+0xac>
 80077c6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80077ca:	eb07 0906 	add.w	r9, r7, r6
 80077ce:	d110      	bne.n	80077f2 <__cvt+0x92>
 80077d0:	783b      	ldrb	r3, [r7, #0]
 80077d2:	2b30      	cmp	r3, #48	; 0x30
 80077d4:	d10a      	bne.n	80077ec <__cvt+0x8c>
 80077d6:	2200      	movs	r2, #0
 80077d8:	2300      	movs	r3, #0
 80077da:	4620      	mov	r0, r4
 80077dc:	4629      	mov	r1, r5
 80077de:	f7f9 f993 	bl	8000b08 <__aeabi_dcmpeq>
 80077e2:	b918      	cbnz	r0, 80077ec <__cvt+0x8c>
 80077e4:	f1c6 0601 	rsb	r6, r6, #1
 80077e8:	f8ca 6000 	str.w	r6, [sl]
 80077ec:	f8da 3000 	ldr.w	r3, [sl]
 80077f0:	4499      	add	r9, r3
 80077f2:	2200      	movs	r2, #0
 80077f4:	2300      	movs	r3, #0
 80077f6:	4620      	mov	r0, r4
 80077f8:	4629      	mov	r1, r5
 80077fa:	f7f9 f985 	bl	8000b08 <__aeabi_dcmpeq>
 80077fe:	b108      	cbz	r0, 8007804 <__cvt+0xa4>
 8007800:	f8cd 900c 	str.w	r9, [sp, #12]
 8007804:	2230      	movs	r2, #48	; 0x30
 8007806:	9b03      	ldr	r3, [sp, #12]
 8007808:	454b      	cmp	r3, r9
 800780a:	d307      	bcc.n	800781c <__cvt+0xbc>
 800780c:	9b03      	ldr	r3, [sp, #12]
 800780e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007810:	1bdb      	subs	r3, r3, r7
 8007812:	4638      	mov	r0, r7
 8007814:	6013      	str	r3, [r2, #0]
 8007816:	b004      	add	sp, #16
 8007818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800781c:	1c59      	adds	r1, r3, #1
 800781e:	9103      	str	r1, [sp, #12]
 8007820:	701a      	strb	r2, [r3, #0]
 8007822:	e7f0      	b.n	8007806 <__cvt+0xa6>

08007824 <__exponent>:
 8007824:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007826:	4603      	mov	r3, r0
 8007828:	2900      	cmp	r1, #0
 800782a:	bfb8      	it	lt
 800782c:	4249      	neglt	r1, r1
 800782e:	f803 2b02 	strb.w	r2, [r3], #2
 8007832:	bfb4      	ite	lt
 8007834:	222d      	movlt	r2, #45	; 0x2d
 8007836:	222b      	movge	r2, #43	; 0x2b
 8007838:	2909      	cmp	r1, #9
 800783a:	7042      	strb	r2, [r0, #1]
 800783c:	dd2a      	ble.n	8007894 <__exponent+0x70>
 800783e:	f10d 0407 	add.w	r4, sp, #7
 8007842:	46a4      	mov	ip, r4
 8007844:	270a      	movs	r7, #10
 8007846:	46a6      	mov	lr, r4
 8007848:	460a      	mov	r2, r1
 800784a:	fb91 f6f7 	sdiv	r6, r1, r7
 800784e:	fb07 1516 	mls	r5, r7, r6, r1
 8007852:	3530      	adds	r5, #48	; 0x30
 8007854:	2a63      	cmp	r2, #99	; 0x63
 8007856:	f104 34ff 	add.w	r4, r4, #4294967295
 800785a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800785e:	4631      	mov	r1, r6
 8007860:	dcf1      	bgt.n	8007846 <__exponent+0x22>
 8007862:	3130      	adds	r1, #48	; 0x30
 8007864:	f1ae 0502 	sub.w	r5, lr, #2
 8007868:	f804 1c01 	strb.w	r1, [r4, #-1]
 800786c:	1c44      	adds	r4, r0, #1
 800786e:	4629      	mov	r1, r5
 8007870:	4561      	cmp	r1, ip
 8007872:	d30a      	bcc.n	800788a <__exponent+0x66>
 8007874:	f10d 0209 	add.w	r2, sp, #9
 8007878:	eba2 020e 	sub.w	r2, r2, lr
 800787c:	4565      	cmp	r5, ip
 800787e:	bf88      	it	hi
 8007880:	2200      	movhi	r2, #0
 8007882:	4413      	add	r3, r2
 8007884:	1a18      	subs	r0, r3, r0
 8007886:	b003      	add	sp, #12
 8007888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800788a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800788e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007892:	e7ed      	b.n	8007870 <__exponent+0x4c>
 8007894:	2330      	movs	r3, #48	; 0x30
 8007896:	3130      	adds	r1, #48	; 0x30
 8007898:	7083      	strb	r3, [r0, #2]
 800789a:	70c1      	strb	r1, [r0, #3]
 800789c:	1d03      	adds	r3, r0, #4
 800789e:	e7f1      	b.n	8007884 <__exponent+0x60>

080078a0 <_printf_float>:
 80078a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078a4:	ed2d 8b02 	vpush	{d8}
 80078a8:	b08d      	sub	sp, #52	; 0x34
 80078aa:	460c      	mov	r4, r1
 80078ac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80078b0:	4616      	mov	r6, r2
 80078b2:	461f      	mov	r7, r3
 80078b4:	4605      	mov	r5, r0
 80078b6:	f001 fa59 	bl	8008d6c <_localeconv_r>
 80078ba:	f8d0 a000 	ldr.w	sl, [r0]
 80078be:	4650      	mov	r0, sl
 80078c0:	f7f8 fca6 	bl	8000210 <strlen>
 80078c4:	2300      	movs	r3, #0
 80078c6:	930a      	str	r3, [sp, #40]	; 0x28
 80078c8:	6823      	ldr	r3, [r4, #0]
 80078ca:	9305      	str	r3, [sp, #20]
 80078cc:	f8d8 3000 	ldr.w	r3, [r8]
 80078d0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80078d4:	3307      	adds	r3, #7
 80078d6:	f023 0307 	bic.w	r3, r3, #7
 80078da:	f103 0208 	add.w	r2, r3, #8
 80078de:	f8c8 2000 	str.w	r2, [r8]
 80078e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80078ea:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80078ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80078f2:	9307      	str	r3, [sp, #28]
 80078f4:	f8cd 8018 	str.w	r8, [sp, #24]
 80078f8:	ee08 0a10 	vmov	s16, r0
 80078fc:	4b9f      	ldr	r3, [pc, #636]	; (8007b7c <_printf_float+0x2dc>)
 80078fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007902:	f04f 32ff 	mov.w	r2, #4294967295
 8007906:	f7f9 f931 	bl	8000b6c <__aeabi_dcmpun>
 800790a:	bb88      	cbnz	r0, 8007970 <_printf_float+0xd0>
 800790c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007910:	4b9a      	ldr	r3, [pc, #616]	; (8007b7c <_printf_float+0x2dc>)
 8007912:	f04f 32ff 	mov.w	r2, #4294967295
 8007916:	f7f9 f90b 	bl	8000b30 <__aeabi_dcmple>
 800791a:	bb48      	cbnz	r0, 8007970 <_printf_float+0xd0>
 800791c:	2200      	movs	r2, #0
 800791e:	2300      	movs	r3, #0
 8007920:	4640      	mov	r0, r8
 8007922:	4649      	mov	r1, r9
 8007924:	f7f9 f8fa 	bl	8000b1c <__aeabi_dcmplt>
 8007928:	b110      	cbz	r0, 8007930 <_printf_float+0x90>
 800792a:	232d      	movs	r3, #45	; 0x2d
 800792c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007930:	4b93      	ldr	r3, [pc, #588]	; (8007b80 <_printf_float+0x2e0>)
 8007932:	4894      	ldr	r0, [pc, #592]	; (8007b84 <_printf_float+0x2e4>)
 8007934:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007938:	bf94      	ite	ls
 800793a:	4698      	movls	r8, r3
 800793c:	4680      	movhi	r8, r0
 800793e:	2303      	movs	r3, #3
 8007940:	6123      	str	r3, [r4, #16]
 8007942:	9b05      	ldr	r3, [sp, #20]
 8007944:	f023 0204 	bic.w	r2, r3, #4
 8007948:	6022      	str	r2, [r4, #0]
 800794a:	f04f 0900 	mov.w	r9, #0
 800794e:	9700      	str	r7, [sp, #0]
 8007950:	4633      	mov	r3, r6
 8007952:	aa0b      	add	r2, sp, #44	; 0x2c
 8007954:	4621      	mov	r1, r4
 8007956:	4628      	mov	r0, r5
 8007958:	f000 f9d8 	bl	8007d0c <_printf_common>
 800795c:	3001      	adds	r0, #1
 800795e:	f040 8090 	bne.w	8007a82 <_printf_float+0x1e2>
 8007962:	f04f 30ff 	mov.w	r0, #4294967295
 8007966:	b00d      	add	sp, #52	; 0x34
 8007968:	ecbd 8b02 	vpop	{d8}
 800796c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007970:	4642      	mov	r2, r8
 8007972:	464b      	mov	r3, r9
 8007974:	4640      	mov	r0, r8
 8007976:	4649      	mov	r1, r9
 8007978:	f7f9 f8f8 	bl	8000b6c <__aeabi_dcmpun>
 800797c:	b140      	cbz	r0, 8007990 <_printf_float+0xf0>
 800797e:	464b      	mov	r3, r9
 8007980:	2b00      	cmp	r3, #0
 8007982:	bfbc      	itt	lt
 8007984:	232d      	movlt	r3, #45	; 0x2d
 8007986:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800798a:	487f      	ldr	r0, [pc, #508]	; (8007b88 <_printf_float+0x2e8>)
 800798c:	4b7f      	ldr	r3, [pc, #508]	; (8007b8c <_printf_float+0x2ec>)
 800798e:	e7d1      	b.n	8007934 <_printf_float+0x94>
 8007990:	6863      	ldr	r3, [r4, #4]
 8007992:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007996:	9206      	str	r2, [sp, #24]
 8007998:	1c5a      	adds	r2, r3, #1
 800799a:	d13f      	bne.n	8007a1c <_printf_float+0x17c>
 800799c:	2306      	movs	r3, #6
 800799e:	6063      	str	r3, [r4, #4]
 80079a0:	9b05      	ldr	r3, [sp, #20]
 80079a2:	6861      	ldr	r1, [r4, #4]
 80079a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80079a8:	2300      	movs	r3, #0
 80079aa:	9303      	str	r3, [sp, #12]
 80079ac:	ab0a      	add	r3, sp, #40	; 0x28
 80079ae:	e9cd b301 	strd	fp, r3, [sp, #4]
 80079b2:	ab09      	add	r3, sp, #36	; 0x24
 80079b4:	ec49 8b10 	vmov	d0, r8, r9
 80079b8:	9300      	str	r3, [sp, #0]
 80079ba:	6022      	str	r2, [r4, #0]
 80079bc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80079c0:	4628      	mov	r0, r5
 80079c2:	f7ff fecd 	bl	8007760 <__cvt>
 80079c6:	9b06      	ldr	r3, [sp, #24]
 80079c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079ca:	2b47      	cmp	r3, #71	; 0x47
 80079cc:	4680      	mov	r8, r0
 80079ce:	d108      	bne.n	80079e2 <_printf_float+0x142>
 80079d0:	1cc8      	adds	r0, r1, #3
 80079d2:	db02      	blt.n	80079da <_printf_float+0x13a>
 80079d4:	6863      	ldr	r3, [r4, #4]
 80079d6:	4299      	cmp	r1, r3
 80079d8:	dd41      	ble.n	8007a5e <_printf_float+0x1be>
 80079da:	f1ab 0b02 	sub.w	fp, fp, #2
 80079de:	fa5f fb8b 	uxtb.w	fp, fp
 80079e2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80079e6:	d820      	bhi.n	8007a2a <_printf_float+0x18a>
 80079e8:	3901      	subs	r1, #1
 80079ea:	465a      	mov	r2, fp
 80079ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80079f0:	9109      	str	r1, [sp, #36]	; 0x24
 80079f2:	f7ff ff17 	bl	8007824 <__exponent>
 80079f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079f8:	1813      	adds	r3, r2, r0
 80079fa:	2a01      	cmp	r2, #1
 80079fc:	4681      	mov	r9, r0
 80079fe:	6123      	str	r3, [r4, #16]
 8007a00:	dc02      	bgt.n	8007a08 <_printf_float+0x168>
 8007a02:	6822      	ldr	r2, [r4, #0]
 8007a04:	07d2      	lsls	r2, r2, #31
 8007a06:	d501      	bpl.n	8007a0c <_printf_float+0x16c>
 8007a08:	3301      	adds	r3, #1
 8007a0a:	6123      	str	r3, [r4, #16]
 8007a0c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d09c      	beq.n	800794e <_printf_float+0xae>
 8007a14:	232d      	movs	r3, #45	; 0x2d
 8007a16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a1a:	e798      	b.n	800794e <_printf_float+0xae>
 8007a1c:	9a06      	ldr	r2, [sp, #24]
 8007a1e:	2a47      	cmp	r2, #71	; 0x47
 8007a20:	d1be      	bne.n	80079a0 <_printf_float+0x100>
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1bc      	bne.n	80079a0 <_printf_float+0x100>
 8007a26:	2301      	movs	r3, #1
 8007a28:	e7b9      	b.n	800799e <_printf_float+0xfe>
 8007a2a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007a2e:	d118      	bne.n	8007a62 <_printf_float+0x1c2>
 8007a30:	2900      	cmp	r1, #0
 8007a32:	6863      	ldr	r3, [r4, #4]
 8007a34:	dd0b      	ble.n	8007a4e <_printf_float+0x1ae>
 8007a36:	6121      	str	r1, [r4, #16]
 8007a38:	b913      	cbnz	r3, 8007a40 <_printf_float+0x1a0>
 8007a3a:	6822      	ldr	r2, [r4, #0]
 8007a3c:	07d0      	lsls	r0, r2, #31
 8007a3e:	d502      	bpl.n	8007a46 <_printf_float+0x1a6>
 8007a40:	3301      	adds	r3, #1
 8007a42:	440b      	add	r3, r1
 8007a44:	6123      	str	r3, [r4, #16]
 8007a46:	65a1      	str	r1, [r4, #88]	; 0x58
 8007a48:	f04f 0900 	mov.w	r9, #0
 8007a4c:	e7de      	b.n	8007a0c <_printf_float+0x16c>
 8007a4e:	b913      	cbnz	r3, 8007a56 <_printf_float+0x1b6>
 8007a50:	6822      	ldr	r2, [r4, #0]
 8007a52:	07d2      	lsls	r2, r2, #31
 8007a54:	d501      	bpl.n	8007a5a <_printf_float+0x1ba>
 8007a56:	3302      	adds	r3, #2
 8007a58:	e7f4      	b.n	8007a44 <_printf_float+0x1a4>
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e7f2      	b.n	8007a44 <_printf_float+0x1a4>
 8007a5e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007a62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a64:	4299      	cmp	r1, r3
 8007a66:	db05      	blt.n	8007a74 <_printf_float+0x1d4>
 8007a68:	6823      	ldr	r3, [r4, #0]
 8007a6a:	6121      	str	r1, [r4, #16]
 8007a6c:	07d8      	lsls	r0, r3, #31
 8007a6e:	d5ea      	bpl.n	8007a46 <_printf_float+0x1a6>
 8007a70:	1c4b      	adds	r3, r1, #1
 8007a72:	e7e7      	b.n	8007a44 <_printf_float+0x1a4>
 8007a74:	2900      	cmp	r1, #0
 8007a76:	bfd4      	ite	le
 8007a78:	f1c1 0202 	rsble	r2, r1, #2
 8007a7c:	2201      	movgt	r2, #1
 8007a7e:	4413      	add	r3, r2
 8007a80:	e7e0      	b.n	8007a44 <_printf_float+0x1a4>
 8007a82:	6823      	ldr	r3, [r4, #0]
 8007a84:	055a      	lsls	r2, r3, #21
 8007a86:	d407      	bmi.n	8007a98 <_printf_float+0x1f8>
 8007a88:	6923      	ldr	r3, [r4, #16]
 8007a8a:	4642      	mov	r2, r8
 8007a8c:	4631      	mov	r1, r6
 8007a8e:	4628      	mov	r0, r5
 8007a90:	47b8      	blx	r7
 8007a92:	3001      	adds	r0, #1
 8007a94:	d12c      	bne.n	8007af0 <_printf_float+0x250>
 8007a96:	e764      	b.n	8007962 <_printf_float+0xc2>
 8007a98:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007a9c:	f240 80e0 	bls.w	8007c60 <_printf_float+0x3c0>
 8007aa0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	f7f9 f82e 	bl	8000b08 <__aeabi_dcmpeq>
 8007aac:	2800      	cmp	r0, #0
 8007aae:	d034      	beq.n	8007b1a <_printf_float+0x27a>
 8007ab0:	4a37      	ldr	r2, [pc, #220]	; (8007b90 <_printf_float+0x2f0>)
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	4631      	mov	r1, r6
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	47b8      	blx	r7
 8007aba:	3001      	adds	r0, #1
 8007abc:	f43f af51 	beq.w	8007962 <_printf_float+0xc2>
 8007ac0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	db02      	blt.n	8007ace <_printf_float+0x22e>
 8007ac8:	6823      	ldr	r3, [r4, #0]
 8007aca:	07d8      	lsls	r0, r3, #31
 8007acc:	d510      	bpl.n	8007af0 <_printf_float+0x250>
 8007ace:	ee18 3a10 	vmov	r3, s16
 8007ad2:	4652      	mov	r2, sl
 8007ad4:	4631      	mov	r1, r6
 8007ad6:	4628      	mov	r0, r5
 8007ad8:	47b8      	blx	r7
 8007ada:	3001      	adds	r0, #1
 8007adc:	f43f af41 	beq.w	8007962 <_printf_float+0xc2>
 8007ae0:	f04f 0800 	mov.w	r8, #0
 8007ae4:	f104 091a 	add.w	r9, r4, #26
 8007ae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aea:	3b01      	subs	r3, #1
 8007aec:	4543      	cmp	r3, r8
 8007aee:	dc09      	bgt.n	8007b04 <_printf_float+0x264>
 8007af0:	6823      	ldr	r3, [r4, #0]
 8007af2:	079b      	lsls	r3, r3, #30
 8007af4:	f100 8105 	bmi.w	8007d02 <_printf_float+0x462>
 8007af8:	68e0      	ldr	r0, [r4, #12]
 8007afa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007afc:	4298      	cmp	r0, r3
 8007afe:	bfb8      	it	lt
 8007b00:	4618      	movlt	r0, r3
 8007b02:	e730      	b.n	8007966 <_printf_float+0xc6>
 8007b04:	2301      	movs	r3, #1
 8007b06:	464a      	mov	r2, r9
 8007b08:	4631      	mov	r1, r6
 8007b0a:	4628      	mov	r0, r5
 8007b0c:	47b8      	blx	r7
 8007b0e:	3001      	adds	r0, #1
 8007b10:	f43f af27 	beq.w	8007962 <_printf_float+0xc2>
 8007b14:	f108 0801 	add.w	r8, r8, #1
 8007b18:	e7e6      	b.n	8007ae8 <_printf_float+0x248>
 8007b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	dc39      	bgt.n	8007b94 <_printf_float+0x2f4>
 8007b20:	4a1b      	ldr	r2, [pc, #108]	; (8007b90 <_printf_float+0x2f0>)
 8007b22:	2301      	movs	r3, #1
 8007b24:	4631      	mov	r1, r6
 8007b26:	4628      	mov	r0, r5
 8007b28:	47b8      	blx	r7
 8007b2a:	3001      	adds	r0, #1
 8007b2c:	f43f af19 	beq.w	8007962 <_printf_float+0xc2>
 8007b30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b34:	4313      	orrs	r3, r2
 8007b36:	d102      	bne.n	8007b3e <_printf_float+0x29e>
 8007b38:	6823      	ldr	r3, [r4, #0]
 8007b3a:	07d9      	lsls	r1, r3, #31
 8007b3c:	d5d8      	bpl.n	8007af0 <_printf_float+0x250>
 8007b3e:	ee18 3a10 	vmov	r3, s16
 8007b42:	4652      	mov	r2, sl
 8007b44:	4631      	mov	r1, r6
 8007b46:	4628      	mov	r0, r5
 8007b48:	47b8      	blx	r7
 8007b4a:	3001      	adds	r0, #1
 8007b4c:	f43f af09 	beq.w	8007962 <_printf_float+0xc2>
 8007b50:	f04f 0900 	mov.w	r9, #0
 8007b54:	f104 0a1a 	add.w	sl, r4, #26
 8007b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b5a:	425b      	negs	r3, r3
 8007b5c:	454b      	cmp	r3, r9
 8007b5e:	dc01      	bgt.n	8007b64 <_printf_float+0x2c4>
 8007b60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b62:	e792      	b.n	8007a8a <_printf_float+0x1ea>
 8007b64:	2301      	movs	r3, #1
 8007b66:	4652      	mov	r2, sl
 8007b68:	4631      	mov	r1, r6
 8007b6a:	4628      	mov	r0, r5
 8007b6c:	47b8      	blx	r7
 8007b6e:	3001      	adds	r0, #1
 8007b70:	f43f aef7 	beq.w	8007962 <_printf_float+0xc2>
 8007b74:	f109 0901 	add.w	r9, r9, #1
 8007b78:	e7ee      	b.n	8007b58 <_printf_float+0x2b8>
 8007b7a:	bf00      	nop
 8007b7c:	7fefffff 	.word	0x7fefffff
 8007b80:	0800a5bc 	.word	0x0800a5bc
 8007b84:	0800a5c0 	.word	0x0800a5c0
 8007b88:	0800a5c8 	.word	0x0800a5c8
 8007b8c:	0800a5c4 	.word	0x0800a5c4
 8007b90:	0800a5cc 	.word	0x0800a5cc
 8007b94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	bfa8      	it	ge
 8007b9c:	461a      	movge	r2, r3
 8007b9e:	2a00      	cmp	r2, #0
 8007ba0:	4691      	mov	r9, r2
 8007ba2:	dc37      	bgt.n	8007c14 <_printf_float+0x374>
 8007ba4:	f04f 0b00 	mov.w	fp, #0
 8007ba8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007bac:	f104 021a 	add.w	r2, r4, #26
 8007bb0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007bb2:	9305      	str	r3, [sp, #20]
 8007bb4:	eba3 0309 	sub.w	r3, r3, r9
 8007bb8:	455b      	cmp	r3, fp
 8007bba:	dc33      	bgt.n	8007c24 <_printf_float+0x384>
 8007bbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	db3b      	blt.n	8007c3c <_printf_float+0x39c>
 8007bc4:	6823      	ldr	r3, [r4, #0]
 8007bc6:	07da      	lsls	r2, r3, #31
 8007bc8:	d438      	bmi.n	8007c3c <_printf_float+0x39c>
 8007bca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bcc:	9a05      	ldr	r2, [sp, #20]
 8007bce:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007bd0:	1a9a      	subs	r2, r3, r2
 8007bd2:	eba3 0901 	sub.w	r9, r3, r1
 8007bd6:	4591      	cmp	r9, r2
 8007bd8:	bfa8      	it	ge
 8007bda:	4691      	movge	r9, r2
 8007bdc:	f1b9 0f00 	cmp.w	r9, #0
 8007be0:	dc35      	bgt.n	8007c4e <_printf_float+0x3ae>
 8007be2:	f04f 0800 	mov.w	r8, #0
 8007be6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007bea:	f104 0a1a 	add.w	sl, r4, #26
 8007bee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bf2:	1a9b      	subs	r3, r3, r2
 8007bf4:	eba3 0309 	sub.w	r3, r3, r9
 8007bf8:	4543      	cmp	r3, r8
 8007bfa:	f77f af79 	ble.w	8007af0 <_printf_float+0x250>
 8007bfe:	2301      	movs	r3, #1
 8007c00:	4652      	mov	r2, sl
 8007c02:	4631      	mov	r1, r6
 8007c04:	4628      	mov	r0, r5
 8007c06:	47b8      	blx	r7
 8007c08:	3001      	adds	r0, #1
 8007c0a:	f43f aeaa 	beq.w	8007962 <_printf_float+0xc2>
 8007c0e:	f108 0801 	add.w	r8, r8, #1
 8007c12:	e7ec      	b.n	8007bee <_printf_float+0x34e>
 8007c14:	4613      	mov	r3, r2
 8007c16:	4631      	mov	r1, r6
 8007c18:	4642      	mov	r2, r8
 8007c1a:	4628      	mov	r0, r5
 8007c1c:	47b8      	blx	r7
 8007c1e:	3001      	adds	r0, #1
 8007c20:	d1c0      	bne.n	8007ba4 <_printf_float+0x304>
 8007c22:	e69e      	b.n	8007962 <_printf_float+0xc2>
 8007c24:	2301      	movs	r3, #1
 8007c26:	4631      	mov	r1, r6
 8007c28:	4628      	mov	r0, r5
 8007c2a:	9205      	str	r2, [sp, #20]
 8007c2c:	47b8      	blx	r7
 8007c2e:	3001      	adds	r0, #1
 8007c30:	f43f ae97 	beq.w	8007962 <_printf_float+0xc2>
 8007c34:	9a05      	ldr	r2, [sp, #20]
 8007c36:	f10b 0b01 	add.w	fp, fp, #1
 8007c3a:	e7b9      	b.n	8007bb0 <_printf_float+0x310>
 8007c3c:	ee18 3a10 	vmov	r3, s16
 8007c40:	4652      	mov	r2, sl
 8007c42:	4631      	mov	r1, r6
 8007c44:	4628      	mov	r0, r5
 8007c46:	47b8      	blx	r7
 8007c48:	3001      	adds	r0, #1
 8007c4a:	d1be      	bne.n	8007bca <_printf_float+0x32a>
 8007c4c:	e689      	b.n	8007962 <_printf_float+0xc2>
 8007c4e:	9a05      	ldr	r2, [sp, #20]
 8007c50:	464b      	mov	r3, r9
 8007c52:	4442      	add	r2, r8
 8007c54:	4631      	mov	r1, r6
 8007c56:	4628      	mov	r0, r5
 8007c58:	47b8      	blx	r7
 8007c5a:	3001      	adds	r0, #1
 8007c5c:	d1c1      	bne.n	8007be2 <_printf_float+0x342>
 8007c5e:	e680      	b.n	8007962 <_printf_float+0xc2>
 8007c60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c62:	2a01      	cmp	r2, #1
 8007c64:	dc01      	bgt.n	8007c6a <_printf_float+0x3ca>
 8007c66:	07db      	lsls	r3, r3, #31
 8007c68:	d538      	bpl.n	8007cdc <_printf_float+0x43c>
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	4642      	mov	r2, r8
 8007c6e:	4631      	mov	r1, r6
 8007c70:	4628      	mov	r0, r5
 8007c72:	47b8      	blx	r7
 8007c74:	3001      	adds	r0, #1
 8007c76:	f43f ae74 	beq.w	8007962 <_printf_float+0xc2>
 8007c7a:	ee18 3a10 	vmov	r3, s16
 8007c7e:	4652      	mov	r2, sl
 8007c80:	4631      	mov	r1, r6
 8007c82:	4628      	mov	r0, r5
 8007c84:	47b8      	blx	r7
 8007c86:	3001      	adds	r0, #1
 8007c88:	f43f ae6b 	beq.w	8007962 <_printf_float+0xc2>
 8007c8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007c90:	2200      	movs	r2, #0
 8007c92:	2300      	movs	r3, #0
 8007c94:	f7f8 ff38 	bl	8000b08 <__aeabi_dcmpeq>
 8007c98:	b9d8      	cbnz	r0, 8007cd2 <_printf_float+0x432>
 8007c9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c9c:	f108 0201 	add.w	r2, r8, #1
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	4631      	mov	r1, r6
 8007ca4:	4628      	mov	r0, r5
 8007ca6:	47b8      	blx	r7
 8007ca8:	3001      	adds	r0, #1
 8007caa:	d10e      	bne.n	8007cca <_printf_float+0x42a>
 8007cac:	e659      	b.n	8007962 <_printf_float+0xc2>
 8007cae:	2301      	movs	r3, #1
 8007cb0:	4652      	mov	r2, sl
 8007cb2:	4631      	mov	r1, r6
 8007cb4:	4628      	mov	r0, r5
 8007cb6:	47b8      	blx	r7
 8007cb8:	3001      	adds	r0, #1
 8007cba:	f43f ae52 	beq.w	8007962 <_printf_float+0xc2>
 8007cbe:	f108 0801 	add.w	r8, r8, #1
 8007cc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cc4:	3b01      	subs	r3, #1
 8007cc6:	4543      	cmp	r3, r8
 8007cc8:	dcf1      	bgt.n	8007cae <_printf_float+0x40e>
 8007cca:	464b      	mov	r3, r9
 8007ccc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007cd0:	e6dc      	b.n	8007a8c <_printf_float+0x1ec>
 8007cd2:	f04f 0800 	mov.w	r8, #0
 8007cd6:	f104 0a1a 	add.w	sl, r4, #26
 8007cda:	e7f2      	b.n	8007cc2 <_printf_float+0x422>
 8007cdc:	2301      	movs	r3, #1
 8007cde:	4642      	mov	r2, r8
 8007ce0:	e7df      	b.n	8007ca2 <_printf_float+0x402>
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	464a      	mov	r2, r9
 8007ce6:	4631      	mov	r1, r6
 8007ce8:	4628      	mov	r0, r5
 8007cea:	47b8      	blx	r7
 8007cec:	3001      	adds	r0, #1
 8007cee:	f43f ae38 	beq.w	8007962 <_printf_float+0xc2>
 8007cf2:	f108 0801 	add.w	r8, r8, #1
 8007cf6:	68e3      	ldr	r3, [r4, #12]
 8007cf8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007cfa:	1a5b      	subs	r3, r3, r1
 8007cfc:	4543      	cmp	r3, r8
 8007cfe:	dcf0      	bgt.n	8007ce2 <_printf_float+0x442>
 8007d00:	e6fa      	b.n	8007af8 <_printf_float+0x258>
 8007d02:	f04f 0800 	mov.w	r8, #0
 8007d06:	f104 0919 	add.w	r9, r4, #25
 8007d0a:	e7f4      	b.n	8007cf6 <_printf_float+0x456>

08007d0c <_printf_common>:
 8007d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d10:	4616      	mov	r6, r2
 8007d12:	4699      	mov	r9, r3
 8007d14:	688a      	ldr	r2, [r1, #8]
 8007d16:	690b      	ldr	r3, [r1, #16]
 8007d18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	bfb8      	it	lt
 8007d20:	4613      	movlt	r3, r2
 8007d22:	6033      	str	r3, [r6, #0]
 8007d24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d28:	4607      	mov	r7, r0
 8007d2a:	460c      	mov	r4, r1
 8007d2c:	b10a      	cbz	r2, 8007d32 <_printf_common+0x26>
 8007d2e:	3301      	adds	r3, #1
 8007d30:	6033      	str	r3, [r6, #0]
 8007d32:	6823      	ldr	r3, [r4, #0]
 8007d34:	0699      	lsls	r1, r3, #26
 8007d36:	bf42      	ittt	mi
 8007d38:	6833      	ldrmi	r3, [r6, #0]
 8007d3a:	3302      	addmi	r3, #2
 8007d3c:	6033      	strmi	r3, [r6, #0]
 8007d3e:	6825      	ldr	r5, [r4, #0]
 8007d40:	f015 0506 	ands.w	r5, r5, #6
 8007d44:	d106      	bne.n	8007d54 <_printf_common+0x48>
 8007d46:	f104 0a19 	add.w	sl, r4, #25
 8007d4a:	68e3      	ldr	r3, [r4, #12]
 8007d4c:	6832      	ldr	r2, [r6, #0]
 8007d4e:	1a9b      	subs	r3, r3, r2
 8007d50:	42ab      	cmp	r3, r5
 8007d52:	dc26      	bgt.n	8007da2 <_printf_common+0x96>
 8007d54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d58:	1e13      	subs	r3, r2, #0
 8007d5a:	6822      	ldr	r2, [r4, #0]
 8007d5c:	bf18      	it	ne
 8007d5e:	2301      	movne	r3, #1
 8007d60:	0692      	lsls	r2, r2, #26
 8007d62:	d42b      	bmi.n	8007dbc <_printf_common+0xb0>
 8007d64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d68:	4649      	mov	r1, r9
 8007d6a:	4638      	mov	r0, r7
 8007d6c:	47c0      	blx	r8
 8007d6e:	3001      	adds	r0, #1
 8007d70:	d01e      	beq.n	8007db0 <_printf_common+0xa4>
 8007d72:	6823      	ldr	r3, [r4, #0]
 8007d74:	68e5      	ldr	r5, [r4, #12]
 8007d76:	6832      	ldr	r2, [r6, #0]
 8007d78:	f003 0306 	and.w	r3, r3, #6
 8007d7c:	2b04      	cmp	r3, #4
 8007d7e:	bf08      	it	eq
 8007d80:	1aad      	subeq	r5, r5, r2
 8007d82:	68a3      	ldr	r3, [r4, #8]
 8007d84:	6922      	ldr	r2, [r4, #16]
 8007d86:	bf0c      	ite	eq
 8007d88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d8c:	2500      	movne	r5, #0
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	bfc4      	itt	gt
 8007d92:	1a9b      	subgt	r3, r3, r2
 8007d94:	18ed      	addgt	r5, r5, r3
 8007d96:	2600      	movs	r6, #0
 8007d98:	341a      	adds	r4, #26
 8007d9a:	42b5      	cmp	r5, r6
 8007d9c:	d11a      	bne.n	8007dd4 <_printf_common+0xc8>
 8007d9e:	2000      	movs	r0, #0
 8007da0:	e008      	b.n	8007db4 <_printf_common+0xa8>
 8007da2:	2301      	movs	r3, #1
 8007da4:	4652      	mov	r2, sl
 8007da6:	4649      	mov	r1, r9
 8007da8:	4638      	mov	r0, r7
 8007daa:	47c0      	blx	r8
 8007dac:	3001      	adds	r0, #1
 8007dae:	d103      	bne.n	8007db8 <_printf_common+0xac>
 8007db0:	f04f 30ff 	mov.w	r0, #4294967295
 8007db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007db8:	3501      	adds	r5, #1
 8007dba:	e7c6      	b.n	8007d4a <_printf_common+0x3e>
 8007dbc:	18e1      	adds	r1, r4, r3
 8007dbe:	1c5a      	adds	r2, r3, #1
 8007dc0:	2030      	movs	r0, #48	; 0x30
 8007dc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007dc6:	4422      	add	r2, r4
 8007dc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007dcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007dd0:	3302      	adds	r3, #2
 8007dd2:	e7c7      	b.n	8007d64 <_printf_common+0x58>
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	4622      	mov	r2, r4
 8007dd8:	4649      	mov	r1, r9
 8007dda:	4638      	mov	r0, r7
 8007ddc:	47c0      	blx	r8
 8007dde:	3001      	adds	r0, #1
 8007de0:	d0e6      	beq.n	8007db0 <_printf_common+0xa4>
 8007de2:	3601      	adds	r6, #1
 8007de4:	e7d9      	b.n	8007d9a <_printf_common+0x8e>
	...

08007de8 <_printf_i>:
 8007de8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007dec:	7e0f      	ldrb	r7, [r1, #24]
 8007dee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007df0:	2f78      	cmp	r7, #120	; 0x78
 8007df2:	4691      	mov	r9, r2
 8007df4:	4680      	mov	r8, r0
 8007df6:	460c      	mov	r4, r1
 8007df8:	469a      	mov	sl, r3
 8007dfa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007dfe:	d807      	bhi.n	8007e10 <_printf_i+0x28>
 8007e00:	2f62      	cmp	r7, #98	; 0x62
 8007e02:	d80a      	bhi.n	8007e1a <_printf_i+0x32>
 8007e04:	2f00      	cmp	r7, #0
 8007e06:	f000 80d8 	beq.w	8007fba <_printf_i+0x1d2>
 8007e0a:	2f58      	cmp	r7, #88	; 0x58
 8007e0c:	f000 80a3 	beq.w	8007f56 <_printf_i+0x16e>
 8007e10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e18:	e03a      	b.n	8007e90 <_printf_i+0xa8>
 8007e1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e1e:	2b15      	cmp	r3, #21
 8007e20:	d8f6      	bhi.n	8007e10 <_printf_i+0x28>
 8007e22:	a101      	add	r1, pc, #4	; (adr r1, 8007e28 <_printf_i+0x40>)
 8007e24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e28:	08007e81 	.word	0x08007e81
 8007e2c:	08007e95 	.word	0x08007e95
 8007e30:	08007e11 	.word	0x08007e11
 8007e34:	08007e11 	.word	0x08007e11
 8007e38:	08007e11 	.word	0x08007e11
 8007e3c:	08007e11 	.word	0x08007e11
 8007e40:	08007e95 	.word	0x08007e95
 8007e44:	08007e11 	.word	0x08007e11
 8007e48:	08007e11 	.word	0x08007e11
 8007e4c:	08007e11 	.word	0x08007e11
 8007e50:	08007e11 	.word	0x08007e11
 8007e54:	08007fa1 	.word	0x08007fa1
 8007e58:	08007ec5 	.word	0x08007ec5
 8007e5c:	08007f83 	.word	0x08007f83
 8007e60:	08007e11 	.word	0x08007e11
 8007e64:	08007e11 	.word	0x08007e11
 8007e68:	08007fc3 	.word	0x08007fc3
 8007e6c:	08007e11 	.word	0x08007e11
 8007e70:	08007ec5 	.word	0x08007ec5
 8007e74:	08007e11 	.word	0x08007e11
 8007e78:	08007e11 	.word	0x08007e11
 8007e7c:	08007f8b 	.word	0x08007f8b
 8007e80:	682b      	ldr	r3, [r5, #0]
 8007e82:	1d1a      	adds	r2, r3, #4
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	602a      	str	r2, [r5, #0]
 8007e88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e90:	2301      	movs	r3, #1
 8007e92:	e0a3      	b.n	8007fdc <_printf_i+0x1f4>
 8007e94:	6820      	ldr	r0, [r4, #0]
 8007e96:	6829      	ldr	r1, [r5, #0]
 8007e98:	0606      	lsls	r6, r0, #24
 8007e9a:	f101 0304 	add.w	r3, r1, #4
 8007e9e:	d50a      	bpl.n	8007eb6 <_printf_i+0xce>
 8007ea0:	680e      	ldr	r6, [r1, #0]
 8007ea2:	602b      	str	r3, [r5, #0]
 8007ea4:	2e00      	cmp	r6, #0
 8007ea6:	da03      	bge.n	8007eb0 <_printf_i+0xc8>
 8007ea8:	232d      	movs	r3, #45	; 0x2d
 8007eaa:	4276      	negs	r6, r6
 8007eac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007eb0:	485e      	ldr	r0, [pc, #376]	; (800802c <_printf_i+0x244>)
 8007eb2:	230a      	movs	r3, #10
 8007eb4:	e019      	b.n	8007eea <_printf_i+0x102>
 8007eb6:	680e      	ldr	r6, [r1, #0]
 8007eb8:	602b      	str	r3, [r5, #0]
 8007eba:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007ebe:	bf18      	it	ne
 8007ec0:	b236      	sxthne	r6, r6
 8007ec2:	e7ef      	b.n	8007ea4 <_printf_i+0xbc>
 8007ec4:	682b      	ldr	r3, [r5, #0]
 8007ec6:	6820      	ldr	r0, [r4, #0]
 8007ec8:	1d19      	adds	r1, r3, #4
 8007eca:	6029      	str	r1, [r5, #0]
 8007ecc:	0601      	lsls	r1, r0, #24
 8007ece:	d501      	bpl.n	8007ed4 <_printf_i+0xec>
 8007ed0:	681e      	ldr	r6, [r3, #0]
 8007ed2:	e002      	b.n	8007eda <_printf_i+0xf2>
 8007ed4:	0646      	lsls	r6, r0, #25
 8007ed6:	d5fb      	bpl.n	8007ed0 <_printf_i+0xe8>
 8007ed8:	881e      	ldrh	r6, [r3, #0]
 8007eda:	4854      	ldr	r0, [pc, #336]	; (800802c <_printf_i+0x244>)
 8007edc:	2f6f      	cmp	r7, #111	; 0x6f
 8007ede:	bf0c      	ite	eq
 8007ee0:	2308      	moveq	r3, #8
 8007ee2:	230a      	movne	r3, #10
 8007ee4:	2100      	movs	r1, #0
 8007ee6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007eea:	6865      	ldr	r5, [r4, #4]
 8007eec:	60a5      	str	r5, [r4, #8]
 8007eee:	2d00      	cmp	r5, #0
 8007ef0:	bfa2      	ittt	ge
 8007ef2:	6821      	ldrge	r1, [r4, #0]
 8007ef4:	f021 0104 	bicge.w	r1, r1, #4
 8007ef8:	6021      	strge	r1, [r4, #0]
 8007efa:	b90e      	cbnz	r6, 8007f00 <_printf_i+0x118>
 8007efc:	2d00      	cmp	r5, #0
 8007efe:	d04d      	beq.n	8007f9c <_printf_i+0x1b4>
 8007f00:	4615      	mov	r5, r2
 8007f02:	fbb6 f1f3 	udiv	r1, r6, r3
 8007f06:	fb03 6711 	mls	r7, r3, r1, r6
 8007f0a:	5dc7      	ldrb	r7, [r0, r7]
 8007f0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007f10:	4637      	mov	r7, r6
 8007f12:	42bb      	cmp	r3, r7
 8007f14:	460e      	mov	r6, r1
 8007f16:	d9f4      	bls.n	8007f02 <_printf_i+0x11a>
 8007f18:	2b08      	cmp	r3, #8
 8007f1a:	d10b      	bne.n	8007f34 <_printf_i+0x14c>
 8007f1c:	6823      	ldr	r3, [r4, #0]
 8007f1e:	07de      	lsls	r6, r3, #31
 8007f20:	d508      	bpl.n	8007f34 <_printf_i+0x14c>
 8007f22:	6923      	ldr	r3, [r4, #16]
 8007f24:	6861      	ldr	r1, [r4, #4]
 8007f26:	4299      	cmp	r1, r3
 8007f28:	bfde      	ittt	le
 8007f2a:	2330      	movle	r3, #48	; 0x30
 8007f2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f30:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f34:	1b52      	subs	r2, r2, r5
 8007f36:	6122      	str	r2, [r4, #16]
 8007f38:	f8cd a000 	str.w	sl, [sp]
 8007f3c:	464b      	mov	r3, r9
 8007f3e:	aa03      	add	r2, sp, #12
 8007f40:	4621      	mov	r1, r4
 8007f42:	4640      	mov	r0, r8
 8007f44:	f7ff fee2 	bl	8007d0c <_printf_common>
 8007f48:	3001      	adds	r0, #1
 8007f4a:	d14c      	bne.n	8007fe6 <_printf_i+0x1fe>
 8007f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f50:	b004      	add	sp, #16
 8007f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f56:	4835      	ldr	r0, [pc, #212]	; (800802c <_printf_i+0x244>)
 8007f58:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007f5c:	6829      	ldr	r1, [r5, #0]
 8007f5e:	6823      	ldr	r3, [r4, #0]
 8007f60:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f64:	6029      	str	r1, [r5, #0]
 8007f66:	061d      	lsls	r5, r3, #24
 8007f68:	d514      	bpl.n	8007f94 <_printf_i+0x1ac>
 8007f6a:	07df      	lsls	r7, r3, #31
 8007f6c:	bf44      	itt	mi
 8007f6e:	f043 0320 	orrmi.w	r3, r3, #32
 8007f72:	6023      	strmi	r3, [r4, #0]
 8007f74:	b91e      	cbnz	r6, 8007f7e <_printf_i+0x196>
 8007f76:	6823      	ldr	r3, [r4, #0]
 8007f78:	f023 0320 	bic.w	r3, r3, #32
 8007f7c:	6023      	str	r3, [r4, #0]
 8007f7e:	2310      	movs	r3, #16
 8007f80:	e7b0      	b.n	8007ee4 <_printf_i+0xfc>
 8007f82:	6823      	ldr	r3, [r4, #0]
 8007f84:	f043 0320 	orr.w	r3, r3, #32
 8007f88:	6023      	str	r3, [r4, #0]
 8007f8a:	2378      	movs	r3, #120	; 0x78
 8007f8c:	4828      	ldr	r0, [pc, #160]	; (8008030 <_printf_i+0x248>)
 8007f8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f92:	e7e3      	b.n	8007f5c <_printf_i+0x174>
 8007f94:	0659      	lsls	r1, r3, #25
 8007f96:	bf48      	it	mi
 8007f98:	b2b6      	uxthmi	r6, r6
 8007f9a:	e7e6      	b.n	8007f6a <_printf_i+0x182>
 8007f9c:	4615      	mov	r5, r2
 8007f9e:	e7bb      	b.n	8007f18 <_printf_i+0x130>
 8007fa0:	682b      	ldr	r3, [r5, #0]
 8007fa2:	6826      	ldr	r6, [r4, #0]
 8007fa4:	6961      	ldr	r1, [r4, #20]
 8007fa6:	1d18      	adds	r0, r3, #4
 8007fa8:	6028      	str	r0, [r5, #0]
 8007faa:	0635      	lsls	r5, r6, #24
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	d501      	bpl.n	8007fb4 <_printf_i+0x1cc>
 8007fb0:	6019      	str	r1, [r3, #0]
 8007fb2:	e002      	b.n	8007fba <_printf_i+0x1d2>
 8007fb4:	0670      	lsls	r0, r6, #25
 8007fb6:	d5fb      	bpl.n	8007fb0 <_printf_i+0x1c8>
 8007fb8:	8019      	strh	r1, [r3, #0]
 8007fba:	2300      	movs	r3, #0
 8007fbc:	6123      	str	r3, [r4, #16]
 8007fbe:	4615      	mov	r5, r2
 8007fc0:	e7ba      	b.n	8007f38 <_printf_i+0x150>
 8007fc2:	682b      	ldr	r3, [r5, #0]
 8007fc4:	1d1a      	adds	r2, r3, #4
 8007fc6:	602a      	str	r2, [r5, #0]
 8007fc8:	681d      	ldr	r5, [r3, #0]
 8007fca:	6862      	ldr	r2, [r4, #4]
 8007fcc:	2100      	movs	r1, #0
 8007fce:	4628      	mov	r0, r5
 8007fd0:	f7f8 f926 	bl	8000220 <memchr>
 8007fd4:	b108      	cbz	r0, 8007fda <_printf_i+0x1f2>
 8007fd6:	1b40      	subs	r0, r0, r5
 8007fd8:	6060      	str	r0, [r4, #4]
 8007fda:	6863      	ldr	r3, [r4, #4]
 8007fdc:	6123      	str	r3, [r4, #16]
 8007fde:	2300      	movs	r3, #0
 8007fe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fe4:	e7a8      	b.n	8007f38 <_printf_i+0x150>
 8007fe6:	6923      	ldr	r3, [r4, #16]
 8007fe8:	462a      	mov	r2, r5
 8007fea:	4649      	mov	r1, r9
 8007fec:	4640      	mov	r0, r8
 8007fee:	47d0      	blx	sl
 8007ff0:	3001      	adds	r0, #1
 8007ff2:	d0ab      	beq.n	8007f4c <_printf_i+0x164>
 8007ff4:	6823      	ldr	r3, [r4, #0]
 8007ff6:	079b      	lsls	r3, r3, #30
 8007ff8:	d413      	bmi.n	8008022 <_printf_i+0x23a>
 8007ffa:	68e0      	ldr	r0, [r4, #12]
 8007ffc:	9b03      	ldr	r3, [sp, #12]
 8007ffe:	4298      	cmp	r0, r3
 8008000:	bfb8      	it	lt
 8008002:	4618      	movlt	r0, r3
 8008004:	e7a4      	b.n	8007f50 <_printf_i+0x168>
 8008006:	2301      	movs	r3, #1
 8008008:	4632      	mov	r2, r6
 800800a:	4649      	mov	r1, r9
 800800c:	4640      	mov	r0, r8
 800800e:	47d0      	blx	sl
 8008010:	3001      	adds	r0, #1
 8008012:	d09b      	beq.n	8007f4c <_printf_i+0x164>
 8008014:	3501      	adds	r5, #1
 8008016:	68e3      	ldr	r3, [r4, #12]
 8008018:	9903      	ldr	r1, [sp, #12]
 800801a:	1a5b      	subs	r3, r3, r1
 800801c:	42ab      	cmp	r3, r5
 800801e:	dcf2      	bgt.n	8008006 <_printf_i+0x21e>
 8008020:	e7eb      	b.n	8007ffa <_printf_i+0x212>
 8008022:	2500      	movs	r5, #0
 8008024:	f104 0619 	add.w	r6, r4, #25
 8008028:	e7f5      	b.n	8008016 <_printf_i+0x22e>
 800802a:	bf00      	nop
 800802c:	0800a5ce 	.word	0x0800a5ce
 8008030:	0800a5df 	.word	0x0800a5df

08008034 <siprintf>:
 8008034:	b40e      	push	{r1, r2, r3}
 8008036:	b500      	push	{lr}
 8008038:	b09c      	sub	sp, #112	; 0x70
 800803a:	ab1d      	add	r3, sp, #116	; 0x74
 800803c:	9002      	str	r0, [sp, #8]
 800803e:	9006      	str	r0, [sp, #24]
 8008040:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008044:	4809      	ldr	r0, [pc, #36]	; (800806c <siprintf+0x38>)
 8008046:	9107      	str	r1, [sp, #28]
 8008048:	9104      	str	r1, [sp, #16]
 800804a:	4909      	ldr	r1, [pc, #36]	; (8008070 <siprintf+0x3c>)
 800804c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008050:	9105      	str	r1, [sp, #20]
 8008052:	6800      	ldr	r0, [r0, #0]
 8008054:	9301      	str	r3, [sp, #4]
 8008056:	a902      	add	r1, sp, #8
 8008058:	f001 fb78 	bl	800974c <_svfiprintf_r>
 800805c:	9b02      	ldr	r3, [sp, #8]
 800805e:	2200      	movs	r2, #0
 8008060:	701a      	strb	r2, [r3, #0]
 8008062:	b01c      	add	sp, #112	; 0x70
 8008064:	f85d eb04 	ldr.w	lr, [sp], #4
 8008068:	b003      	add	sp, #12
 800806a:	4770      	bx	lr
 800806c:	20000024 	.word	0x20000024
 8008070:	ffff0208 	.word	0xffff0208

08008074 <quorem>:
 8008074:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008078:	6903      	ldr	r3, [r0, #16]
 800807a:	690c      	ldr	r4, [r1, #16]
 800807c:	42a3      	cmp	r3, r4
 800807e:	4607      	mov	r7, r0
 8008080:	f2c0 8081 	blt.w	8008186 <quorem+0x112>
 8008084:	3c01      	subs	r4, #1
 8008086:	f101 0814 	add.w	r8, r1, #20
 800808a:	f100 0514 	add.w	r5, r0, #20
 800808e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008092:	9301      	str	r3, [sp, #4]
 8008094:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008098:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800809c:	3301      	adds	r3, #1
 800809e:	429a      	cmp	r2, r3
 80080a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80080a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80080a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80080ac:	d331      	bcc.n	8008112 <quorem+0x9e>
 80080ae:	f04f 0e00 	mov.w	lr, #0
 80080b2:	4640      	mov	r0, r8
 80080b4:	46ac      	mov	ip, r5
 80080b6:	46f2      	mov	sl, lr
 80080b8:	f850 2b04 	ldr.w	r2, [r0], #4
 80080bc:	b293      	uxth	r3, r2
 80080be:	fb06 e303 	mla	r3, r6, r3, lr
 80080c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	ebaa 0303 	sub.w	r3, sl, r3
 80080cc:	f8dc a000 	ldr.w	sl, [ip]
 80080d0:	0c12      	lsrs	r2, r2, #16
 80080d2:	fa13 f38a 	uxtah	r3, r3, sl
 80080d6:	fb06 e202 	mla	r2, r6, r2, lr
 80080da:	9300      	str	r3, [sp, #0]
 80080dc:	9b00      	ldr	r3, [sp, #0]
 80080de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80080e2:	b292      	uxth	r2, r2
 80080e4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80080e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080ec:	f8bd 3000 	ldrh.w	r3, [sp]
 80080f0:	4581      	cmp	r9, r0
 80080f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080f6:	f84c 3b04 	str.w	r3, [ip], #4
 80080fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80080fe:	d2db      	bcs.n	80080b8 <quorem+0x44>
 8008100:	f855 300b 	ldr.w	r3, [r5, fp]
 8008104:	b92b      	cbnz	r3, 8008112 <quorem+0x9e>
 8008106:	9b01      	ldr	r3, [sp, #4]
 8008108:	3b04      	subs	r3, #4
 800810a:	429d      	cmp	r5, r3
 800810c:	461a      	mov	r2, r3
 800810e:	d32e      	bcc.n	800816e <quorem+0xfa>
 8008110:	613c      	str	r4, [r7, #16]
 8008112:	4638      	mov	r0, r7
 8008114:	f001 f8c6 	bl	80092a4 <__mcmp>
 8008118:	2800      	cmp	r0, #0
 800811a:	db24      	blt.n	8008166 <quorem+0xf2>
 800811c:	3601      	adds	r6, #1
 800811e:	4628      	mov	r0, r5
 8008120:	f04f 0c00 	mov.w	ip, #0
 8008124:	f858 2b04 	ldr.w	r2, [r8], #4
 8008128:	f8d0 e000 	ldr.w	lr, [r0]
 800812c:	b293      	uxth	r3, r2
 800812e:	ebac 0303 	sub.w	r3, ip, r3
 8008132:	0c12      	lsrs	r2, r2, #16
 8008134:	fa13 f38e 	uxtah	r3, r3, lr
 8008138:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800813c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008140:	b29b      	uxth	r3, r3
 8008142:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008146:	45c1      	cmp	r9, r8
 8008148:	f840 3b04 	str.w	r3, [r0], #4
 800814c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008150:	d2e8      	bcs.n	8008124 <quorem+0xb0>
 8008152:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008156:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800815a:	b922      	cbnz	r2, 8008166 <quorem+0xf2>
 800815c:	3b04      	subs	r3, #4
 800815e:	429d      	cmp	r5, r3
 8008160:	461a      	mov	r2, r3
 8008162:	d30a      	bcc.n	800817a <quorem+0x106>
 8008164:	613c      	str	r4, [r7, #16]
 8008166:	4630      	mov	r0, r6
 8008168:	b003      	add	sp, #12
 800816a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800816e:	6812      	ldr	r2, [r2, #0]
 8008170:	3b04      	subs	r3, #4
 8008172:	2a00      	cmp	r2, #0
 8008174:	d1cc      	bne.n	8008110 <quorem+0x9c>
 8008176:	3c01      	subs	r4, #1
 8008178:	e7c7      	b.n	800810a <quorem+0x96>
 800817a:	6812      	ldr	r2, [r2, #0]
 800817c:	3b04      	subs	r3, #4
 800817e:	2a00      	cmp	r2, #0
 8008180:	d1f0      	bne.n	8008164 <quorem+0xf0>
 8008182:	3c01      	subs	r4, #1
 8008184:	e7eb      	b.n	800815e <quorem+0xea>
 8008186:	2000      	movs	r0, #0
 8008188:	e7ee      	b.n	8008168 <quorem+0xf4>
 800818a:	0000      	movs	r0, r0
 800818c:	0000      	movs	r0, r0
	...

08008190 <_dtoa_r>:
 8008190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008194:	ed2d 8b04 	vpush	{d8-d9}
 8008198:	ec57 6b10 	vmov	r6, r7, d0
 800819c:	b093      	sub	sp, #76	; 0x4c
 800819e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80081a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80081a4:	9106      	str	r1, [sp, #24]
 80081a6:	ee10 aa10 	vmov	sl, s0
 80081aa:	4604      	mov	r4, r0
 80081ac:	9209      	str	r2, [sp, #36]	; 0x24
 80081ae:	930c      	str	r3, [sp, #48]	; 0x30
 80081b0:	46bb      	mov	fp, r7
 80081b2:	b975      	cbnz	r5, 80081d2 <_dtoa_r+0x42>
 80081b4:	2010      	movs	r0, #16
 80081b6:	f000 fddd 	bl	8008d74 <malloc>
 80081ba:	4602      	mov	r2, r0
 80081bc:	6260      	str	r0, [r4, #36]	; 0x24
 80081be:	b920      	cbnz	r0, 80081ca <_dtoa_r+0x3a>
 80081c0:	4ba7      	ldr	r3, [pc, #668]	; (8008460 <_dtoa_r+0x2d0>)
 80081c2:	21ea      	movs	r1, #234	; 0xea
 80081c4:	48a7      	ldr	r0, [pc, #668]	; (8008464 <_dtoa_r+0x2d4>)
 80081c6:	f001 fbd1 	bl	800996c <__assert_func>
 80081ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80081ce:	6005      	str	r5, [r0, #0]
 80081d0:	60c5      	str	r5, [r0, #12]
 80081d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081d4:	6819      	ldr	r1, [r3, #0]
 80081d6:	b151      	cbz	r1, 80081ee <_dtoa_r+0x5e>
 80081d8:	685a      	ldr	r2, [r3, #4]
 80081da:	604a      	str	r2, [r1, #4]
 80081dc:	2301      	movs	r3, #1
 80081de:	4093      	lsls	r3, r2
 80081e0:	608b      	str	r3, [r1, #8]
 80081e2:	4620      	mov	r0, r4
 80081e4:	f000 fe1c 	bl	8008e20 <_Bfree>
 80081e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081ea:	2200      	movs	r2, #0
 80081ec:	601a      	str	r2, [r3, #0]
 80081ee:	1e3b      	subs	r3, r7, #0
 80081f0:	bfaa      	itet	ge
 80081f2:	2300      	movge	r3, #0
 80081f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80081f8:	f8c8 3000 	strge.w	r3, [r8]
 80081fc:	4b9a      	ldr	r3, [pc, #616]	; (8008468 <_dtoa_r+0x2d8>)
 80081fe:	bfbc      	itt	lt
 8008200:	2201      	movlt	r2, #1
 8008202:	f8c8 2000 	strlt.w	r2, [r8]
 8008206:	ea33 030b 	bics.w	r3, r3, fp
 800820a:	d11b      	bne.n	8008244 <_dtoa_r+0xb4>
 800820c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800820e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008212:	6013      	str	r3, [r2, #0]
 8008214:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008218:	4333      	orrs	r3, r6
 800821a:	f000 8592 	beq.w	8008d42 <_dtoa_r+0xbb2>
 800821e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008220:	b963      	cbnz	r3, 800823c <_dtoa_r+0xac>
 8008222:	4b92      	ldr	r3, [pc, #584]	; (800846c <_dtoa_r+0x2dc>)
 8008224:	e022      	b.n	800826c <_dtoa_r+0xdc>
 8008226:	4b92      	ldr	r3, [pc, #584]	; (8008470 <_dtoa_r+0x2e0>)
 8008228:	9301      	str	r3, [sp, #4]
 800822a:	3308      	adds	r3, #8
 800822c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800822e:	6013      	str	r3, [r2, #0]
 8008230:	9801      	ldr	r0, [sp, #4]
 8008232:	b013      	add	sp, #76	; 0x4c
 8008234:	ecbd 8b04 	vpop	{d8-d9}
 8008238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800823c:	4b8b      	ldr	r3, [pc, #556]	; (800846c <_dtoa_r+0x2dc>)
 800823e:	9301      	str	r3, [sp, #4]
 8008240:	3303      	adds	r3, #3
 8008242:	e7f3      	b.n	800822c <_dtoa_r+0x9c>
 8008244:	2200      	movs	r2, #0
 8008246:	2300      	movs	r3, #0
 8008248:	4650      	mov	r0, sl
 800824a:	4659      	mov	r1, fp
 800824c:	f7f8 fc5c 	bl	8000b08 <__aeabi_dcmpeq>
 8008250:	ec4b ab19 	vmov	d9, sl, fp
 8008254:	4680      	mov	r8, r0
 8008256:	b158      	cbz	r0, 8008270 <_dtoa_r+0xe0>
 8008258:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800825a:	2301      	movs	r3, #1
 800825c:	6013      	str	r3, [r2, #0]
 800825e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008260:	2b00      	cmp	r3, #0
 8008262:	f000 856b 	beq.w	8008d3c <_dtoa_r+0xbac>
 8008266:	4883      	ldr	r0, [pc, #524]	; (8008474 <_dtoa_r+0x2e4>)
 8008268:	6018      	str	r0, [r3, #0]
 800826a:	1e43      	subs	r3, r0, #1
 800826c:	9301      	str	r3, [sp, #4]
 800826e:	e7df      	b.n	8008230 <_dtoa_r+0xa0>
 8008270:	ec4b ab10 	vmov	d0, sl, fp
 8008274:	aa10      	add	r2, sp, #64	; 0x40
 8008276:	a911      	add	r1, sp, #68	; 0x44
 8008278:	4620      	mov	r0, r4
 800827a:	f001 f8b9 	bl	80093f0 <__d2b>
 800827e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008282:	ee08 0a10 	vmov	s16, r0
 8008286:	2d00      	cmp	r5, #0
 8008288:	f000 8084 	beq.w	8008394 <_dtoa_r+0x204>
 800828c:	ee19 3a90 	vmov	r3, s19
 8008290:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008294:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008298:	4656      	mov	r6, sl
 800829a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800829e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80082a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80082a6:	4b74      	ldr	r3, [pc, #464]	; (8008478 <_dtoa_r+0x2e8>)
 80082a8:	2200      	movs	r2, #0
 80082aa:	4630      	mov	r0, r6
 80082ac:	4639      	mov	r1, r7
 80082ae:	f7f8 f80b 	bl	80002c8 <__aeabi_dsub>
 80082b2:	a365      	add	r3, pc, #404	; (adr r3, 8008448 <_dtoa_r+0x2b8>)
 80082b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b8:	f7f8 f9be 	bl	8000638 <__aeabi_dmul>
 80082bc:	a364      	add	r3, pc, #400	; (adr r3, 8008450 <_dtoa_r+0x2c0>)
 80082be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c2:	f7f8 f803 	bl	80002cc <__adddf3>
 80082c6:	4606      	mov	r6, r0
 80082c8:	4628      	mov	r0, r5
 80082ca:	460f      	mov	r7, r1
 80082cc:	f7f8 f94a 	bl	8000564 <__aeabi_i2d>
 80082d0:	a361      	add	r3, pc, #388	; (adr r3, 8008458 <_dtoa_r+0x2c8>)
 80082d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d6:	f7f8 f9af 	bl	8000638 <__aeabi_dmul>
 80082da:	4602      	mov	r2, r0
 80082dc:	460b      	mov	r3, r1
 80082de:	4630      	mov	r0, r6
 80082e0:	4639      	mov	r1, r7
 80082e2:	f7f7 fff3 	bl	80002cc <__adddf3>
 80082e6:	4606      	mov	r6, r0
 80082e8:	460f      	mov	r7, r1
 80082ea:	f7f8 fc55 	bl	8000b98 <__aeabi_d2iz>
 80082ee:	2200      	movs	r2, #0
 80082f0:	9000      	str	r0, [sp, #0]
 80082f2:	2300      	movs	r3, #0
 80082f4:	4630      	mov	r0, r6
 80082f6:	4639      	mov	r1, r7
 80082f8:	f7f8 fc10 	bl	8000b1c <__aeabi_dcmplt>
 80082fc:	b150      	cbz	r0, 8008314 <_dtoa_r+0x184>
 80082fe:	9800      	ldr	r0, [sp, #0]
 8008300:	f7f8 f930 	bl	8000564 <__aeabi_i2d>
 8008304:	4632      	mov	r2, r6
 8008306:	463b      	mov	r3, r7
 8008308:	f7f8 fbfe 	bl	8000b08 <__aeabi_dcmpeq>
 800830c:	b910      	cbnz	r0, 8008314 <_dtoa_r+0x184>
 800830e:	9b00      	ldr	r3, [sp, #0]
 8008310:	3b01      	subs	r3, #1
 8008312:	9300      	str	r3, [sp, #0]
 8008314:	9b00      	ldr	r3, [sp, #0]
 8008316:	2b16      	cmp	r3, #22
 8008318:	d85a      	bhi.n	80083d0 <_dtoa_r+0x240>
 800831a:	9a00      	ldr	r2, [sp, #0]
 800831c:	4b57      	ldr	r3, [pc, #348]	; (800847c <_dtoa_r+0x2ec>)
 800831e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008326:	ec51 0b19 	vmov	r0, r1, d9
 800832a:	f7f8 fbf7 	bl	8000b1c <__aeabi_dcmplt>
 800832e:	2800      	cmp	r0, #0
 8008330:	d050      	beq.n	80083d4 <_dtoa_r+0x244>
 8008332:	9b00      	ldr	r3, [sp, #0]
 8008334:	3b01      	subs	r3, #1
 8008336:	9300      	str	r3, [sp, #0]
 8008338:	2300      	movs	r3, #0
 800833a:	930b      	str	r3, [sp, #44]	; 0x2c
 800833c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800833e:	1b5d      	subs	r5, r3, r5
 8008340:	1e6b      	subs	r3, r5, #1
 8008342:	9305      	str	r3, [sp, #20]
 8008344:	bf45      	ittet	mi
 8008346:	f1c5 0301 	rsbmi	r3, r5, #1
 800834a:	9304      	strmi	r3, [sp, #16]
 800834c:	2300      	movpl	r3, #0
 800834e:	2300      	movmi	r3, #0
 8008350:	bf4c      	ite	mi
 8008352:	9305      	strmi	r3, [sp, #20]
 8008354:	9304      	strpl	r3, [sp, #16]
 8008356:	9b00      	ldr	r3, [sp, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	db3d      	blt.n	80083d8 <_dtoa_r+0x248>
 800835c:	9b05      	ldr	r3, [sp, #20]
 800835e:	9a00      	ldr	r2, [sp, #0]
 8008360:	920a      	str	r2, [sp, #40]	; 0x28
 8008362:	4413      	add	r3, r2
 8008364:	9305      	str	r3, [sp, #20]
 8008366:	2300      	movs	r3, #0
 8008368:	9307      	str	r3, [sp, #28]
 800836a:	9b06      	ldr	r3, [sp, #24]
 800836c:	2b09      	cmp	r3, #9
 800836e:	f200 8089 	bhi.w	8008484 <_dtoa_r+0x2f4>
 8008372:	2b05      	cmp	r3, #5
 8008374:	bfc4      	itt	gt
 8008376:	3b04      	subgt	r3, #4
 8008378:	9306      	strgt	r3, [sp, #24]
 800837a:	9b06      	ldr	r3, [sp, #24]
 800837c:	f1a3 0302 	sub.w	r3, r3, #2
 8008380:	bfcc      	ite	gt
 8008382:	2500      	movgt	r5, #0
 8008384:	2501      	movle	r5, #1
 8008386:	2b03      	cmp	r3, #3
 8008388:	f200 8087 	bhi.w	800849a <_dtoa_r+0x30a>
 800838c:	e8df f003 	tbb	[pc, r3]
 8008390:	59383a2d 	.word	0x59383a2d
 8008394:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008398:	441d      	add	r5, r3
 800839a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800839e:	2b20      	cmp	r3, #32
 80083a0:	bfc1      	itttt	gt
 80083a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80083a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80083aa:	fa0b f303 	lslgt.w	r3, fp, r3
 80083ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 80083b2:	bfda      	itte	le
 80083b4:	f1c3 0320 	rsble	r3, r3, #32
 80083b8:	fa06 f003 	lslle.w	r0, r6, r3
 80083bc:	4318      	orrgt	r0, r3
 80083be:	f7f8 f8c1 	bl	8000544 <__aeabi_ui2d>
 80083c2:	2301      	movs	r3, #1
 80083c4:	4606      	mov	r6, r0
 80083c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80083ca:	3d01      	subs	r5, #1
 80083cc:	930e      	str	r3, [sp, #56]	; 0x38
 80083ce:	e76a      	b.n	80082a6 <_dtoa_r+0x116>
 80083d0:	2301      	movs	r3, #1
 80083d2:	e7b2      	b.n	800833a <_dtoa_r+0x1aa>
 80083d4:	900b      	str	r0, [sp, #44]	; 0x2c
 80083d6:	e7b1      	b.n	800833c <_dtoa_r+0x1ac>
 80083d8:	9b04      	ldr	r3, [sp, #16]
 80083da:	9a00      	ldr	r2, [sp, #0]
 80083dc:	1a9b      	subs	r3, r3, r2
 80083de:	9304      	str	r3, [sp, #16]
 80083e0:	4253      	negs	r3, r2
 80083e2:	9307      	str	r3, [sp, #28]
 80083e4:	2300      	movs	r3, #0
 80083e6:	930a      	str	r3, [sp, #40]	; 0x28
 80083e8:	e7bf      	b.n	800836a <_dtoa_r+0x1da>
 80083ea:	2300      	movs	r3, #0
 80083ec:	9308      	str	r3, [sp, #32]
 80083ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	dc55      	bgt.n	80084a0 <_dtoa_r+0x310>
 80083f4:	2301      	movs	r3, #1
 80083f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80083fa:	461a      	mov	r2, r3
 80083fc:	9209      	str	r2, [sp, #36]	; 0x24
 80083fe:	e00c      	b.n	800841a <_dtoa_r+0x28a>
 8008400:	2301      	movs	r3, #1
 8008402:	e7f3      	b.n	80083ec <_dtoa_r+0x25c>
 8008404:	2300      	movs	r3, #0
 8008406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008408:	9308      	str	r3, [sp, #32]
 800840a:	9b00      	ldr	r3, [sp, #0]
 800840c:	4413      	add	r3, r2
 800840e:	9302      	str	r3, [sp, #8]
 8008410:	3301      	adds	r3, #1
 8008412:	2b01      	cmp	r3, #1
 8008414:	9303      	str	r3, [sp, #12]
 8008416:	bfb8      	it	lt
 8008418:	2301      	movlt	r3, #1
 800841a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800841c:	2200      	movs	r2, #0
 800841e:	6042      	str	r2, [r0, #4]
 8008420:	2204      	movs	r2, #4
 8008422:	f102 0614 	add.w	r6, r2, #20
 8008426:	429e      	cmp	r6, r3
 8008428:	6841      	ldr	r1, [r0, #4]
 800842a:	d93d      	bls.n	80084a8 <_dtoa_r+0x318>
 800842c:	4620      	mov	r0, r4
 800842e:	f000 fcb7 	bl	8008da0 <_Balloc>
 8008432:	9001      	str	r0, [sp, #4]
 8008434:	2800      	cmp	r0, #0
 8008436:	d13b      	bne.n	80084b0 <_dtoa_r+0x320>
 8008438:	4b11      	ldr	r3, [pc, #68]	; (8008480 <_dtoa_r+0x2f0>)
 800843a:	4602      	mov	r2, r0
 800843c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008440:	e6c0      	b.n	80081c4 <_dtoa_r+0x34>
 8008442:	2301      	movs	r3, #1
 8008444:	e7df      	b.n	8008406 <_dtoa_r+0x276>
 8008446:	bf00      	nop
 8008448:	636f4361 	.word	0x636f4361
 800844c:	3fd287a7 	.word	0x3fd287a7
 8008450:	8b60c8b3 	.word	0x8b60c8b3
 8008454:	3fc68a28 	.word	0x3fc68a28
 8008458:	509f79fb 	.word	0x509f79fb
 800845c:	3fd34413 	.word	0x3fd34413
 8008460:	0800a5fd 	.word	0x0800a5fd
 8008464:	0800a614 	.word	0x0800a614
 8008468:	7ff00000 	.word	0x7ff00000
 800846c:	0800a5f9 	.word	0x0800a5f9
 8008470:	0800a5f0 	.word	0x0800a5f0
 8008474:	0800a5cd 	.word	0x0800a5cd
 8008478:	3ff80000 	.word	0x3ff80000
 800847c:	0800a708 	.word	0x0800a708
 8008480:	0800a66f 	.word	0x0800a66f
 8008484:	2501      	movs	r5, #1
 8008486:	2300      	movs	r3, #0
 8008488:	9306      	str	r3, [sp, #24]
 800848a:	9508      	str	r5, [sp, #32]
 800848c:	f04f 33ff 	mov.w	r3, #4294967295
 8008490:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008494:	2200      	movs	r2, #0
 8008496:	2312      	movs	r3, #18
 8008498:	e7b0      	b.n	80083fc <_dtoa_r+0x26c>
 800849a:	2301      	movs	r3, #1
 800849c:	9308      	str	r3, [sp, #32]
 800849e:	e7f5      	b.n	800848c <_dtoa_r+0x2fc>
 80084a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80084a6:	e7b8      	b.n	800841a <_dtoa_r+0x28a>
 80084a8:	3101      	adds	r1, #1
 80084aa:	6041      	str	r1, [r0, #4]
 80084ac:	0052      	lsls	r2, r2, #1
 80084ae:	e7b8      	b.n	8008422 <_dtoa_r+0x292>
 80084b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084b2:	9a01      	ldr	r2, [sp, #4]
 80084b4:	601a      	str	r2, [r3, #0]
 80084b6:	9b03      	ldr	r3, [sp, #12]
 80084b8:	2b0e      	cmp	r3, #14
 80084ba:	f200 809d 	bhi.w	80085f8 <_dtoa_r+0x468>
 80084be:	2d00      	cmp	r5, #0
 80084c0:	f000 809a 	beq.w	80085f8 <_dtoa_r+0x468>
 80084c4:	9b00      	ldr	r3, [sp, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	dd32      	ble.n	8008530 <_dtoa_r+0x3a0>
 80084ca:	4ab7      	ldr	r2, [pc, #732]	; (80087a8 <_dtoa_r+0x618>)
 80084cc:	f003 030f 	and.w	r3, r3, #15
 80084d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80084d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80084d8:	9b00      	ldr	r3, [sp, #0]
 80084da:	05d8      	lsls	r0, r3, #23
 80084dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80084e0:	d516      	bpl.n	8008510 <_dtoa_r+0x380>
 80084e2:	4bb2      	ldr	r3, [pc, #712]	; (80087ac <_dtoa_r+0x61c>)
 80084e4:	ec51 0b19 	vmov	r0, r1, d9
 80084e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80084ec:	f7f8 f9ce 	bl	800088c <__aeabi_ddiv>
 80084f0:	f007 070f 	and.w	r7, r7, #15
 80084f4:	4682      	mov	sl, r0
 80084f6:	468b      	mov	fp, r1
 80084f8:	2503      	movs	r5, #3
 80084fa:	4eac      	ldr	r6, [pc, #688]	; (80087ac <_dtoa_r+0x61c>)
 80084fc:	b957      	cbnz	r7, 8008514 <_dtoa_r+0x384>
 80084fe:	4642      	mov	r2, r8
 8008500:	464b      	mov	r3, r9
 8008502:	4650      	mov	r0, sl
 8008504:	4659      	mov	r1, fp
 8008506:	f7f8 f9c1 	bl	800088c <__aeabi_ddiv>
 800850a:	4682      	mov	sl, r0
 800850c:	468b      	mov	fp, r1
 800850e:	e028      	b.n	8008562 <_dtoa_r+0x3d2>
 8008510:	2502      	movs	r5, #2
 8008512:	e7f2      	b.n	80084fa <_dtoa_r+0x36a>
 8008514:	07f9      	lsls	r1, r7, #31
 8008516:	d508      	bpl.n	800852a <_dtoa_r+0x39a>
 8008518:	4640      	mov	r0, r8
 800851a:	4649      	mov	r1, r9
 800851c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008520:	f7f8 f88a 	bl	8000638 <__aeabi_dmul>
 8008524:	3501      	adds	r5, #1
 8008526:	4680      	mov	r8, r0
 8008528:	4689      	mov	r9, r1
 800852a:	107f      	asrs	r7, r7, #1
 800852c:	3608      	adds	r6, #8
 800852e:	e7e5      	b.n	80084fc <_dtoa_r+0x36c>
 8008530:	f000 809b 	beq.w	800866a <_dtoa_r+0x4da>
 8008534:	9b00      	ldr	r3, [sp, #0]
 8008536:	4f9d      	ldr	r7, [pc, #628]	; (80087ac <_dtoa_r+0x61c>)
 8008538:	425e      	negs	r6, r3
 800853a:	4b9b      	ldr	r3, [pc, #620]	; (80087a8 <_dtoa_r+0x618>)
 800853c:	f006 020f 	and.w	r2, r6, #15
 8008540:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008548:	ec51 0b19 	vmov	r0, r1, d9
 800854c:	f7f8 f874 	bl	8000638 <__aeabi_dmul>
 8008550:	1136      	asrs	r6, r6, #4
 8008552:	4682      	mov	sl, r0
 8008554:	468b      	mov	fp, r1
 8008556:	2300      	movs	r3, #0
 8008558:	2502      	movs	r5, #2
 800855a:	2e00      	cmp	r6, #0
 800855c:	d17a      	bne.n	8008654 <_dtoa_r+0x4c4>
 800855e:	2b00      	cmp	r3, #0
 8008560:	d1d3      	bne.n	800850a <_dtoa_r+0x37a>
 8008562:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008564:	2b00      	cmp	r3, #0
 8008566:	f000 8082 	beq.w	800866e <_dtoa_r+0x4de>
 800856a:	4b91      	ldr	r3, [pc, #580]	; (80087b0 <_dtoa_r+0x620>)
 800856c:	2200      	movs	r2, #0
 800856e:	4650      	mov	r0, sl
 8008570:	4659      	mov	r1, fp
 8008572:	f7f8 fad3 	bl	8000b1c <__aeabi_dcmplt>
 8008576:	2800      	cmp	r0, #0
 8008578:	d079      	beq.n	800866e <_dtoa_r+0x4de>
 800857a:	9b03      	ldr	r3, [sp, #12]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d076      	beq.n	800866e <_dtoa_r+0x4de>
 8008580:	9b02      	ldr	r3, [sp, #8]
 8008582:	2b00      	cmp	r3, #0
 8008584:	dd36      	ble.n	80085f4 <_dtoa_r+0x464>
 8008586:	9b00      	ldr	r3, [sp, #0]
 8008588:	4650      	mov	r0, sl
 800858a:	4659      	mov	r1, fp
 800858c:	1e5f      	subs	r7, r3, #1
 800858e:	2200      	movs	r2, #0
 8008590:	4b88      	ldr	r3, [pc, #544]	; (80087b4 <_dtoa_r+0x624>)
 8008592:	f7f8 f851 	bl	8000638 <__aeabi_dmul>
 8008596:	9e02      	ldr	r6, [sp, #8]
 8008598:	4682      	mov	sl, r0
 800859a:	468b      	mov	fp, r1
 800859c:	3501      	adds	r5, #1
 800859e:	4628      	mov	r0, r5
 80085a0:	f7f7 ffe0 	bl	8000564 <__aeabi_i2d>
 80085a4:	4652      	mov	r2, sl
 80085a6:	465b      	mov	r3, fp
 80085a8:	f7f8 f846 	bl	8000638 <__aeabi_dmul>
 80085ac:	4b82      	ldr	r3, [pc, #520]	; (80087b8 <_dtoa_r+0x628>)
 80085ae:	2200      	movs	r2, #0
 80085b0:	f7f7 fe8c 	bl	80002cc <__adddf3>
 80085b4:	46d0      	mov	r8, sl
 80085b6:	46d9      	mov	r9, fp
 80085b8:	4682      	mov	sl, r0
 80085ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80085be:	2e00      	cmp	r6, #0
 80085c0:	d158      	bne.n	8008674 <_dtoa_r+0x4e4>
 80085c2:	4b7e      	ldr	r3, [pc, #504]	; (80087bc <_dtoa_r+0x62c>)
 80085c4:	2200      	movs	r2, #0
 80085c6:	4640      	mov	r0, r8
 80085c8:	4649      	mov	r1, r9
 80085ca:	f7f7 fe7d 	bl	80002c8 <__aeabi_dsub>
 80085ce:	4652      	mov	r2, sl
 80085d0:	465b      	mov	r3, fp
 80085d2:	4680      	mov	r8, r0
 80085d4:	4689      	mov	r9, r1
 80085d6:	f7f8 fabf 	bl	8000b58 <__aeabi_dcmpgt>
 80085da:	2800      	cmp	r0, #0
 80085dc:	f040 8295 	bne.w	8008b0a <_dtoa_r+0x97a>
 80085e0:	4652      	mov	r2, sl
 80085e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80085e6:	4640      	mov	r0, r8
 80085e8:	4649      	mov	r1, r9
 80085ea:	f7f8 fa97 	bl	8000b1c <__aeabi_dcmplt>
 80085ee:	2800      	cmp	r0, #0
 80085f0:	f040 8289 	bne.w	8008b06 <_dtoa_r+0x976>
 80085f4:	ec5b ab19 	vmov	sl, fp, d9
 80085f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	f2c0 8148 	blt.w	8008890 <_dtoa_r+0x700>
 8008600:	9a00      	ldr	r2, [sp, #0]
 8008602:	2a0e      	cmp	r2, #14
 8008604:	f300 8144 	bgt.w	8008890 <_dtoa_r+0x700>
 8008608:	4b67      	ldr	r3, [pc, #412]	; (80087a8 <_dtoa_r+0x618>)
 800860a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800860e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008614:	2b00      	cmp	r3, #0
 8008616:	f280 80d5 	bge.w	80087c4 <_dtoa_r+0x634>
 800861a:	9b03      	ldr	r3, [sp, #12]
 800861c:	2b00      	cmp	r3, #0
 800861e:	f300 80d1 	bgt.w	80087c4 <_dtoa_r+0x634>
 8008622:	f040 826f 	bne.w	8008b04 <_dtoa_r+0x974>
 8008626:	4b65      	ldr	r3, [pc, #404]	; (80087bc <_dtoa_r+0x62c>)
 8008628:	2200      	movs	r2, #0
 800862a:	4640      	mov	r0, r8
 800862c:	4649      	mov	r1, r9
 800862e:	f7f8 f803 	bl	8000638 <__aeabi_dmul>
 8008632:	4652      	mov	r2, sl
 8008634:	465b      	mov	r3, fp
 8008636:	f7f8 fa85 	bl	8000b44 <__aeabi_dcmpge>
 800863a:	9e03      	ldr	r6, [sp, #12]
 800863c:	4637      	mov	r7, r6
 800863e:	2800      	cmp	r0, #0
 8008640:	f040 8245 	bne.w	8008ace <_dtoa_r+0x93e>
 8008644:	9d01      	ldr	r5, [sp, #4]
 8008646:	2331      	movs	r3, #49	; 0x31
 8008648:	f805 3b01 	strb.w	r3, [r5], #1
 800864c:	9b00      	ldr	r3, [sp, #0]
 800864e:	3301      	adds	r3, #1
 8008650:	9300      	str	r3, [sp, #0]
 8008652:	e240      	b.n	8008ad6 <_dtoa_r+0x946>
 8008654:	07f2      	lsls	r2, r6, #31
 8008656:	d505      	bpl.n	8008664 <_dtoa_r+0x4d4>
 8008658:	e9d7 2300 	ldrd	r2, r3, [r7]
 800865c:	f7f7 ffec 	bl	8000638 <__aeabi_dmul>
 8008660:	3501      	adds	r5, #1
 8008662:	2301      	movs	r3, #1
 8008664:	1076      	asrs	r6, r6, #1
 8008666:	3708      	adds	r7, #8
 8008668:	e777      	b.n	800855a <_dtoa_r+0x3ca>
 800866a:	2502      	movs	r5, #2
 800866c:	e779      	b.n	8008562 <_dtoa_r+0x3d2>
 800866e:	9f00      	ldr	r7, [sp, #0]
 8008670:	9e03      	ldr	r6, [sp, #12]
 8008672:	e794      	b.n	800859e <_dtoa_r+0x40e>
 8008674:	9901      	ldr	r1, [sp, #4]
 8008676:	4b4c      	ldr	r3, [pc, #304]	; (80087a8 <_dtoa_r+0x618>)
 8008678:	4431      	add	r1, r6
 800867a:	910d      	str	r1, [sp, #52]	; 0x34
 800867c:	9908      	ldr	r1, [sp, #32]
 800867e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008682:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008686:	2900      	cmp	r1, #0
 8008688:	d043      	beq.n	8008712 <_dtoa_r+0x582>
 800868a:	494d      	ldr	r1, [pc, #308]	; (80087c0 <_dtoa_r+0x630>)
 800868c:	2000      	movs	r0, #0
 800868e:	f7f8 f8fd 	bl	800088c <__aeabi_ddiv>
 8008692:	4652      	mov	r2, sl
 8008694:	465b      	mov	r3, fp
 8008696:	f7f7 fe17 	bl	80002c8 <__aeabi_dsub>
 800869a:	9d01      	ldr	r5, [sp, #4]
 800869c:	4682      	mov	sl, r0
 800869e:	468b      	mov	fp, r1
 80086a0:	4649      	mov	r1, r9
 80086a2:	4640      	mov	r0, r8
 80086a4:	f7f8 fa78 	bl	8000b98 <__aeabi_d2iz>
 80086a8:	4606      	mov	r6, r0
 80086aa:	f7f7 ff5b 	bl	8000564 <__aeabi_i2d>
 80086ae:	4602      	mov	r2, r0
 80086b0:	460b      	mov	r3, r1
 80086b2:	4640      	mov	r0, r8
 80086b4:	4649      	mov	r1, r9
 80086b6:	f7f7 fe07 	bl	80002c8 <__aeabi_dsub>
 80086ba:	3630      	adds	r6, #48	; 0x30
 80086bc:	f805 6b01 	strb.w	r6, [r5], #1
 80086c0:	4652      	mov	r2, sl
 80086c2:	465b      	mov	r3, fp
 80086c4:	4680      	mov	r8, r0
 80086c6:	4689      	mov	r9, r1
 80086c8:	f7f8 fa28 	bl	8000b1c <__aeabi_dcmplt>
 80086cc:	2800      	cmp	r0, #0
 80086ce:	d163      	bne.n	8008798 <_dtoa_r+0x608>
 80086d0:	4642      	mov	r2, r8
 80086d2:	464b      	mov	r3, r9
 80086d4:	4936      	ldr	r1, [pc, #216]	; (80087b0 <_dtoa_r+0x620>)
 80086d6:	2000      	movs	r0, #0
 80086d8:	f7f7 fdf6 	bl	80002c8 <__aeabi_dsub>
 80086dc:	4652      	mov	r2, sl
 80086de:	465b      	mov	r3, fp
 80086e0:	f7f8 fa1c 	bl	8000b1c <__aeabi_dcmplt>
 80086e4:	2800      	cmp	r0, #0
 80086e6:	f040 80b5 	bne.w	8008854 <_dtoa_r+0x6c4>
 80086ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086ec:	429d      	cmp	r5, r3
 80086ee:	d081      	beq.n	80085f4 <_dtoa_r+0x464>
 80086f0:	4b30      	ldr	r3, [pc, #192]	; (80087b4 <_dtoa_r+0x624>)
 80086f2:	2200      	movs	r2, #0
 80086f4:	4650      	mov	r0, sl
 80086f6:	4659      	mov	r1, fp
 80086f8:	f7f7 ff9e 	bl	8000638 <__aeabi_dmul>
 80086fc:	4b2d      	ldr	r3, [pc, #180]	; (80087b4 <_dtoa_r+0x624>)
 80086fe:	4682      	mov	sl, r0
 8008700:	468b      	mov	fp, r1
 8008702:	4640      	mov	r0, r8
 8008704:	4649      	mov	r1, r9
 8008706:	2200      	movs	r2, #0
 8008708:	f7f7 ff96 	bl	8000638 <__aeabi_dmul>
 800870c:	4680      	mov	r8, r0
 800870e:	4689      	mov	r9, r1
 8008710:	e7c6      	b.n	80086a0 <_dtoa_r+0x510>
 8008712:	4650      	mov	r0, sl
 8008714:	4659      	mov	r1, fp
 8008716:	f7f7 ff8f 	bl	8000638 <__aeabi_dmul>
 800871a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800871c:	9d01      	ldr	r5, [sp, #4]
 800871e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008720:	4682      	mov	sl, r0
 8008722:	468b      	mov	fp, r1
 8008724:	4649      	mov	r1, r9
 8008726:	4640      	mov	r0, r8
 8008728:	f7f8 fa36 	bl	8000b98 <__aeabi_d2iz>
 800872c:	4606      	mov	r6, r0
 800872e:	f7f7 ff19 	bl	8000564 <__aeabi_i2d>
 8008732:	3630      	adds	r6, #48	; 0x30
 8008734:	4602      	mov	r2, r0
 8008736:	460b      	mov	r3, r1
 8008738:	4640      	mov	r0, r8
 800873a:	4649      	mov	r1, r9
 800873c:	f7f7 fdc4 	bl	80002c8 <__aeabi_dsub>
 8008740:	f805 6b01 	strb.w	r6, [r5], #1
 8008744:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008746:	429d      	cmp	r5, r3
 8008748:	4680      	mov	r8, r0
 800874a:	4689      	mov	r9, r1
 800874c:	f04f 0200 	mov.w	r2, #0
 8008750:	d124      	bne.n	800879c <_dtoa_r+0x60c>
 8008752:	4b1b      	ldr	r3, [pc, #108]	; (80087c0 <_dtoa_r+0x630>)
 8008754:	4650      	mov	r0, sl
 8008756:	4659      	mov	r1, fp
 8008758:	f7f7 fdb8 	bl	80002cc <__adddf3>
 800875c:	4602      	mov	r2, r0
 800875e:	460b      	mov	r3, r1
 8008760:	4640      	mov	r0, r8
 8008762:	4649      	mov	r1, r9
 8008764:	f7f8 f9f8 	bl	8000b58 <__aeabi_dcmpgt>
 8008768:	2800      	cmp	r0, #0
 800876a:	d173      	bne.n	8008854 <_dtoa_r+0x6c4>
 800876c:	4652      	mov	r2, sl
 800876e:	465b      	mov	r3, fp
 8008770:	4913      	ldr	r1, [pc, #76]	; (80087c0 <_dtoa_r+0x630>)
 8008772:	2000      	movs	r0, #0
 8008774:	f7f7 fda8 	bl	80002c8 <__aeabi_dsub>
 8008778:	4602      	mov	r2, r0
 800877a:	460b      	mov	r3, r1
 800877c:	4640      	mov	r0, r8
 800877e:	4649      	mov	r1, r9
 8008780:	f7f8 f9cc 	bl	8000b1c <__aeabi_dcmplt>
 8008784:	2800      	cmp	r0, #0
 8008786:	f43f af35 	beq.w	80085f4 <_dtoa_r+0x464>
 800878a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800878c:	1e6b      	subs	r3, r5, #1
 800878e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008790:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008794:	2b30      	cmp	r3, #48	; 0x30
 8008796:	d0f8      	beq.n	800878a <_dtoa_r+0x5fa>
 8008798:	9700      	str	r7, [sp, #0]
 800879a:	e049      	b.n	8008830 <_dtoa_r+0x6a0>
 800879c:	4b05      	ldr	r3, [pc, #20]	; (80087b4 <_dtoa_r+0x624>)
 800879e:	f7f7 ff4b 	bl	8000638 <__aeabi_dmul>
 80087a2:	4680      	mov	r8, r0
 80087a4:	4689      	mov	r9, r1
 80087a6:	e7bd      	b.n	8008724 <_dtoa_r+0x594>
 80087a8:	0800a708 	.word	0x0800a708
 80087ac:	0800a6e0 	.word	0x0800a6e0
 80087b0:	3ff00000 	.word	0x3ff00000
 80087b4:	40240000 	.word	0x40240000
 80087b8:	401c0000 	.word	0x401c0000
 80087bc:	40140000 	.word	0x40140000
 80087c0:	3fe00000 	.word	0x3fe00000
 80087c4:	9d01      	ldr	r5, [sp, #4]
 80087c6:	4656      	mov	r6, sl
 80087c8:	465f      	mov	r7, fp
 80087ca:	4642      	mov	r2, r8
 80087cc:	464b      	mov	r3, r9
 80087ce:	4630      	mov	r0, r6
 80087d0:	4639      	mov	r1, r7
 80087d2:	f7f8 f85b 	bl	800088c <__aeabi_ddiv>
 80087d6:	f7f8 f9df 	bl	8000b98 <__aeabi_d2iz>
 80087da:	4682      	mov	sl, r0
 80087dc:	f7f7 fec2 	bl	8000564 <__aeabi_i2d>
 80087e0:	4642      	mov	r2, r8
 80087e2:	464b      	mov	r3, r9
 80087e4:	f7f7 ff28 	bl	8000638 <__aeabi_dmul>
 80087e8:	4602      	mov	r2, r0
 80087ea:	460b      	mov	r3, r1
 80087ec:	4630      	mov	r0, r6
 80087ee:	4639      	mov	r1, r7
 80087f0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80087f4:	f7f7 fd68 	bl	80002c8 <__aeabi_dsub>
 80087f8:	f805 6b01 	strb.w	r6, [r5], #1
 80087fc:	9e01      	ldr	r6, [sp, #4]
 80087fe:	9f03      	ldr	r7, [sp, #12]
 8008800:	1bae      	subs	r6, r5, r6
 8008802:	42b7      	cmp	r7, r6
 8008804:	4602      	mov	r2, r0
 8008806:	460b      	mov	r3, r1
 8008808:	d135      	bne.n	8008876 <_dtoa_r+0x6e6>
 800880a:	f7f7 fd5f 	bl	80002cc <__adddf3>
 800880e:	4642      	mov	r2, r8
 8008810:	464b      	mov	r3, r9
 8008812:	4606      	mov	r6, r0
 8008814:	460f      	mov	r7, r1
 8008816:	f7f8 f99f 	bl	8000b58 <__aeabi_dcmpgt>
 800881a:	b9d0      	cbnz	r0, 8008852 <_dtoa_r+0x6c2>
 800881c:	4642      	mov	r2, r8
 800881e:	464b      	mov	r3, r9
 8008820:	4630      	mov	r0, r6
 8008822:	4639      	mov	r1, r7
 8008824:	f7f8 f970 	bl	8000b08 <__aeabi_dcmpeq>
 8008828:	b110      	cbz	r0, 8008830 <_dtoa_r+0x6a0>
 800882a:	f01a 0f01 	tst.w	sl, #1
 800882e:	d110      	bne.n	8008852 <_dtoa_r+0x6c2>
 8008830:	4620      	mov	r0, r4
 8008832:	ee18 1a10 	vmov	r1, s16
 8008836:	f000 faf3 	bl	8008e20 <_Bfree>
 800883a:	2300      	movs	r3, #0
 800883c:	9800      	ldr	r0, [sp, #0]
 800883e:	702b      	strb	r3, [r5, #0]
 8008840:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008842:	3001      	adds	r0, #1
 8008844:	6018      	str	r0, [r3, #0]
 8008846:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008848:	2b00      	cmp	r3, #0
 800884a:	f43f acf1 	beq.w	8008230 <_dtoa_r+0xa0>
 800884e:	601d      	str	r5, [r3, #0]
 8008850:	e4ee      	b.n	8008230 <_dtoa_r+0xa0>
 8008852:	9f00      	ldr	r7, [sp, #0]
 8008854:	462b      	mov	r3, r5
 8008856:	461d      	mov	r5, r3
 8008858:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800885c:	2a39      	cmp	r2, #57	; 0x39
 800885e:	d106      	bne.n	800886e <_dtoa_r+0x6de>
 8008860:	9a01      	ldr	r2, [sp, #4]
 8008862:	429a      	cmp	r2, r3
 8008864:	d1f7      	bne.n	8008856 <_dtoa_r+0x6c6>
 8008866:	9901      	ldr	r1, [sp, #4]
 8008868:	2230      	movs	r2, #48	; 0x30
 800886a:	3701      	adds	r7, #1
 800886c:	700a      	strb	r2, [r1, #0]
 800886e:	781a      	ldrb	r2, [r3, #0]
 8008870:	3201      	adds	r2, #1
 8008872:	701a      	strb	r2, [r3, #0]
 8008874:	e790      	b.n	8008798 <_dtoa_r+0x608>
 8008876:	4ba6      	ldr	r3, [pc, #664]	; (8008b10 <_dtoa_r+0x980>)
 8008878:	2200      	movs	r2, #0
 800887a:	f7f7 fedd 	bl	8000638 <__aeabi_dmul>
 800887e:	2200      	movs	r2, #0
 8008880:	2300      	movs	r3, #0
 8008882:	4606      	mov	r6, r0
 8008884:	460f      	mov	r7, r1
 8008886:	f7f8 f93f 	bl	8000b08 <__aeabi_dcmpeq>
 800888a:	2800      	cmp	r0, #0
 800888c:	d09d      	beq.n	80087ca <_dtoa_r+0x63a>
 800888e:	e7cf      	b.n	8008830 <_dtoa_r+0x6a0>
 8008890:	9a08      	ldr	r2, [sp, #32]
 8008892:	2a00      	cmp	r2, #0
 8008894:	f000 80d7 	beq.w	8008a46 <_dtoa_r+0x8b6>
 8008898:	9a06      	ldr	r2, [sp, #24]
 800889a:	2a01      	cmp	r2, #1
 800889c:	f300 80ba 	bgt.w	8008a14 <_dtoa_r+0x884>
 80088a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80088a2:	2a00      	cmp	r2, #0
 80088a4:	f000 80b2 	beq.w	8008a0c <_dtoa_r+0x87c>
 80088a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80088ac:	9e07      	ldr	r6, [sp, #28]
 80088ae:	9d04      	ldr	r5, [sp, #16]
 80088b0:	9a04      	ldr	r2, [sp, #16]
 80088b2:	441a      	add	r2, r3
 80088b4:	9204      	str	r2, [sp, #16]
 80088b6:	9a05      	ldr	r2, [sp, #20]
 80088b8:	2101      	movs	r1, #1
 80088ba:	441a      	add	r2, r3
 80088bc:	4620      	mov	r0, r4
 80088be:	9205      	str	r2, [sp, #20]
 80088c0:	f000 fb66 	bl	8008f90 <__i2b>
 80088c4:	4607      	mov	r7, r0
 80088c6:	2d00      	cmp	r5, #0
 80088c8:	dd0c      	ble.n	80088e4 <_dtoa_r+0x754>
 80088ca:	9b05      	ldr	r3, [sp, #20]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	dd09      	ble.n	80088e4 <_dtoa_r+0x754>
 80088d0:	42ab      	cmp	r3, r5
 80088d2:	9a04      	ldr	r2, [sp, #16]
 80088d4:	bfa8      	it	ge
 80088d6:	462b      	movge	r3, r5
 80088d8:	1ad2      	subs	r2, r2, r3
 80088da:	9204      	str	r2, [sp, #16]
 80088dc:	9a05      	ldr	r2, [sp, #20]
 80088de:	1aed      	subs	r5, r5, r3
 80088e0:	1ad3      	subs	r3, r2, r3
 80088e2:	9305      	str	r3, [sp, #20]
 80088e4:	9b07      	ldr	r3, [sp, #28]
 80088e6:	b31b      	cbz	r3, 8008930 <_dtoa_r+0x7a0>
 80088e8:	9b08      	ldr	r3, [sp, #32]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	f000 80af 	beq.w	8008a4e <_dtoa_r+0x8be>
 80088f0:	2e00      	cmp	r6, #0
 80088f2:	dd13      	ble.n	800891c <_dtoa_r+0x78c>
 80088f4:	4639      	mov	r1, r7
 80088f6:	4632      	mov	r2, r6
 80088f8:	4620      	mov	r0, r4
 80088fa:	f000 fc09 	bl	8009110 <__pow5mult>
 80088fe:	ee18 2a10 	vmov	r2, s16
 8008902:	4601      	mov	r1, r0
 8008904:	4607      	mov	r7, r0
 8008906:	4620      	mov	r0, r4
 8008908:	f000 fb58 	bl	8008fbc <__multiply>
 800890c:	ee18 1a10 	vmov	r1, s16
 8008910:	4680      	mov	r8, r0
 8008912:	4620      	mov	r0, r4
 8008914:	f000 fa84 	bl	8008e20 <_Bfree>
 8008918:	ee08 8a10 	vmov	s16, r8
 800891c:	9b07      	ldr	r3, [sp, #28]
 800891e:	1b9a      	subs	r2, r3, r6
 8008920:	d006      	beq.n	8008930 <_dtoa_r+0x7a0>
 8008922:	ee18 1a10 	vmov	r1, s16
 8008926:	4620      	mov	r0, r4
 8008928:	f000 fbf2 	bl	8009110 <__pow5mult>
 800892c:	ee08 0a10 	vmov	s16, r0
 8008930:	2101      	movs	r1, #1
 8008932:	4620      	mov	r0, r4
 8008934:	f000 fb2c 	bl	8008f90 <__i2b>
 8008938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800893a:	2b00      	cmp	r3, #0
 800893c:	4606      	mov	r6, r0
 800893e:	f340 8088 	ble.w	8008a52 <_dtoa_r+0x8c2>
 8008942:	461a      	mov	r2, r3
 8008944:	4601      	mov	r1, r0
 8008946:	4620      	mov	r0, r4
 8008948:	f000 fbe2 	bl	8009110 <__pow5mult>
 800894c:	9b06      	ldr	r3, [sp, #24]
 800894e:	2b01      	cmp	r3, #1
 8008950:	4606      	mov	r6, r0
 8008952:	f340 8081 	ble.w	8008a58 <_dtoa_r+0x8c8>
 8008956:	f04f 0800 	mov.w	r8, #0
 800895a:	6933      	ldr	r3, [r6, #16]
 800895c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008960:	6918      	ldr	r0, [r3, #16]
 8008962:	f000 fac5 	bl	8008ef0 <__hi0bits>
 8008966:	f1c0 0020 	rsb	r0, r0, #32
 800896a:	9b05      	ldr	r3, [sp, #20]
 800896c:	4418      	add	r0, r3
 800896e:	f010 001f 	ands.w	r0, r0, #31
 8008972:	f000 8092 	beq.w	8008a9a <_dtoa_r+0x90a>
 8008976:	f1c0 0320 	rsb	r3, r0, #32
 800897a:	2b04      	cmp	r3, #4
 800897c:	f340 808a 	ble.w	8008a94 <_dtoa_r+0x904>
 8008980:	f1c0 001c 	rsb	r0, r0, #28
 8008984:	9b04      	ldr	r3, [sp, #16]
 8008986:	4403      	add	r3, r0
 8008988:	9304      	str	r3, [sp, #16]
 800898a:	9b05      	ldr	r3, [sp, #20]
 800898c:	4403      	add	r3, r0
 800898e:	4405      	add	r5, r0
 8008990:	9305      	str	r3, [sp, #20]
 8008992:	9b04      	ldr	r3, [sp, #16]
 8008994:	2b00      	cmp	r3, #0
 8008996:	dd07      	ble.n	80089a8 <_dtoa_r+0x818>
 8008998:	ee18 1a10 	vmov	r1, s16
 800899c:	461a      	mov	r2, r3
 800899e:	4620      	mov	r0, r4
 80089a0:	f000 fc10 	bl	80091c4 <__lshift>
 80089a4:	ee08 0a10 	vmov	s16, r0
 80089a8:	9b05      	ldr	r3, [sp, #20]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	dd05      	ble.n	80089ba <_dtoa_r+0x82a>
 80089ae:	4631      	mov	r1, r6
 80089b0:	461a      	mov	r2, r3
 80089b2:	4620      	mov	r0, r4
 80089b4:	f000 fc06 	bl	80091c4 <__lshift>
 80089b8:	4606      	mov	r6, r0
 80089ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d06e      	beq.n	8008a9e <_dtoa_r+0x90e>
 80089c0:	ee18 0a10 	vmov	r0, s16
 80089c4:	4631      	mov	r1, r6
 80089c6:	f000 fc6d 	bl	80092a4 <__mcmp>
 80089ca:	2800      	cmp	r0, #0
 80089cc:	da67      	bge.n	8008a9e <_dtoa_r+0x90e>
 80089ce:	9b00      	ldr	r3, [sp, #0]
 80089d0:	3b01      	subs	r3, #1
 80089d2:	ee18 1a10 	vmov	r1, s16
 80089d6:	9300      	str	r3, [sp, #0]
 80089d8:	220a      	movs	r2, #10
 80089da:	2300      	movs	r3, #0
 80089dc:	4620      	mov	r0, r4
 80089de:	f000 fa41 	bl	8008e64 <__multadd>
 80089e2:	9b08      	ldr	r3, [sp, #32]
 80089e4:	ee08 0a10 	vmov	s16, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	f000 81b1 	beq.w	8008d50 <_dtoa_r+0xbc0>
 80089ee:	2300      	movs	r3, #0
 80089f0:	4639      	mov	r1, r7
 80089f2:	220a      	movs	r2, #10
 80089f4:	4620      	mov	r0, r4
 80089f6:	f000 fa35 	bl	8008e64 <__multadd>
 80089fa:	9b02      	ldr	r3, [sp, #8]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	4607      	mov	r7, r0
 8008a00:	f300 808e 	bgt.w	8008b20 <_dtoa_r+0x990>
 8008a04:	9b06      	ldr	r3, [sp, #24]
 8008a06:	2b02      	cmp	r3, #2
 8008a08:	dc51      	bgt.n	8008aae <_dtoa_r+0x91e>
 8008a0a:	e089      	b.n	8008b20 <_dtoa_r+0x990>
 8008a0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008a12:	e74b      	b.n	80088ac <_dtoa_r+0x71c>
 8008a14:	9b03      	ldr	r3, [sp, #12]
 8008a16:	1e5e      	subs	r6, r3, #1
 8008a18:	9b07      	ldr	r3, [sp, #28]
 8008a1a:	42b3      	cmp	r3, r6
 8008a1c:	bfbf      	itttt	lt
 8008a1e:	9b07      	ldrlt	r3, [sp, #28]
 8008a20:	9607      	strlt	r6, [sp, #28]
 8008a22:	1af2      	sublt	r2, r6, r3
 8008a24:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008a26:	bfb6      	itet	lt
 8008a28:	189b      	addlt	r3, r3, r2
 8008a2a:	1b9e      	subge	r6, r3, r6
 8008a2c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008a2e:	9b03      	ldr	r3, [sp, #12]
 8008a30:	bfb8      	it	lt
 8008a32:	2600      	movlt	r6, #0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	bfb7      	itett	lt
 8008a38:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008a3c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008a40:	1a9d      	sublt	r5, r3, r2
 8008a42:	2300      	movlt	r3, #0
 8008a44:	e734      	b.n	80088b0 <_dtoa_r+0x720>
 8008a46:	9e07      	ldr	r6, [sp, #28]
 8008a48:	9d04      	ldr	r5, [sp, #16]
 8008a4a:	9f08      	ldr	r7, [sp, #32]
 8008a4c:	e73b      	b.n	80088c6 <_dtoa_r+0x736>
 8008a4e:	9a07      	ldr	r2, [sp, #28]
 8008a50:	e767      	b.n	8008922 <_dtoa_r+0x792>
 8008a52:	9b06      	ldr	r3, [sp, #24]
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	dc18      	bgt.n	8008a8a <_dtoa_r+0x8fa>
 8008a58:	f1ba 0f00 	cmp.w	sl, #0
 8008a5c:	d115      	bne.n	8008a8a <_dtoa_r+0x8fa>
 8008a5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a62:	b993      	cbnz	r3, 8008a8a <_dtoa_r+0x8fa>
 8008a64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008a68:	0d1b      	lsrs	r3, r3, #20
 8008a6a:	051b      	lsls	r3, r3, #20
 8008a6c:	b183      	cbz	r3, 8008a90 <_dtoa_r+0x900>
 8008a6e:	9b04      	ldr	r3, [sp, #16]
 8008a70:	3301      	adds	r3, #1
 8008a72:	9304      	str	r3, [sp, #16]
 8008a74:	9b05      	ldr	r3, [sp, #20]
 8008a76:	3301      	adds	r3, #1
 8008a78:	9305      	str	r3, [sp, #20]
 8008a7a:	f04f 0801 	mov.w	r8, #1
 8008a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	f47f af6a 	bne.w	800895a <_dtoa_r+0x7ca>
 8008a86:	2001      	movs	r0, #1
 8008a88:	e76f      	b.n	800896a <_dtoa_r+0x7da>
 8008a8a:	f04f 0800 	mov.w	r8, #0
 8008a8e:	e7f6      	b.n	8008a7e <_dtoa_r+0x8ee>
 8008a90:	4698      	mov	r8, r3
 8008a92:	e7f4      	b.n	8008a7e <_dtoa_r+0x8ee>
 8008a94:	f43f af7d 	beq.w	8008992 <_dtoa_r+0x802>
 8008a98:	4618      	mov	r0, r3
 8008a9a:	301c      	adds	r0, #28
 8008a9c:	e772      	b.n	8008984 <_dtoa_r+0x7f4>
 8008a9e:	9b03      	ldr	r3, [sp, #12]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	dc37      	bgt.n	8008b14 <_dtoa_r+0x984>
 8008aa4:	9b06      	ldr	r3, [sp, #24]
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	dd34      	ble.n	8008b14 <_dtoa_r+0x984>
 8008aaa:	9b03      	ldr	r3, [sp, #12]
 8008aac:	9302      	str	r3, [sp, #8]
 8008aae:	9b02      	ldr	r3, [sp, #8]
 8008ab0:	b96b      	cbnz	r3, 8008ace <_dtoa_r+0x93e>
 8008ab2:	4631      	mov	r1, r6
 8008ab4:	2205      	movs	r2, #5
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	f000 f9d4 	bl	8008e64 <__multadd>
 8008abc:	4601      	mov	r1, r0
 8008abe:	4606      	mov	r6, r0
 8008ac0:	ee18 0a10 	vmov	r0, s16
 8008ac4:	f000 fbee 	bl	80092a4 <__mcmp>
 8008ac8:	2800      	cmp	r0, #0
 8008aca:	f73f adbb 	bgt.w	8008644 <_dtoa_r+0x4b4>
 8008ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ad0:	9d01      	ldr	r5, [sp, #4]
 8008ad2:	43db      	mvns	r3, r3
 8008ad4:	9300      	str	r3, [sp, #0]
 8008ad6:	f04f 0800 	mov.w	r8, #0
 8008ada:	4631      	mov	r1, r6
 8008adc:	4620      	mov	r0, r4
 8008ade:	f000 f99f 	bl	8008e20 <_Bfree>
 8008ae2:	2f00      	cmp	r7, #0
 8008ae4:	f43f aea4 	beq.w	8008830 <_dtoa_r+0x6a0>
 8008ae8:	f1b8 0f00 	cmp.w	r8, #0
 8008aec:	d005      	beq.n	8008afa <_dtoa_r+0x96a>
 8008aee:	45b8      	cmp	r8, r7
 8008af0:	d003      	beq.n	8008afa <_dtoa_r+0x96a>
 8008af2:	4641      	mov	r1, r8
 8008af4:	4620      	mov	r0, r4
 8008af6:	f000 f993 	bl	8008e20 <_Bfree>
 8008afa:	4639      	mov	r1, r7
 8008afc:	4620      	mov	r0, r4
 8008afe:	f000 f98f 	bl	8008e20 <_Bfree>
 8008b02:	e695      	b.n	8008830 <_dtoa_r+0x6a0>
 8008b04:	2600      	movs	r6, #0
 8008b06:	4637      	mov	r7, r6
 8008b08:	e7e1      	b.n	8008ace <_dtoa_r+0x93e>
 8008b0a:	9700      	str	r7, [sp, #0]
 8008b0c:	4637      	mov	r7, r6
 8008b0e:	e599      	b.n	8008644 <_dtoa_r+0x4b4>
 8008b10:	40240000 	.word	0x40240000
 8008b14:	9b08      	ldr	r3, [sp, #32]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	f000 80ca 	beq.w	8008cb0 <_dtoa_r+0xb20>
 8008b1c:	9b03      	ldr	r3, [sp, #12]
 8008b1e:	9302      	str	r3, [sp, #8]
 8008b20:	2d00      	cmp	r5, #0
 8008b22:	dd05      	ble.n	8008b30 <_dtoa_r+0x9a0>
 8008b24:	4639      	mov	r1, r7
 8008b26:	462a      	mov	r2, r5
 8008b28:	4620      	mov	r0, r4
 8008b2a:	f000 fb4b 	bl	80091c4 <__lshift>
 8008b2e:	4607      	mov	r7, r0
 8008b30:	f1b8 0f00 	cmp.w	r8, #0
 8008b34:	d05b      	beq.n	8008bee <_dtoa_r+0xa5e>
 8008b36:	6879      	ldr	r1, [r7, #4]
 8008b38:	4620      	mov	r0, r4
 8008b3a:	f000 f931 	bl	8008da0 <_Balloc>
 8008b3e:	4605      	mov	r5, r0
 8008b40:	b928      	cbnz	r0, 8008b4e <_dtoa_r+0x9be>
 8008b42:	4b87      	ldr	r3, [pc, #540]	; (8008d60 <_dtoa_r+0xbd0>)
 8008b44:	4602      	mov	r2, r0
 8008b46:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008b4a:	f7ff bb3b 	b.w	80081c4 <_dtoa_r+0x34>
 8008b4e:	693a      	ldr	r2, [r7, #16]
 8008b50:	3202      	adds	r2, #2
 8008b52:	0092      	lsls	r2, r2, #2
 8008b54:	f107 010c 	add.w	r1, r7, #12
 8008b58:	300c      	adds	r0, #12
 8008b5a:	f000 f913 	bl	8008d84 <memcpy>
 8008b5e:	2201      	movs	r2, #1
 8008b60:	4629      	mov	r1, r5
 8008b62:	4620      	mov	r0, r4
 8008b64:	f000 fb2e 	bl	80091c4 <__lshift>
 8008b68:	9b01      	ldr	r3, [sp, #4]
 8008b6a:	f103 0901 	add.w	r9, r3, #1
 8008b6e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008b72:	4413      	add	r3, r2
 8008b74:	9305      	str	r3, [sp, #20]
 8008b76:	f00a 0301 	and.w	r3, sl, #1
 8008b7a:	46b8      	mov	r8, r7
 8008b7c:	9304      	str	r3, [sp, #16]
 8008b7e:	4607      	mov	r7, r0
 8008b80:	4631      	mov	r1, r6
 8008b82:	ee18 0a10 	vmov	r0, s16
 8008b86:	f7ff fa75 	bl	8008074 <quorem>
 8008b8a:	4641      	mov	r1, r8
 8008b8c:	9002      	str	r0, [sp, #8]
 8008b8e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008b92:	ee18 0a10 	vmov	r0, s16
 8008b96:	f000 fb85 	bl	80092a4 <__mcmp>
 8008b9a:	463a      	mov	r2, r7
 8008b9c:	9003      	str	r0, [sp, #12]
 8008b9e:	4631      	mov	r1, r6
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	f000 fb9b 	bl	80092dc <__mdiff>
 8008ba6:	68c2      	ldr	r2, [r0, #12]
 8008ba8:	f109 3bff 	add.w	fp, r9, #4294967295
 8008bac:	4605      	mov	r5, r0
 8008bae:	bb02      	cbnz	r2, 8008bf2 <_dtoa_r+0xa62>
 8008bb0:	4601      	mov	r1, r0
 8008bb2:	ee18 0a10 	vmov	r0, s16
 8008bb6:	f000 fb75 	bl	80092a4 <__mcmp>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	4629      	mov	r1, r5
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	9207      	str	r2, [sp, #28]
 8008bc2:	f000 f92d 	bl	8008e20 <_Bfree>
 8008bc6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008bca:	ea43 0102 	orr.w	r1, r3, r2
 8008bce:	9b04      	ldr	r3, [sp, #16]
 8008bd0:	430b      	orrs	r3, r1
 8008bd2:	464d      	mov	r5, r9
 8008bd4:	d10f      	bne.n	8008bf6 <_dtoa_r+0xa66>
 8008bd6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008bda:	d02a      	beq.n	8008c32 <_dtoa_r+0xaa2>
 8008bdc:	9b03      	ldr	r3, [sp, #12]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	dd02      	ble.n	8008be8 <_dtoa_r+0xa58>
 8008be2:	9b02      	ldr	r3, [sp, #8]
 8008be4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008be8:	f88b a000 	strb.w	sl, [fp]
 8008bec:	e775      	b.n	8008ada <_dtoa_r+0x94a>
 8008bee:	4638      	mov	r0, r7
 8008bf0:	e7ba      	b.n	8008b68 <_dtoa_r+0x9d8>
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	e7e2      	b.n	8008bbc <_dtoa_r+0xa2c>
 8008bf6:	9b03      	ldr	r3, [sp, #12]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	db04      	blt.n	8008c06 <_dtoa_r+0xa76>
 8008bfc:	9906      	ldr	r1, [sp, #24]
 8008bfe:	430b      	orrs	r3, r1
 8008c00:	9904      	ldr	r1, [sp, #16]
 8008c02:	430b      	orrs	r3, r1
 8008c04:	d122      	bne.n	8008c4c <_dtoa_r+0xabc>
 8008c06:	2a00      	cmp	r2, #0
 8008c08:	ddee      	ble.n	8008be8 <_dtoa_r+0xa58>
 8008c0a:	ee18 1a10 	vmov	r1, s16
 8008c0e:	2201      	movs	r2, #1
 8008c10:	4620      	mov	r0, r4
 8008c12:	f000 fad7 	bl	80091c4 <__lshift>
 8008c16:	4631      	mov	r1, r6
 8008c18:	ee08 0a10 	vmov	s16, r0
 8008c1c:	f000 fb42 	bl	80092a4 <__mcmp>
 8008c20:	2800      	cmp	r0, #0
 8008c22:	dc03      	bgt.n	8008c2c <_dtoa_r+0xa9c>
 8008c24:	d1e0      	bne.n	8008be8 <_dtoa_r+0xa58>
 8008c26:	f01a 0f01 	tst.w	sl, #1
 8008c2a:	d0dd      	beq.n	8008be8 <_dtoa_r+0xa58>
 8008c2c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008c30:	d1d7      	bne.n	8008be2 <_dtoa_r+0xa52>
 8008c32:	2339      	movs	r3, #57	; 0x39
 8008c34:	f88b 3000 	strb.w	r3, [fp]
 8008c38:	462b      	mov	r3, r5
 8008c3a:	461d      	mov	r5, r3
 8008c3c:	3b01      	subs	r3, #1
 8008c3e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008c42:	2a39      	cmp	r2, #57	; 0x39
 8008c44:	d071      	beq.n	8008d2a <_dtoa_r+0xb9a>
 8008c46:	3201      	adds	r2, #1
 8008c48:	701a      	strb	r2, [r3, #0]
 8008c4a:	e746      	b.n	8008ada <_dtoa_r+0x94a>
 8008c4c:	2a00      	cmp	r2, #0
 8008c4e:	dd07      	ble.n	8008c60 <_dtoa_r+0xad0>
 8008c50:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008c54:	d0ed      	beq.n	8008c32 <_dtoa_r+0xaa2>
 8008c56:	f10a 0301 	add.w	r3, sl, #1
 8008c5a:	f88b 3000 	strb.w	r3, [fp]
 8008c5e:	e73c      	b.n	8008ada <_dtoa_r+0x94a>
 8008c60:	9b05      	ldr	r3, [sp, #20]
 8008c62:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008c66:	4599      	cmp	r9, r3
 8008c68:	d047      	beq.n	8008cfa <_dtoa_r+0xb6a>
 8008c6a:	ee18 1a10 	vmov	r1, s16
 8008c6e:	2300      	movs	r3, #0
 8008c70:	220a      	movs	r2, #10
 8008c72:	4620      	mov	r0, r4
 8008c74:	f000 f8f6 	bl	8008e64 <__multadd>
 8008c78:	45b8      	cmp	r8, r7
 8008c7a:	ee08 0a10 	vmov	s16, r0
 8008c7e:	f04f 0300 	mov.w	r3, #0
 8008c82:	f04f 020a 	mov.w	r2, #10
 8008c86:	4641      	mov	r1, r8
 8008c88:	4620      	mov	r0, r4
 8008c8a:	d106      	bne.n	8008c9a <_dtoa_r+0xb0a>
 8008c8c:	f000 f8ea 	bl	8008e64 <__multadd>
 8008c90:	4680      	mov	r8, r0
 8008c92:	4607      	mov	r7, r0
 8008c94:	f109 0901 	add.w	r9, r9, #1
 8008c98:	e772      	b.n	8008b80 <_dtoa_r+0x9f0>
 8008c9a:	f000 f8e3 	bl	8008e64 <__multadd>
 8008c9e:	4639      	mov	r1, r7
 8008ca0:	4680      	mov	r8, r0
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	220a      	movs	r2, #10
 8008ca6:	4620      	mov	r0, r4
 8008ca8:	f000 f8dc 	bl	8008e64 <__multadd>
 8008cac:	4607      	mov	r7, r0
 8008cae:	e7f1      	b.n	8008c94 <_dtoa_r+0xb04>
 8008cb0:	9b03      	ldr	r3, [sp, #12]
 8008cb2:	9302      	str	r3, [sp, #8]
 8008cb4:	9d01      	ldr	r5, [sp, #4]
 8008cb6:	ee18 0a10 	vmov	r0, s16
 8008cba:	4631      	mov	r1, r6
 8008cbc:	f7ff f9da 	bl	8008074 <quorem>
 8008cc0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008cc4:	9b01      	ldr	r3, [sp, #4]
 8008cc6:	f805 ab01 	strb.w	sl, [r5], #1
 8008cca:	1aea      	subs	r2, r5, r3
 8008ccc:	9b02      	ldr	r3, [sp, #8]
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	dd09      	ble.n	8008ce6 <_dtoa_r+0xb56>
 8008cd2:	ee18 1a10 	vmov	r1, s16
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	220a      	movs	r2, #10
 8008cda:	4620      	mov	r0, r4
 8008cdc:	f000 f8c2 	bl	8008e64 <__multadd>
 8008ce0:	ee08 0a10 	vmov	s16, r0
 8008ce4:	e7e7      	b.n	8008cb6 <_dtoa_r+0xb26>
 8008ce6:	9b02      	ldr	r3, [sp, #8]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	bfc8      	it	gt
 8008cec:	461d      	movgt	r5, r3
 8008cee:	9b01      	ldr	r3, [sp, #4]
 8008cf0:	bfd8      	it	le
 8008cf2:	2501      	movle	r5, #1
 8008cf4:	441d      	add	r5, r3
 8008cf6:	f04f 0800 	mov.w	r8, #0
 8008cfa:	ee18 1a10 	vmov	r1, s16
 8008cfe:	2201      	movs	r2, #1
 8008d00:	4620      	mov	r0, r4
 8008d02:	f000 fa5f 	bl	80091c4 <__lshift>
 8008d06:	4631      	mov	r1, r6
 8008d08:	ee08 0a10 	vmov	s16, r0
 8008d0c:	f000 faca 	bl	80092a4 <__mcmp>
 8008d10:	2800      	cmp	r0, #0
 8008d12:	dc91      	bgt.n	8008c38 <_dtoa_r+0xaa8>
 8008d14:	d102      	bne.n	8008d1c <_dtoa_r+0xb8c>
 8008d16:	f01a 0f01 	tst.w	sl, #1
 8008d1a:	d18d      	bne.n	8008c38 <_dtoa_r+0xaa8>
 8008d1c:	462b      	mov	r3, r5
 8008d1e:	461d      	mov	r5, r3
 8008d20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d24:	2a30      	cmp	r2, #48	; 0x30
 8008d26:	d0fa      	beq.n	8008d1e <_dtoa_r+0xb8e>
 8008d28:	e6d7      	b.n	8008ada <_dtoa_r+0x94a>
 8008d2a:	9a01      	ldr	r2, [sp, #4]
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d184      	bne.n	8008c3a <_dtoa_r+0xaaa>
 8008d30:	9b00      	ldr	r3, [sp, #0]
 8008d32:	3301      	adds	r3, #1
 8008d34:	9300      	str	r3, [sp, #0]
 8008d36:	2331      	movs	r3, #49	; 0x31
 8008d38:	7013      	strb	r3, [r2, #0]
 8008d3a:	e6ce      	b.n	8008ada <_dtoa_r+0x94a>
 8008d3c:	4b09      	ldr	r3, [pc, #36]	; (8008d64 <_dtoa_r+0xbd4>)
 8008d3e:	f7ff ba95 	b.w	800826c <_dtoa_r+0xdc>
 8008d42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	f47f aa6e 	bne.w	8008226 <_dtoa_r+0x96>
 8008d4a:	4b07      	ldr	r3, [pc, #28]	; (8008d68 <_dtoa_r+0xbd8>)
 8008d4c:	f7ff ba8e 	b.w	800826c <_dtoa_r+0xdc>
 8008d50:	9b02      	ldr	r3, [sp, #8]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	dcae      	bgt.n	8008cb4 <_dtoa_r+0xb24>
 8008d56:	9b06      	ldr	r3, [sp, #24]
 8008d58:	2b02      	cmp	r3, #2
 8008d5a:	f73f aea8 	bgt.w	8008aae <_dtoa_r+0x91e>
 8008d5e:	e7a9      	b.n	8008cb4 <_dtoa_r+0xb24>
 8008d60:	0800a66f 	.word	0x0800a66f
 8008d64:	0800a5cc 	.word	0x0800a5cc
 8008d68:	0800a5f0 	.word	0x0800a5f0

08008d6c <_localeconv_r>:
 8008d6c:	4800      	ldr	r0, [pc, #0]	; (8008d70 <_localeconv_r+0x4>)
 8008d6e:	4770      	bx	lr
 8008d70:	20000178 	.word	0x20000178

08008d74 <malloc>:
 8008d74:	4b02      	ldr	r3, [pc, #8]	; (8008d80 <malloc+0xc>)
 8008d76:	4601      	mov	r1, r0
 8008d78:	6818      	ldr	r0, [r3, #0]
 8008d7a:	f000 bc17 	b.w	80095ac <_malloc_r>
 8008d7e:	bf00      	nop
 8008d80:	20000024 	.word	0x20000024

08008d84 <memcpy>:
 8008d84:	440a      	add	r2, r1
 8008d86:	4291      	cmp	r1, r2
 8008d88:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d8c:	d100      	bne.n	8008d90 <memcpy+0xc>
 8008d8e:	4770      	bx	lr
 8008d90:	b510      	push	{r4, lr}
 8008d92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d9a:	4291      	cmp	r1, r2
 8008d9c:	d1f9      	bne.n	8008d92 <memcpy+0xe>
 8008d9e:	bd10      	pop	{r4, pc}

08008da0 <_Balloc>:
 8008da0:	b570      	push	{r4, r5, r6, lr}
 8008da2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008da4:	4604      	mov	r4, r0
 8008da6:	460d      	mov	r5, r1
 8008da8:	b976      	cbnz	r6, 8008dc8 <_Balloc+0x28>
 8008daa:	2010      	movs	r0, #16
 8008dac:	f7ff ffe2 	bl	8008d74 <malloc>
 8008db0:	4602      	mov	r2, r0
 8008db2:	6260      	str	r0, [r4, #36]	; 0x24
 8008db4:	b920      	cbnz	r0, 8008dc0 <_Balloc+0x20>
 8008db6:	4b18      	ldr	r3, [pc, #96]	; (8008e18 <_Balloc+0x78>)
 8008db8:	4818      	ldr	r0, [pc, #96]	; (8008e1c <_Balloc+0x7c>)
 8008dba:	2166      	movs	r1, #102	; 0x66
 8008dbc:	f000 fdd6 	bl	800996c <__assert_func>
 8008dc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008dc4:	6006      	str	r6, [r0, #0]
 8008dc6:	60c6      	str	r6, [r0, #12]
 8008dc8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008dca:	68f3      	ldr	r3, [r6, #12]
 8008dcc:	b183      	cbz	r3, 8008df0 <_Balloc+0x50>
 8008dce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008dd0:	68db      	ldr	r3, [r3, #12]
 8008dd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008dd6:	b9b8      	cbnz	r0, 8008e08 <_Balloc+0x68>
 8008dd8:	2101      	movs	r1, #1
 8008dda:	fa01 f605 	lsl.w	r6, r1, r5
 8008dde:	1d72      	adds	r2, r6, #5
 8008de0:	0092      	lsls	r2, r2, #2
 8008de2:	4620      	mov	r0, r4
 8008de4:	f000 fb60 	bl	80094a8 <_calloc_r>
 8008de8:	b160      	cbz	r0, 8008e04 <_Balloc+0x64>
 8008dea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008dee:	e00e      	b.n	8008e0e <_Balloc+0x6e>
 8008df0:	2221      	movs	r2, #33	; 0x21
 8008df2:	2104      	movs	r1, #4
 8008df4:	4620      	mov	r0, r4
 8008df6:	f000 fb57 	bl	80094a8 <_calloc_r>
 8008dfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008dfc:	60f0      	str	r0, [r6, #12]
 8008dfe:	68db      	ldr	r3, [r3, #12]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d1e4      	bne.n	8008dce <_Balloc+0x2e>
 8008e04:	2000      	movs	r0, #0
 8008e06:	bd70      	pop	{r4, r5, r6, pc}
 8008e08:	6802      	ldr	r2, [r0, #0]
 8008e0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008e0e:	2300      	movs	r3, #0
 8008e10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e14:	e7f7      	b.n	8008e06 <_Balloc+0x66>
 8008e16:	bf00      	nop
 8008e18:	0800a5fd 	.word	0x0800a5fd
 8008e1c:	0800a680 	.word	0x0800a680

08008e20 <_Bfree>:
 8008e20:	b570      	push	{r4, r5, r6, lr}
 8008e22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e24:	4605      	mov	r5, r0
 8008e26:	460c      	mov	r4, r1
 8008e28:	b976      	cbnz	r6, 8008e48 <_Bfree+0x28>
 8008e2a:	2010      	movs	r0, #16
 8008e2c:	f7ff ffa2 	bl	8008d74 <malloc>
 8008e30:	4602      	mov	r2, r0
 8008e32:	6268      	str	r0, [r5, #36]	; 0x24
 8008e34:	b920      	cbnz	r0, 8008e40 <_Bfree+0x20>
 8008e36:	4b09      	ldr	r3, [pc, #36]	; (8008e5c <_Bfree+0x3c>)
 8008e38:	4809      	ldr	r0, [pc, #36]	; (8008e60 <_Bfree+0x40>)
 8008e3a:	218a      	movs	r1, #138	; 0x8a
 8008e3c:	f000 fd96 	bl	800996c <__assert_func>
 8008e40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e44:	6006      	str	r6, [r0, #0]
 8008e46:	60c6      	str	r6, [r0, #12]
 8008e48:	b13c      	cbz	r4, 8008e5a <_Bfree+0x3a>
 8008e4a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008e4c:	6862      	ldr	r2, [r4, #4]
 8008e4e:	68db      	ldr	r3, [r3, #12]
 8008e50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e54:	6021      	str	r1, [r4, #0]
 8008e56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008e5a:	bd70      	pop	{r4, r5, r6, pc}
 8008e5c:	0800a5fd 	.word	0x0800a5fd
 8008e60:	0800a680 	.word	0x0800a680

08008e64 <__multadd>:
 8008e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e68:	690d      	ldr	r5, [r1, #16]
 8008e6a:	4607      	mov	r7, r0
 8008e6c:	460c      	mov	r4, r1
 8008e6e:	461e      	mov	r6, r3
 8008e70:	f101 0c14 	add.w	ip, r1, #20
 8008e74:	2000      	movs	r0, #0
 8008e76:	f8dc 3000 	ldr.w	r3, [ip]
 8008e7a:	b299      	uxth	r1, r3
 8008e7c:	fb02 6101 	mla	r1, r2, r1, r6
 8008e80:	0c1e      	lsrs	r6, r3, #16
 8008e82:	0c0b      	lsrs	r3, r1, #16
 8008e84:	fb02 3306 	mla	r3, r2, r6, r3
 8008e88:	b289      	uxth	r1, r1
 8008e8a:	3001      	adds	r0, #1
 8008e8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008e90:	4285      	cmp	r5, r0
 8008e92:	f84c 1b04 	str.w	r1, [ip], #4
 8008e96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008e9a:	dcec      	bgt.n	8008e76 <__multadd+0x12>
 8008e9c:	b30e      	cbz	r6, 8008ee2 <__multadd+0x7e>
 8008e9e:	68a3      	ldr	r3, [r4, #8]
 8008ea0:	42ab      	cmp	r3, r5
 8008ea2:	dc19      	bgt.n	8008ed8 <__multadd+0x74>
 8008ea4:	6861      	ldr	r1, [r4, #4]
 8008ea6:	4638      	mov	r0, r7
 8008ea8:	3101      	adds	r1, #1
 8008eaa:	f7ff ff79 	bl	8008da0 <_Balloc>
 8008eae:	4680      	mov	r8, r0
 8008eb0:	b928      	cbnz	r0, 8008ebe <__multadd+0x5a>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	4b0c      	ldr	r3, [pc, #48]	; (8008ee8 <__multadd+0x84>)
 8008eb6:	480d      	ldr	r0, [pc, #52]	; (8008eec <__multadd+0x88>)
 8008eb8:	21b5      	movs	r1, #181	; 0xb5
 8008eba:	f000 fd57 	bl	800996c <__assert_func>
 8008ebe:	6922      	ldr	r2, [r4, #16]
 8008ec0:	3202      	adds	r2, #2
 8008ec2:	f104 010c 	add.w	r1, r4, #12
 8008ec6:	0092      	lsls	r2, r2, #2
 8008ec8:	300c      	adds	r0, #12
 8008eca:	f7ff ff5b 	bl	8008d84 <memcpy>
 8008ece:	4621      	mov	r1, r4
 8008ed0:	4638      	mov	r0, r7
 8008ed2:	f7ff ffa5 	bl	8008e20 <_Bfree>
 8008ed6:	4644      	mov	r4, r8
 8008ed8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008edc:	3501      	adds	r5, #1
 8008ede:	615e      	str	r6, [r3, #20]
 8008ee0:	6125      	str	r5, [r4, #16]
 8008ee2:	4620      	mov	r0, r4
 8008ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ee8:	0800a66f 	.word	0x0800a66f
 8008eec:	0800a680 	.word	0x0800a680

08008ef0 <__hi0bits>:
 8008ef0:	0c03      	lsrs	r3, r0, #16
 8008ef2:	041b      	lsls	r3, r3, #16
 8008ef4:	b9d3      	cbnz	r3, 8008f2c <__hi0bits+0x3c>
 8008ef6:	0400      	lsls	r0, r0, #16
 8008ef8:	2310      	movs	r3, #16
 8008efa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008efe:	bf04      	itt	eq
 8008f00:	0200      	lsleq	r0, r0, #8
 8008f02:	3308      	addeq	r3, #8
 8008f04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008f08:	bf04      	itt	eq
 8008f0a:	0100      	lsleq	r0, r0, #4
 8008f0c:	3304      	addeq	r3, #4
 8008f0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008f12:	bf04      	itt	eq
 8008f14:	0080      	lsleq	r0, r0, #2
 8008f16:	3302      	addeq	r3, #2
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	db05      	blt.n	8008f28 <__hi0bits+0x38>
 8008f1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008f20:	f103 0301 	add.w	r3, r3, #1
 8008f24:	bf08      	it	eq
 8008f26:	2320      	moveq	r3, #32
 8008f28:	4618      	mov	r0, r3
 8008f2a:	4770      	bx	lr
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	e7e4      	b.n	8008efa <__hi0bits+0xa>

08008f30 <__lo0bits>:
 8008f30:	6803      	ldr	r3, [r0, #0]
 8008f32:	f013 0207 	ands.w	r2, r3, #7
 8008f36:	4601      	mov	r1, r0
 8008f38:	d00b      	beq.n	8008f52 <__lo0bits+0x22>
 8008f3a:	07da      	lsls	r2, r3, #31
 8008f3c:	d423      	bmi.n	8008f86 <__lo0bits+0x56>
 8008f3e:	0798      	lsls	r0, r3, #30
 8008f40:	bf49      	itett	mi
 8008f42:	085b      	lsrmi	r3, r3, #1
 8008f44:	089b      	lsrpl	r3, r3, #2
 8008f46:	2001      	movmi	r0, #1
 8008f48:	600b      	strmi	r3, [r1, #0]
 8008f4a:	bf5c      	itt	pl
 8008f4c:	600b      	strpl	r3, [r1, #0]
 8008f4e:	2002      	movpl	r0, #2
 8008f50:	4770      	bx	lr
 8008f52:	b298      	uxth	r0, r3
 8008f54:	b9a8      	cbnz	r0, 8008f82 <__lo0bits+0x52>
 8008f56:	0c1b      	lsrs	r3, r3, #16
 8008f58:	2010      	movs	r0, #16
 8008f5a:	b2da      	uxtb	r2, r3
 8008f5c:	b90a      	cbnz	r2, 8008f62 <__lo0bits+0x32>
 8008f5e:	3008      	adds	r0, #8
 8008f60:	0a1b      	lsrs	r3, r3, #8
 8008f62:	071a      	lsls	r2, r3, #28
 8008f64:	bf04      	itt	eq
 8008f66:	091b      	lsreq	r3, r3, #4
 8008f68:	3004      	addeq	r0, #4
 8008f6a:	079a      	lsls	r2, r3, #30
 8008f6c:	bf04      	itt	eq
 8008f6e:	089b      	lsreq	r3, r3, #2
 8008f70:	3002      	addeq	r0, #2
 8008f72:	07da      	lsls	r2, r3, #31
 8008f74:	d403      	bmi.n	8008f7e <__lo0bits+0x4e>
 8008f76:	085b      	lsrs	r3, r3, #1
 8008f78:	f100 0001 	add.w	r0, r0, #1
 8008f7c:	d005      	beq.n	8008f8a <__lo0bits+0x5a>
 8008f7e:	600b      	str	r3, [r1, #0]
 8008f80:	4770      	bx	lr
 8008f82:	4610      	mov	r0, r2
 8008f84:	e7e9      	b.n	8008f5a <__lo0bits+0x2a>
 8008f86:	2000      	movs	r0, #0
 8008f88:	4770      	bx	lr
 8008f8a:	2020      	movs	r0, #32
 8008f8c:	4770      	bx	lr
	...

08008f90 <__i2b>:
 8008f90:	b510      	push	{r4, lr}
 8008f92:	460c      	mov	r4, r1
 8008f94:	2101      	movs	r1, #1
 8008f96:	f7ff ff03 	bl	8008da0 <_Balloc>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	b928      	cbnz	r0, 8008faa <__i2b+0x1a>
 8008f9e:	4b05      	ldr	r3, [pc, #20]	; (8008fb4 <__i2b+0x24>)
 8008fa0:	4805      	ldr	r0, [pc, #20]	; (8008fb8 <__i2b+0x28>)
 8008fa2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008fa6:	f000 fce1 	bl	800996c <__assert_func>
 8008faa:	2301      	movs	r3, #1
 8008fac:	6144      	str	r4, [r0, #20]
 8008fae:	6103      	str	r3, [r0, #16]
 8008fb0:	bd10      	pop	{r4, pc}
 8008fb2:	bf00      	nop
 8008fb4:	0800a66f 	.word	0x0800a66f
 8008fb8:	0800a680 	.word	0x0800a680

08008fbc <__multiply>:
 8008fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fc0:	4691      	mov	r9, r2
 8008fc2:	690a      	ldr	r2, [r1, #16]
 8008fc4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	bfb8      	it	lt
 8008fcc:	460b      	movlt	r3, r1
 8008fce:	460c      	mov	r4, r1
 8008fd0:	bfbc      	itt	lt
 8008fd2:	464c      	movlt	r4, r9
 8008fd4:	4699      	movlt	r9, r3
 8008fd6:	6927      	ldr	r7, [r4, #16]
 8008fd8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008fdc:	68a3      	ldr	r3, [r4, #8]
 8008fde:	6861      	ldr	r1, [r4, #4]
 8008fe0:	eb07 060a 	add.w	r6, r7, sl
 8008fe4:	42b3      	cmp	r3, r6
 8008fe6:	b085      	sub	sp, #20
 8008fe8:	bfb8      	it	lt
 8008fea:	3101      	addlt	r1, #1
 8008fec:	f7ff fed8 	bl	8008da0 <_Balloc>
 8008ff0:	b930      	cbnz	r0, 8009000 <__multiply+0x44>
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	4b44      	ldr	r3, [pc, #272]	; (8009108 <__multiply+0x14c>)
 8008ff6:	4845      	ldr	r0, [pc, #276]	; (800910c <__multiply+0x150>)
 8008ff8:	f240 115d 	movw	r1, #349	; 0x15d
 8008ffc:	f000 fcb6 	bl	800996c <__assert_func>
 8009000:	f100 0514 	add.w	r5, r0, #20
 8009004:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009008:	462b      	mov	r3, r5
 800900a:	2200      	movs	r2, #0
 800900c:	4543      	cmp	r3, r8
 800900e:	d321      	bcc.n	8009054 <__multiply+0x98>
 8009010:	f104 0314 	add.w	r3, r4, #20
 8009014:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009018:	f109 0314 	add.w	r3, r9, #20
 800901c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009020:	9202      	str	r2, [sp, #8]
 8009022:	1b3a      	subs	r2, r7, r4
 8009024:	3a15      	subs	r2, #21
 8009026:	f022 0203 	bic.w	r2, r2, #3
 800902a:	3204      	adds	r2, #4
 800902c:	f104 0115 	add.w	r1, r4, #21
 8009030:	428f      	cmp	r7, r1
 8009032:	bf38      	it	cc
 8009034:	2204      	movcc	r2, #4
 8009036:	9201      	str	r2, [sp, #4]
 8009038:	9a02      	ldr	r2, [sp, #8]
 800903a:	9303      	str	r3, [sp, #12]
 800903c:	429a      	cmp	r2, r3
 800903e:	d80c      	bhi.n	800905a <__multiply+0x9e>
 8009040:	2e00      	cmp	r6, #0
 8009042:	dd03      	ble.n	800904c <__multiply+0x90>
 8009044:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009048:	2b00      	cmp	r3, #0
 800904a:	d05a      	beq.n	8009102 <__multiply+0x146>
 800904c:	6106      	str	r6, [r0, #16]
 800904e:	b005      	add	sp, #20
 8009050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009054:	f843 2b04 	str.w	r2, [r3], #4
 8009058:	e7d8      	b.n	800900c <__multiply+0x50>
 800905a:	f8b3 a000 	ldrh.w	sl, [r3]
 800905e:	f1ba 0f00 	cmp.w	sl, #0
 8009062:	d024      	beq.n	80090ae <__multiply+0xf2>
 8009064:	f104 0e14 	add.w	lr, r4, #20
 8009068:	46a9      	mov	r9, r5
 800906a:	f04f 0c00 	mov.w	ip, #0
 800906e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009072:	f8d9 1000 	ldr.w	r1, [r9]
 8009076:	fa1f fb82 	uxth.w	fp, r2
 800907a:	b289      	uxth	r1, r1
 800907c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009080:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009084:	f8d9 2000 	ldr.w	r2, [r9]
 8009088:	4461      	add	r1, ip
 800908a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800908e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009092:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009096:	b289      	uxth	r1, r1
 8009098:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800909c:	4577      	cmp	r7, lr
 800909e:	f849 1b04 	str.w	r1, [r9], #4
 80090a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80090a6:	d8e2      	bhi.n	800906e <__multiply+0xb2>
 80090a8:	9a01      	ldr	r2, [sp, #4]
 80090aa:	f845 c002 	str.w	ip, [r5, r2]
 80090ae:	9a03      	ldr	r2, [sp, #12]
 80090b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80090b4:	3304      	adds	r3, #4
 80090b6:	f1b9 0f00 	cmp.w	r9, #0
 80090ba:	d020      	beq.n	80090fe <__multiply+0x142>
 80090bc:	6829      	ldr	r1, [r5, #0]
 80090be:	f104 0c14 	add.w	ip, r4, #20
 80090c2:	46ae      	mov	lr, r5
 80090c4:	f04f 0a00 	mov.w	sl, #0
 80090c8:	f8bc b000 	ldrh.w	fp, [ip]
 80090cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80090d0:	fb09 220b 	mla	r2, r9, fp, r2
 80090d4:	4492      	add	sl, r2
 80090d6:	b289      	uxth	r1, r1
 80090d8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80090dc:	f84e 1b04 	str.w	r1, [lr], #4
 80090e0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80090e4:	f8be 1000 	ldrh.w	r1, [lr]
 80090e8:	0c12      	lsrs	r2, r2, #16
 80090ea:	fb09 1102 	mla	r1, r9, r2, r1
 80090ee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80090f2:	4567      	cmp	r7, ip
 80090f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80090f8:	d8e6      	bhi.n	80090c8 <__multiply+0x10c>
 80090fa:	9a01      	ldr	r2, [sp, #4]
 80090fc:	50a9      	str	r1, [r5, r2]
 80090fe:	3504      	adds	r5, #4
 8009100:	e79a      	b.n	8009038 <__multiply+0x7c>
 8009102:	3e01      	subs	r6, #1
 8009104:	e79c      	b.n	8009040 <__multiply+0x84>
 8009106:	bf00      	nop
 8009108:	0800a66f 	.word	0x0800a66f
 800910c:	0800a680 	.word	0x0800a680

08009110 <__pow5mult>:
 8009110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009114:	4615      	mov	r5, r2
 8009116:	f012 0203 	ands.w	r2, r2, #3
 800911a:	4606      	mov	r6, r0
 800911c:	460f      	mov	r7, r1
 800911e:	d007      	beq.n	8009130 <__pow5mult+0x20>
 8009120:	4c25      	ldr	r4, [pc, #148]	; (80091b8 <__pow5mult+0xa8>)
 8009122:	3a01      	subs	r2, #1
 8009124:	2300      	movs	r3, #0
 8009126:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800912a:	f7ff fe9b 	bl	8008e64 <__multadd>
 800912e:	4607      	mov	r7, r0
 8009130:	10ad      	asrs	r5, r5, #2
 8009132:	d03d      	beq.n	80091b0 <__pow5mult+0xa0>
 8009134:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009136:	b97c      	cbnz	r4, 8009158 <__pow5mult+0x48>
 8009138:	2010      	movs	r0, #16
 800913a:	f7ff fe1b 	bl	8008d74 <malloc>
 800913e:	4602      	mov	r2, r0
 8009140:	6270      	str	r0, [r6, #36]	; 0x24
 8009142:	b928      	cbnz	r0, 8009150 <__pow5mult+0x40>
 8009144:	4b1d      	ldr	r3, [pc, #116]	; (80091bc <__pow5mult+0xac>)
 8009146:	481e      	ldr	r0, [pc, #120]	; (80091c0 <__pow5mult+0xb0>)
 8009148:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800914c:	f000 fc0e 	bl	800996c <__assert_func>
 8009150:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009154:	6004      	str	r4, [r0, #0]
 8009156:	60c4      	str	r4, [r0, #12]
 8009158:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800915c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009160:	b94c      	cbnz	r4, 8009176 <__pow5mult+0x66>
 8009162:	f240 2171 	movw	r1, #625	; 0x271
 8009166:	4630      	mov	r0, r6
 8009168:	f7ff ff12 	bl	8008f90 <__i2b>
 800916c:	2300      	movs	r3, #0
 800916e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009172:	4604      	mov	r4, r0
 8009174:	6003      	str	r3, [r0, #0]
 8009176:	f04f 0900 	mov.w	r9, #0
 800917a:	07eb      	lsls	r3, r5, #31
 800917c:	d50a      	bpl.n	8009194 <__pow5mult+0x84>
 800917e:	4639      	mov	r1, r7
 8009180:	4622      	mov	r2, r4
 8009182:	4630      	mov	r0, r6
 8009184:	f7ff ff1a 	bl	8008fbc <__multiply>
 8009188:	4639      	mov	r1, r7
 800918a:	4680      	mov	r8, r0
 800918c:	4630      	mov	r0, r6
 800918e:	f7ff fe47 	bl	8008e20 <_Bfree>
 8009192:	4647      	mov	r7, r8
 8009194:	106d      	asrs	r5, r5, #1
 8009196:	d00b      	beq.n	80091b0 <__pow5mult+0xa0>
 8009198:	6820      	ldr	r0, [r4, #0]
 800919a:	b938      	cbnz	r0, 80091ac <__pow5mult+0x9c>
 800919c:	4622      	mov	r2, r4
 800919e:	4621      	mov	r1, r4
 80091a0:	4630      	mov	r0, r6
 80091a2:	f7ff ff0b 	bl	8008fbc <__multiply>
 80091a6:	6020      	str	r0, [r4, #0]
 80091a8:	f8c0 9000 	str.w	r9, [r0]
 80091ac:	4604      	mov	r4, r0
 80091ae:	e7e4      	b.n	800917a <__pow5mult+0x6a>
 80091b0:	4638      	mov	r0, r7
 80091b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091b6:	bf00      	nop
 80091b8:	0800a7d0 	.word	0x0800a7d0
 80091bc:	0800a5fd 	.word	0x0800a5fd
 80091c0:	0800a680 	.word	0x0800a680

080091c4 <__lshift>:
 80091c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091c8:	460c      	mov	r4, r1
 80091ca:	6849      	ldr	r1, [r1, #4]
 80091cc:	6923      	ldr	r3, [r4, #16]
 80091ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80091d2:	68a3      	ldr	r3, [r4, #8]
 80091d4:	4607      	mov	r7, r0
 80091d6:	4691      	mov	r9, r2
 80091d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80091dc:	f108 0601 	add.w	r6, r8, #1
 80091e0:	42b3      	cmp	r3, r6
 80091e2:	db0b      	blt.n	80091fc <__lshift+0x38>
 80091e4:	4638      	mov	r0, r7
 80091e6:	f7ff fddb 	bl	8008da0 <_Balloc>
 80091ea:	4605      	mov	r5, r0
 80091ec:	b948      	cbnz	r0, 8009202 <__lshift+0x3e>
 80091ee:	4602      	mov	r2, r0
 80091f0:	4b2a      	ldr	r3, [pc, #168]	; (800929c <__lshift+0xd8>)
 80091f2:	482b      	ldr	r0, [pc, #172]	; (80092a0 <__lshift+0xdc>)
 80091f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80091f8:	f000 fbb8 	bl	800996c <__assert_func>
 80091fc:	3101      	adds	r1, #1
 80091fe:	005b      	lsls	r3, r3, #1
 8009200:	e7ee      	b.n	80091e0 <__lshift+0x1c>
 8009202:	2300      	movs	r3, #0
 8009204:	f100 0114 	add.w	r1, r0, #20
 8009208:	f100 0210 	add.w	r2, r0, #16
 800920c:	4618      	mov	r0, r3
 800920e:	4553      	cmp	r3, sl
 8009210:	db37      	blt.n	8009282 <__lshift+0xbe>
 8009212:	6920      	ldr	r0, [r4, #16]
 8009214:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009218:	f104 0314 	add.w	r3, r4, #20
 800921c:	f019 091f 	ands.w	r9, r9, #31
 8009220:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009224:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009228:	d02f      	beq.n	800928a <__lshift+0xc6>
 800922a:	f1c9 0e20 	rsb	lr, r9, #32
 800922e:	468a      	mov	sl, r1
 8009230:	f04f 0c00 	mov.w	ip, #0
 8009234:	681a      	ldr	r2, [r3, #0]
 8009236:	fa02 f209 	lsl.w	r2, r2, r9
 800923a:	ea42 020c 	orr.w	r2, r2, ip
 800923e:	f84a 2b04 	str.w	r2, [sl], #4
 8009242:	f853 2b04 	ldr.w	r2, [r3], #4
 8009246:	4298      	cmp	r0, r3
 8009248:	fa22 fc0e 	lsr.w	ip, r2, lr
 800924c:	d8f2      	bhi.n	8009234 <__lshift+0x70>
 800924e:	1b03      	subs	r3, r0, r4
 8009250:	3b15      	subs	r3, #21
 8009252:	f023 0303 	bic.w	r3, r3, #3
 8009256:	3304      	adds	r3, #4
 8009258:	f104 0215 	add.w	r2, r4, #21
 800925c:	4290      	cmp	r0, r2
 800925e:	bf38      	it	cc
 8009260:	2304      	movcc	r3, #4
 8009262:	f841 c003 	str.w	ip, [r1, r3]
 8009266:	f1bc 0f00 	cmp.w	ip, #0
 800926a:	d001      	beq.n	8009270 <__lshift+0xac>
 800926c:	f108 0602 	add.w	r6, r8, #2
 8009270:	3e01      	subs	r6, #1
 8009272:	4638      	mov	r0, r7
 8009274:	612e      	str	r6, [r5, #16]
 8009276:	4621      	mov	r1, r4
 8009278:	f7ff fdd2 	bl	8008e20 <_Bfree>
 800927c:	4628      	mov	r0, r5
 800927e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009282:	f842 0f04 	str.w	r0, [r2, #4]!
 8009286:	3301      	adds	r3, #1
 8009288:	e7c1      	b.n	800920e <__lshift+0x4a>
 800928a:	3904      	subs	r1, #4
 800928c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009290:	f841 2f04 	str.w	r2, [r1, #4]!
 8009294:	4298      	cmp	r0, r3
 8009296:	d8f9      	bhi.n	800928c <__lshift+0xc8>
 8009298:	e7ea      	b.n	8009270 <__lshift+0xac>
 800929a:	bf00      	nop
 800929c:	0800a66f 	.word	0x0800a66f
 80092a0:	0800a680 	.word	0x0800a680

080092a4 <__mcmp>:
 80092a4:	b530      	push	{r4, r5, lr}
 80092a6:	6902      	ldr	r2, [r0, #16]
 80092a8:	690c      	ldr	r4, [r1, #16]
 80092aa:	1b12      	subs	r2, r2, r4
 80092ac:	d10e      	bne.n	80092cc <__mcmp+0x28>
 80092ae:	f100 0314 	add.w	r3, r0, #20
 80092b2:	3114      	adds	r1, #20
 80092b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80092b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80092bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80092c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80092c4:	42a5      	cmp	r5, r4
 80092c6:	d003      	beq.n	80092d0 <__mcmp+0x2c>
 80092c8:	d305      	bcc.n	80092d6 <__mcmp+0x32>
 80092ca:	2201      	movs	r2, #1
 80092cc:	4610      	mov	r0, r2
 80092ce:	bd30      	pop	{r4, r5, pc}
 80092d0:	4283      	cmp	r3, r0
 80092d2:	d3f3      	bcc.n	80092bc <__mcmp+0x18>
 80092d4:	e7fa      	b.n	80092cc <__mcmp+0x28>
 80092d6:	f04f 32ff 	mov.w	r2, #4294967295
 80092da:	e7f7      	b.n	80092cc <__mcmp+0x28>

080092dc <__mdiff>:
 80092dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092e0:	460c      	mov	r4, r1
 80092e2:	4606      	mov	r6, r0
 80092e4:	4611      	mov	r1, r2
 80092e6:	4620      	mov	r0, r4
 80092e8:	4690      	mov	r8, r2
 80092ea:	f7ff ffdb 	bl	80092a4 <__mcmp>
 80092ee:	1e05      	subs	r5, r0, #0
 80092f0:	d110      	bne.n	8009314 <__mdiff+0x38>
 80092f2:	4629      	mov	r1, r5
 80092f4:	4630      	mov	r0, r6
 80092f6:	f7ff fd53 	bl	8008da0 <_Balloc>
 80092fa:	b930      	cbnz	r0, 800930a <__mdiff+0x2e>
 80092fc:	4b3a      	ldr	r3, [pc, #232]	; (80093e8 <__mdiff+0x10c>)
 80092fe:	4602      	mov	r2, r0
 8009300:	f240 2132 	movw	r1, #562	; 0x232
 8009304:	4839      	ldr	r0, [pc, #228]	; (80093ec <__mdiff+0x110>)
 8009306:	f000 fb31 	bl	800996c <__assert_func>
 800930a:	2301      	movs	r3, #1
 800930c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009310:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009314:	bfa4      	itt	ge
 8009316:	4643      	movge	r3, r8
 8009318:	46a0      	movge	r8, r4
 800931a:	4630      	mov	r0, r6
 800931c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009320:	bfa6      	itte	ge
 8009322:	461c      	movge	r4, r3
 8009324:	2500      	movge	r5, #0
 8009326:	2501      	movlt	r5, #1
 8009328:	f7ff fd3a 	bl	8008da0 <_Balloc>
 800932c:	b920      	cbnz	r0, 8009338 <__mdiff+0x5c>
 800932e:	4b2e      	ldr	r3, [pc, #184]	; (80093e8 <__mdiff+0x10c>)
 8009330:	4602      	mov	r2, r0
 8009332:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009336:	e7e5      	b.n	8009304 <__mdiff+0x28>
 8009338:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800933c:	6926      	ldr	r6, [r4, #16]
 800933e:	60c5      	str	r5, [r0, #12]
 8009340:	f104 0914 	add.w	r9, r4, #20
 8009344:	f108 0514 	add.w	r5, r8, #20
 8009348:	f100 0e14 	add.w	lr, r0, #20
 800934c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009350:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009354:	f108 0210 	add.w	r2, r8, #16
 8009358:	46f2      	mov	sl, lr
 800935a:	2100      	movs	r1, #0
 800935c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009360:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009364:	fa1f f883 	uxth.w	r8, r3
 8009368:	fa11 f18b 	uxtah	r1, r1, fp
 800936c:	0c1b      	lsrs	r3, r3, #16
 800936e:	eba1 0808 	sub.w	r8, r1, r8
 8009372:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009376:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800937a:	fa1f f888 	uxth.w	r8, r8
 800937e:	1419      	asrs	r1, r3, #16
 8009380:	454e      	cmp	r6, r9
 8009382:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009386:	f84a 3b04 	str.w	r3, [sl], #4
 800938a:	d8e7      	bhi.n	800935c <__mdiff+0x80>
 800938c:	1b33      	subs	r3, r6, r4
 800938e:	3b15      	subs	r3, #21
 8009390:	f023 0303 	bic.w	r3, r3, #3
 8009394:	3304      	adds	r3, #4
 8009396:	3415      	adds	r4, #21
 8009398:	42a6      	cmp	r6, r4
 800939a:	bf38      	it	cc
 800939c:	2304      	movcc	r3, #4
 800939e:	441d      	add	r5, r3
 80093a0:	4473      	add	r3, lr
 80093a2:	469e      	mov	lr, r3
 80093a4:	462e      	mov	r6, r5
 80093a6:	4566      	cmp	r6, ip
 80093a8:	d30e      	bcc.n	80093c8 <__mdiff+0xec>
 80093aa:	f10c 0203 	add.w	r2, ip, #3
 80093ae:	1b52      	subs	r2, r2, r5
 80093b0:	f022 0203 	bic.w	r2, r2, #3
 80093b4:	3d03      	subs	r5, #3
 80093b6:	45ac      	cmp	ip, r5
 80093b8:	bf38      	it	cc
 80093ba:	2200      	movcc	r2, #0
 80093bc:	441a      	add	r2, r3
 80093be:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80093c2:	b17b      	cbz	r3, 80093e4 <__mdiff+0x108>
 80093c4:	6107      	str	r7, [r0, #16]
 80093c6:	e7a3      	b.n	8009310 <__mdiff+0x34>
 80093c8:	f856 8b04 	ldr.w	r8, [r6], #4
 80093cc:	fa11 f288 	uxtah	r2, r1, r8
 80093d0:	1414      	asrs	r4, r2, #16
 80093d2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80093d6:	b292      	uxth	r2, r2
 80093d8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80093dc:	f84e 2b04 	str.w	r2, [lr], #4
 80093e0:	1421      	asrs	r1, r4, #16
 80093e2:	e7e0      	b.n	80093a6 <__mdiff+0xca>
 80093e4:	3f01      	subs	r7, #1
 80093e6:	e7ea      	b.n	80093be <__mdiff+0xe2>
 80093e8:	0800a66f 	.word	0x0800a66f
 80093ec:	0800a680 	.word	0x0800a680

080093f0 <__d2b>:
 80093f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80093f4:	4689      	mov	r9, r1
 80093f6:	2101      	movs	r1, #1
 80093f8:	ec57 6b10 	vmov	r6, r7, d0
 80093fc:	4690      	mov	r8, r2
 80093fe:	f7ff fccf 	bl	8008da0 <_Balloc>
 8009402:	4604      	mov	r4, r0
 8009404:	b930      	cbnz	r0, 8009414 <__d2b+0x24>
 8009406:	4602      	mov	r2, r0
 8009408:	4b25      	ldr	r3, [pc, #148]	; (80094a0 <__d2b+0xb0>)
 800940a:	4826      	ldr	r0, [pc, #152]	; (80094a4 <__d2b+0xb4>)
 800940c:	f240 310a 	movw	r1, #778	; 0x30a
 8009410:	f000 faac 	bl	800996c <__assert_func>
 8009414:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009418:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800941c:	bb35      	cbnz	r5, 800946c <__d2b+0x7c>
 800941e:	2e00      	cmp	r6, #0
 8009420:	9301      	str	r3, [sp, #4]
 8009422:	d028      	beq.n	8009476 <__d2b+0x86>
 8009424:	4668      	mov	r0, sp
 8009426:	9600      	str	r6, [sp, #0]
 8009428:	f7ff fd82 	bl	8008f30 <__lo0bits>
 800942c:	9900      	ldr	r1, [sp, #0]
 800942e:	b300      	cbz	r0, 8009472 <__d2b+0x82>
 8009430:	9a01      	ldr	r2, [sp, #4]
 8009432:	f1c0 0320 	rsb	r3, r0, #32
 8009436:	fa02 f303 	lsl.w	r3, r2, r3
 800943a:	430b      	orrs	r3, r1
 800943c:	40c2      	lsrs	r2, r0
 800943e:	6163      	str	r3, [r4, #20]
 8009440:	9201      	str	r2, [sp, #4]
 8009442:	9b01      	ldr	r3, [sp, #4]
 8009444:	61a3      	str	r3, [r4, #24]
 8009446:	2b00      	cmp	r3, #0
 8009448:	bf14      	ite	ne
 800944a:	2202      	movne	r2, #2
 800944c:	2201      	moveq	r2, #1
 800944e:	6122      	str	r2, [r4, #16]
 8009450:	b1d5      	cbz	r5, 8009488 <__d2b+0x98>
 8009452:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009456:	4405      	add	r5, r0
 8009458:	f8c9 5000 	str.w	r5, [r9]
 800945c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009460:	f8c8 0000 	str.w	r0, [r8]
 8009464:	4620      	mov	r0, r4
 8009466:	b003      	add	sp, #12
 8009468:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800946c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009470:	e7d5      	b.n	800941e <__d2b+0x2e>
 8009472:	6161      	str	r1, [r4, #20]
 8009474:	e7e5      	b.n	8009442 <__d2b+0x52>
 8009476:	a801      	add	r0, sp, #4
 8009478:	f7ff fd5a 	bl	8008f30 <__lo0bits>
 800947c:	9b01      	ldr	r3, [sp, #4]
 800947e:	6163      	str	r3, [r4, #20]
 8009480:	2201      	movs	r2, #1
 8009482:	6122      	str	r2, [r4, #16]
 8009484:	3020      	adds	r0, #32
 8009486:	e7e3      	b.n	8009450 <__d2b+0x60>
 8009488:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800948c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009490:	f8c9 0000 	str.w	r0, [r9]
 8009494:	6918      	ldr	r0, [r3, #16]
 8009496:	f7ff fd2b 	bl	8008ef0 <__hi0bits>
 800949a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800949e:	e7df      	b.n	8009460 <__d2b+0x70>
 80094a0:	0800a66f 	.word	0x0800a66f
 80094a4:	0800a680 	.word	0x0800a680

080094a8 <_calloc_r>:
 80094a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80094aa:	fba1 2402 	umull	r2, r4, r1, r2
 80094ae:	b94c      	cbnz	r4, 80094c4 <_calloc_r+0x1c>
 80094b0:	4611      	mov	r1, r2
 80094b2:	9201      	str	r2, [sp, #4]
 80094b4:	f000 f87a 	bl	80095ac <_malloc_r>
 80094b8:	9a01      	ldr	r2, [sp, #4]
 80094ba:	4605      	mov	r5, r0
 80094bc:	b930      	cbnz	r0, 80094cc <_calloc_r+0x24>
 80094be:	4628      	mov	r0, r5
 80094c0:	b003      	add	sp, #12
 80094c2:	bd30      	pop	{r4, r5, pc}
 80094c4:	220c      	movs	r2, #12
 80094c6:	6002      	str	r2, [r0, #0]
 80094c8:	2500      	movs	r5, #0
 80094ca:	e7f8      	b.n	80094be <_calloc_r+0x16>
 80094cc:	4621      	mov	r1, r4
 80094ce:	f7fe f93f 	bl	8007750 <memset>
 80094d2:	e7f4      	b.n	80094be <_calloc_r+0x16>

080094d4 <_free_r>:
 80094d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80094d6:	2900      	cmp	r1, #0
 80094d8:	d044      	beq.n	8009564 <_free_r+0x90>
 80094da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094de:	9001      	str	r0, [sp, #4]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	f1a1 0404 	sub.w	r4, r1, #4
 80094e6:	bfb8      	it	lt
 80094e8:	18e4      	addlt	r4, r4, r3
 80094ea:	f000 fa9b 	bl	8009a24 <__malloc_lock>
 80094ee:	4a1e      	ldr	r2, [pc, #120]	; (8009568 <_free_r+0x94>)
 80094f0:	9801      	ldr	r0, [sp, #4]
 80094f2:	6813      	ldr	r3, [r2, #0]
 80094f4:	b933      	cbnz	r3, 8009504 <_free_r+0x30>
 80094f6:	6063      	str	r3, [r4, #4]
 80094f8:	6014      	str	r4, [r2, #0]
 80094fa:	b003      	add	sp, #12
 80094fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009500:	f000 ba96 	b.w	8009a30 <__malloc_unlock>
 8009504:	42a3      	cmp	r3, r4
 8009506:	d908      	bls.n	800951a <_free_r+0x46>
 8009508:	6825      	ldr	r5, [r4, #0]
 800950a:	1961      	adds	r1, r4, r5
 800950c:	428b      	cmp	r3, r1
 800950e:	bf01      	itttt	eq
 8009510:	6819      	ldreq	r1, [r3, #0]
 8009512:	685b      	ldreq	r3, [r3, #4]
 8009514:	1949      	addeq	r1, r1, r5
 8009516:	6021      	streq	r1, [r4, #0]
 8009518:	e7ed      	b.n	80094f6 <_free_r+0x22>
 800951a:	461a      	mov	r2, r3
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	b10b      	cbz	r3, 8009524 <_free_r+0x50>
 8009520:	42a3      	cmp	r3, r4
 8009522:	d9fa      	bls.n	800951a <_free_r+0x46>
 8009524:	6811      	ldr	r1, [r2, #0]
 8009526:	1855      	adds	r5, r2, r1
 8009528:	42a5      	cmp	r5, r4
 800952a:	d10b      	bne.n	8009544 <_free_r+0x70>
 800952c:	6824      	ldr	r4, [r4, #0]
 800952e:	4421      	add	r1, r4
 8009530:	1854      	adds	r4, r2, r1
 8009532:	42a3      	cmp	r3, r4
 8009534:	6011      	str	r1, [r2, #0]
 8009536:	d1e0      	bne.n	80094fa <_free_r+0x26>
 8009538:	681c      	ldr	r4, [r3, #0]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	6053      	str	r3, [r2, #4]
 800953e:	4421      	add	r1, r4
 8009540:	6011      	str	r1, [r2, #0]
 8009542:	e7da      	b.n	80094fa <_free_r+0x26>
 8009544:	d902      	bls.n	800954c <_free_r+0x78>
 8009546:	230c      	movs	r3, #12
 8009548:	6003      	str	r3, [r0, #0]
 800954a:	e7d6      	b.n	80094fa <_free_r+0x26>
 800954c:	6825      	ldr	r5, [r4, #0]
 800954e:	1961      	adds	r1, r4, r5
 8009550:	428b      	cmp	r3, r1
 8009552:	bf04      	itt	eq
 8009554:	6819      	ldreq	r1, [r3, #0]
 8009556:	685b      	ldreq	r3, [r3, #4]
 8009558:	6063      	str	r3, [r4, #4]
 800955a:	bf04      	itt	eq
 800955c:	1949      	addeq	r1, r1, r5
 800955e:	6021      	streq	r1, [r4, #0]
 8009560:	6054      	str	r4, [r2, #4]
 8009562:	e7ca      	b.n	80094fa <_free_r+0x26>
 8009564:	b003      	add	sp, #12
 8009566:	bd30      	pop	{r4, r5, pc}
 8009568:	200005f4 	.word	0x200005f4

0800956c <sbrk_aligned>:
 800956c:	b570      	push	{r4, r5, r6, lr}
 800956e:	4e0e      	ldr	r6, [pc, #56]	; (80095a8 <sbrk_aligned+0x3c>)
 8009570:	460c      	mov	r4, r1
 8009572:	6831      	ldr	r1, [r6, #0]
 8009574:	4605      	mov	r5, r0
 8009576:	b911      	cbnz	r1, 800957e <sbrk_aligned+0x12>
 8009578:	f000 f9e8 	bl	800994c <_sbrk_r>
 800957c:	6030      	str	r0, [r6, #0]
 800957e:	4621      	mov	r1, r4
 8009580:	4628      	mov	r0, r5
 8009582:	f000 f9e3 	bl	800994c <_sbrk_r>
 8009586:	1c43      	adds	r3, r0, #1
 8009588:	d00a      	beq.n	80095a0 <sbrk_aligned+0x34>
 800958a:	1cc4      	adds	r4, r0, #3
 800958c:	f024 0403 	bic.w	r4, r4, #3
 8009590:	42a0      	cmp	r0, r4
 8009592:	d007      	beq.n	80095a4 <sbrk_aligned+0x38>
 8009594:	1a21      	subs	r1, r4, r0
 8009596:	4628      	mov	r0, r5
 8009598:	f000 f9d8 	bl	800994c <_sbrk_r>
 800959c:	3001      	adds	r0, #1
 800959e:	d101      	bne.n	80095a4 <sbrk_aligned+0x38>
 80095a0:	f04f 34ff 	mov.w	r4, #4294967295
 80095a4:	4620      	mov	r0, r4
 80095a6:	bd70      	pop	{r4, r5, r6, pc}
 80095a8:	200005f8 	.word	0x200005f8

080095ac <_malloc_r>:
 80095ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095b0:	1ccd      	adds	r5, r1, #3
 80095b2:	f025 0503 	bic.w	r5, r5, #3
 80095b6:	3508      	adds	r5, #8
 80095b8:	2d0c      	cmp	r5, #12
 80095ba:	bf38      	it	cc
 80095bc:	250c      	movcc	r5, #12
 80095be:	2d00      	cmp	r5, #0
 80095c0:	4607      	mov	r7, r0
 80095c2:	db01      	blt.n	80095c8 <_malloc_r+0x1c>
 80095c4:	42a9      	cmp	r1, r5
 80095c6:	d905      	bls.n	80095d4 <_malloc_r+0x28>
 80095c8:	230c      	movs	r3, #12
 80095ca:	603b      	str	r3, [r7, #0]
 80095cc:	2600      	movs	r6, #0
 80095ce:	4630      	mov	r0, r6
 80095d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095d4:	4e2e      	ldr	r6, [pc, #184]	; (8009690 <_malloc_r+0xe4>)
 80095d6:	f000 fa25 	bl	8009a24 <__malloc_lock>
 80095da:	6833      	ldr	r3, [r6, #0]
 80095dc:	461c      	mov	r4, r3
 80095de:	bb34      	cbnz	r4, 800962e <_malloc_r+0x82>
 80095e0:	4629      	mov	r1, r5
 80095e2:	4638      	mov	r0, r7
 80095e4:	f7ff ffc2 	bl	800956c <sbrk_aligned>
 80095e8:	1c43      	adds	r3, r0, #1
 80095ea:	4604      	mov	r4, r0
 80095ec:	d14d      	bne.n	800968a <_malloc_r+0xde>
 80095ee:	6834      	ldr	r4, [r6, #0]
 80095f0:	4626      	mov	r6, r4
 80095f2:	2e00      	cmp	r6, #0
 80095f4:	d140      	bne.n	8009678 <_malloc_r+0xcc>
 80095f6:	6823      	ldr	r3, [r4, #0]
 80095f8:	4631      	mov	r1, r6
 80095fa:	4638      	mov	r0, r7
 80095fc:	eb04 0803 	add.w	r8, r4, r3
 8009600:	f000 f9a4 	bl	800994c <_sbrk_r>
 8009604:	4580      	cmp	r8, r0
 8009606:	d13a      	bne.n	800967e <_malloc_r+0xd2>
 8009608:	6821      	ldr	r1, [r4, #0]
 800960a:	3503      	adds	r5, #3
 800960c:	1a6d      	subs	r5, r5, r1
 800960e:	f025 0503 	bic.w	r5, r5, #3
 8009612:	3508      	adds	r5, #8
 8009614:	2d0c      	cmp	r5, #12
 8009616:	bf38      	it	cc
 8009618:	250c      	movcc	r5, #12
 800961a:	4629      	mov	r1, r5
 800961c:	4638      	mov	r0, r7
 800961e:	f7ff ffa5 	bl	800956c <sbrk_aligned>
 8009622:	3001      	adds	r0, #1
 8009624:	d02b      	beq.n	800967e <_malloc_r+0xd2>
 8009626:	6823      	ldr	r3, [r4, #0]
 8009628:	442b      	add	r3, r5
 800962a:	6023      	str	r3, [r4, #0]
 800962c:	e00e      	b.n	800964c <_malloc_r+0xa0>
 800962e:	6822      	ldr	r2, [r4, #0]
 8009630:	1b52      	subs	r2, r2, r5
 8009632:	d41e      	bmi.n	8009672 <_malloc_r+0xc6>
 8009634:	2a0b      	cmp	r2, #11
 8009636:	d916      	bls.n	8009666 <_malloc_r+0xba>
 8009638:	1961      	adds	r1, r4, r5
 800963a:	42a3      	cmp	r3, r4
 800963c:	6025      	str	r5, [r4, #0]
 800963e:	bf18      	it	ne
 8009640:	6059      	strne	r1, [r3, #4]
 8009642:	6863      	ldr	r3, [r4, #4]
 8009644:	bf08      	it	eq
 8009646:	6031      	streq	r1, [r6, #0]
 8009648:	5162      	str	r2, [r4, r5]
 800964a:	604b      	str	r3, [r1, #4]
 800964c:	4638      	mov	r0, r7
 800964e:	f104 060b 	add.w	r6, r4, #11
 8009652:	f000 f9ed 	bl	8009a30 <__malloc_unlock>
 8009656:	f026 0607 	bic.w	r6, r6, #7
 800965a:	1d23      	adds	r3, r4, #4
 800965c:	1af2      	subs	r2, r6, r3
 800965e:	d0b6      	beq.n	80095ce <_malloc_r+0x22>
 8009660:	1b9b      	subs	r3, r3, r6
 8009662:	50a3      	str	r3, [r4, r2]
 8009664:	e7b3      	b.n	80095ce <_malloc_r+0x22>
 8009666:	6862      	ldr	r2, [r4, #4]
 8009668:	42a3      	cmp	r3, r4
 800966a:	bf0c      	ite	eq
 800966c:	6032      	streq	r2, [r6, #0]
 800966e:	605a      	strne	r2, [r3, #4]
 8009670:	e7ec      	b.n	800964c <_malloc_r+0xa0>
 8009672:	4623      	mov	r3, r4
 8009674:	6864      	ldr	r4, [r4, #4]
 8009676:	e7b2      	b.n	80095de <_malloc_r+0x32>
 8009678:	4634      	mov	r4, r6
 800967a:	6876      	ldr	r6, [r6, #4]
 800967c:	e7b9      	b.n	80095f2 <_malloc_r+0x46>
 800967e:	230c      	movs	r3, #12
 8009680:	603b      	str	r3, [r7, #0]
 8009682:	4638      	mov	r0, r7
 8009684:	f000 f9d4 	bl	8009a30 <__malloc_unlock>
 8009688:	e7a1      	b.n	80095ce <_malloc_r+0x22>
 800968a:	6025      	str	r5, [r4, #0]
 800968c:	e7de      	b.n	800964c <_malloc_r+0xa0>
 800968e:	bf00      	nop
 8009690:	200005f4 	.word	0x200005f4

08009694 <__ssputs_r>:
 8009694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009698:	688e      	ldr	r6, [r1, #8]
 800969a:	429e      	cmp	r6, r3
 800969c:	4682      	mov	sl, r0
 800969e:	460c      	mov	r4, r1
 80096a0:	4690      	mov	r8, r2
 80096a2:	461f      	mov	r7, r3
 80096a4:	d838      	bhi.n	8009718 <__ssputs_r+0x84>
 80096a6:	898a      	ldrh	r2, [r1, #12]
 80096a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80096ac:	d032      	beq.n	8009714 <__ssputs_r+0x80>
 80096ae:	6825      	ldr	r5, [r4, #0]
 80096b0:	6909      	ldr	r1, [r1, #16]
 80096b2:	eba5 0901 	sub.w	r9, r5, r1
 80096b6:	6965      	ldr	r5, [r4, #20]
 80096b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80096bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80096c0:	3301      	adds	r3, #1
 80096c2:	444b      	add	r3, r9
 80096c4:	106d      	asrs	r5, r5, #1
 80096c6:	429d      	cmp	r5, r3
 80096c8:	bf38      	it	cc
 80096ca:	461d      	movcc	r5, r3
 80096cc:	0553      	lsls	r3, r2, #21
 80096ce:	d531      	bpl.n	8009734 <__ssputs_r+0xa0>
 80096d0:	4629      	mov	r1, r5
 80096d2:	f7ff ff6b 	bl	80095ac <_malloc_r>
 80096d6:	4606      	mov	r6, r0
 80096d8:	b950      	cbnz	r0, 80096f0 <__ssputs_r+0x5c>
 80096da:	230c      	movs	r3, #12
 80096dc:	f8ca 3000 	str.w	r3, [sl]
 80096e0:	89a3      	ldrh	r3, [r4, #12]
 80096e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096e6:	81a3      	strh	r3, [r4, #12]
 80096e8:	f04f 30ff 	mov.w	r0, #4294967295
 80096ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096f0:	6921      	ldr	r1, [r4, #16]
 80096f2:	464a      	mov	r2, r9
 80096f4:	f7ff fb46 	bl	8008d84 <memcpy>
 80096f8:	89a3      	ldrh	r3, [r4, #12]
 80096fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80096fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009702:	81a3      	strh	r3, [r4, #12]
 8009704:	6126      	str	r6, [r4, #16]
 8009706:	6165      	str	r5, [r4, #20]
 8009708:	444e      	add	r6, r9
 800970a:	eba5 0509 	sub.w	r5, r5, r9
 800970e:	6026      	str	r6, [r4, #0]
 8009710:	60a5      	str	r5, [r4, #8]
 8009712:	463e      	mov	r6, r7
 8009714:	42be      	cmp	r6, r7
 8009716:	d900      	bls.n	800971a <__ssputs_r+0x86>
 8009718:	463e      	mov	r6, r7
 800971a:	6820      	ldr	r0, [r4, #0]
 800971c:	4632      	mov	r2, r6
 800971e:	4641      	mov	r1, r8
 8009720:	f000 f966 	bl	80099f0 <memmove>
 8009724:	68a3      	ldr	r3, [r4, #8]
 8009726:	1b9b      	subs	r3, r3, r6
 8009728:	60a3      	str	r3, [r4, #8]
 800972a:	6823      	ldr	r3, [r4, #0]
 800972c:	4433      	add	r3, r6
 800972e:	6023      	str	r3, [r4, #0]
 8009730:	2000      	movs	r0, #0
 8009732:	e7db      	b.n	80096ec <__ssputs_r+0x58>
 8009734:	462a      	mov	r2, r5
 8009736:	f000 f981 	bl	8009a3c <_realloc_r>
 800973a:	4606      	mov	r6, r0
 800973c:	2800      	cmp	r0, #0
 800973e:	d1e1      	bne.n	8009704 <__ssputs_r+0x70>
 8009740:	6921      	ldr	r1, [r4, #16]
 8009742:	4650      	mov	r0, sl
 8009744:	f7ff fec6 	bl	80094d4 <_free_r>
 8009748:	e7c7      	b.n	80096da <__ssputs_r+0x46>
	...

0800974c <_svfiprintf_r>:
 800974c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009750:	4698      	mov	r8, r3
 8009752:	898b      	ldrh	r3, [r1, #12]
 8009754:	061b      	lsls	r3, r3, #24
 8009756:	b09d      	sub	sp, #116	; 0x74
 8009758:	4607      	mov	r7, r0
 800975a:	460d      	mov	r5, r1
 800975c:	4614      	mov	r4, r2
 800975e:	d50e      	bpl.n	800977e <_svfiprintf_r+0x32>
 8009760:	690b      	ldr	r3, [r1, #16]
 8009762:	b963      	cbnz	r3, 800977e <_svfiprintf_r+0x32>
 8009764:	2140      	movs	r1, #64	; 0x40
 8009766:	f7ff ff21 	bl	80095ac <_malloc_r>
 800976a:	6028      	str	r0, [r5, #0]
 800976c:	6128      	str	r0, [r5, #16]
 800976e:	b920      	cbnz	r0, 800977a <_svfiprintf_r+0x2e>
 8009770:	230c      	movs	r3, #12
 8009772:	603b      	str	r3, [r7, #0]
 8009774:	f04f 30ff 	mov.w	r0, #4294967295
 8009778:	e0d1      	b.n	800991e <_svfiprintf_r+0x1d2>
 800977a:	2340      	movs	r3, #64	; 0x40
 800977c:	616b      	str	r3, [r5, #20]
 800977e:	2300      	movs	r3, #0
 8009780:	9309      	str	r3, [sp, #36]	; 0x24
 8009782:	2320      	movs	r3, #32
 8009784:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009788:	f8cd 800c 	str.w	r8, [sp, #12]
 800978c:	2330      	movs	r3, #48	; 0x30
 800978e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009938 <_svfiprintf_r+0x1ec>
 8009792:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009796:	f04f 0901 	mov.w	r9, #1
 800979a:	4623      	mov	r3, r4
 800979c:	469a      	mov	sl, r3
 800979e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097a2:	b10a      	cbz	r2, 80097a8 <_svfiprintf_r+0x5c>
 80097a4:	2a25      	cmp	r2, #37	; 0x25
 80097a6:	d1f9      	bne.n	800979c <_svfiprintf_r+0x50>
 80097a8:	ebba 0b04 	subs.w	fp, sl, r4
 80097ac:	d00b      	beq.n	80097c6 <_svfiprintf_r+0x7a>
 80097ae:	465b      	mov	r3, fp
 80097b0:	4622      	mov	r2, r4
 80097b2:	4629      	mov	r1, r5
 80097b4:	4638      	mov	r0, r7
 80097b6:	f7ff ff6d 	bl	8009694 <__ssputs_r>
 80097ba:	3001      	adds	r0, #1
 80097bc:	f000 80aa 	beq.w	8009914 <_svfiprintf_r+0x1c8>
 80097c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097c2:	445a      	add	r2, fp
 80097c4:	9209      	str	r2, [sp, #36]	; 0x24
 80097c6:	f89a 3000 	ldrb.w	r3, [sl]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	f000 80a2 	beq.w	8009914 <_svfiprintf_r+0x1c8>
 80097d0:	2300      	movs	r3, #0
 80097d2:	f04f 32ff 	mov.w	r2, #4294967295
 80097d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097da:	f10a 0a01 	add.w	sl, sl, #1
 80097de:	9304      	str	r3, [sp, #16]
 80097e0:	9307      	str	r3, [sp, #28]
 80097e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097e6:	931a      	str	r3, [sp, #104]	; 0x68
 80097e8:	4654      	mov	r4, sl
 80097ea:	2205      	movs	r2, #5
 80097ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097f0:	4851      	ldr	r0, [pc, #324]	; (8009938 <_svfiprintf_r+0x1ec>)
 80097f2:	f7f6 fd15 	bl	8000220 <memchr>
 80097f6:	9a04      	ldr	r2, [sp, #16]
 80097f8:	b9d8      	cbnz	r0, 8009832 <_svfiprintf_r+0xe6>
 80097fa:	06d0      	lsls	r0, r2, #27
 80097fc:	bf44      	itt	mi
 80097fe:	2320      	movmi	r3, #32
 8009800:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009804:	0711      	lsls	r1, r2, #28
 8009806:	bf44      	itt	mi
 8009808:	232b      	movmi	r3, #43	; 0x2b
 800980a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800980e:	f89a 3000 	ldrb.w	r3, [sl]
 8009812:	2b2a      	cmp	r3, #42	; 0x2a
 8009814:	d015      	beq.n	8009842 <_svfiprintf_r+0xf6>
 8009816:	9a07      	ldr	r2, [sp, #28]
 8009818:	4654      	mov	r4, sl
 800981a:	2000      	movs	r0, #0
 800981c:	f04f 0c0a 	mov.w	ip, #10
 8009820:	4621      	mov	r1, r4
 8009822:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009826:	3b30      	subs	r3, #48	; 0x30
 8009828:	2b09      	cmp	r3, #9
 800982a:	d94e      	bls.n	80098ca <_svfiprintf_r+0x17e>
 800982c:	b1b0      	cbz	r0, 800985c <_svfiprintf_r+0x110>
 800982e:	9207      	str	r2, [sp, #28]
 8009830:	e014      	b.n	800985c <_svfiprintf_r+0x110>
 8009832:	eba0 0308 	sub.w	r3, r0, r8
 8009836:	fa09 f303 	lsl.w	r3, r9, r3
 800983a:	4313      	orrs	r3, r2
 800983c:	9304      	str	r3, [sp, #16]
 800983e:	46a2      	mov	sl, r4
 8009840:	e7d2      	b.n	80097e8 <_svfiprintf_r+0x9c>
 8009842:	9b03      	ldr	r3, [sp, #12]
 8009844:	1d19      	adds	r1, r3, #4
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	9103      	str	r1, [sp, #12]
 800984a:	2b00      	cmp	r3, #0
 800984c:	bfbb      	ittet	lt
 800984e:	425b      	neglt	r3, r3
 8009850:	f042 0202 	orrlt.w	r2, r2, #2
 8009854:	9307      	strge	r3, [sp, #28]
 8009856:	9307      	strlt	r3, [sp, #28]
 8009858:	bfb8      	it	lt
 800985a:	9204      	strlt	r2, [sp, #16]
 800985c:	7823      	ldrb	r3, [r4, #0]
 800985e:	2b2e      	cmp	r3, #46	; 0x2e
 8009860:	d10c      	bne.n	800987c <_svfiprintf_r+0x130>
 8009862:	7863      	ldrb	r3, [r4, #1]
 8009864:	2b2a      	cmp	r3, #42	; 0x2a
 8009866:	d135      	bne.n	80098d4 <_svfiprintf_r+0x188>
 8009868:	9b03      	ldr	r3, [sp, #12]
 800986a:	1d1a      	adds	r2, r3, #4
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	9203      	str	r2, [sp, #12]
 8009870:	2b00      	cmp	r3, #0
 8009872:	bfb8      	it	lt
 8009874:	f04f 33ff 	movlt.w	r3, #4294967295
 8009878:	3402      	adds	r4, #2
 800987a:	9305      	str	r3, [sp, #20]
 800987c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009948 <_svfiprintf_r+0x1fc>
 8009880:	7821      	ldrb	r1, [r4, #0]
 8009882:	2203      	movs	r2, #3
 8009884:	4650      	mov	r0, sl
 8009886:	f7f6 fccb 	bl	8000220 <memchr>
 800988a:	b140      	cbz	r0, 800989e <_svfiprintf_r+0x152>
 800988c:	2340      	movs	r3, #64	; 0x40
 800988e:	eba0 000a 	sub.w	r0, r0, sl
 8009892:	fa03 f000 	lsl.w	r0, r3, r0
 8009896:	9b04      	ldr	r3, [sp, #16]
 8009898:	4303      	orrs	r3, r0
 800989a:	3401      	adds	r4, #1
 800989c:	9304      	str	r3, [sp, #16]
 800989e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098a2:	4826      	ldr	r0, [pc, #152]	; (800993c <_svfiprintf_r+0x1f0>)
 80098a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098a8:	2206      	movs	r2, #6
 80098aa:	f7f6 fcb9 	bl	8000220 <memchr>
 80098ae:	2800      	cmp	r0, #0
 80098b0:	d038      	beq.n	8009924 <_svfiprintf_r+0x1d8>
 80098b2:	4b23      	ldr	r3, [pc, #140]	; (8009940 <_svfiprintf_r+0x1f4>)
 80098b4:	bb1b      	cbnz	r3, 80098fe <_svfiprintf_r+0x1b2>
 80098b6:	9b03      	ldr	r3, [sp, #12]
 80098b8:	3307      	adds	r3, #7
 80098ba:	f023 0307 	bic.w	r3, r3, #7
 80098be:	3308      	adds	r3, #8
 80098c0:	9303      	str	r3, [sp, #12]
 80098c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098c4:	4433      	add	r3, r6
 80098c6:	9309      	str	r3, [sp, #36]	; 0x24
 80098c8:	e767      	b.n	800979a <_svfiprintf_r+0x4e>
 80098ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80098ce:	460c      	mov	r4, r1
 80098d0:	2001      	movs	r0, #1
 80098d2:	e7a5      	b.n	8009820 <_svfiprintf_r+0xd4>
 80098d4:	2300      	movs	r3, #0
 80098d6:	3401      	adds	r4, #1
 80098d8:	9305      	str	r3, [sp, #20]
 80098da:	4619      	mov	r1, r3
 80098dc:	f04f 0c0a 	mov.w	ip, #10
 80098e0:	4620      	mov	r0, r4
 80098e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098e6:	3a30      	subs	r2, #48	; 0x30
 80098e8:	2a09      	cmp	r2, #9
 80098ea:	d903      	bls.n	80098f4 <_svfiprintf_r+0x1a8>
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d0c5      	beq.n	800987c <_svfiprintf_r+0x130>
 80098f0:	9105      	str	r1, [sp, #20]
 80098f2:	e7c3      	b.n	800987c <_svfiprintf_r+0x130>
 80098f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80098f8:	4604      	mov	r4, r0
 80098fa:	2301      	movs	r3, #1
 80098fc:	e7f0      	b.n	80098e0 <_svfiprintf_r+0x194>
 80098fe:	ab03      	add	r3, sp, #12
 8009900:	9300      	str	r3, [sp, #0]
 8009902:	462a      	mov	r2, r5
 8009904:	4b0f      	ldr	r3, [pc, #60]	; (8009944 <_svfiprintf_r+0x1f8>)
 8009906:	a904      	add	r1, sp, #16
 8009908:	4638      	mov	r0, r7
 800990a:	f7fd ffc9 	bl	80078a0 <_printf_float>
 800990e:	1c42      	adds	r2, r0, #1
 8009910:	4606      	mov	r6, r0
 8009912:	d1d6      	bne.n	80098c2 <_svfiprintf_r+0x176>
 8009914:	89ab      	ldrh	r3, [r5, #12]
 8009916:	065b      	lsls	r3, r3, #25
 8009918:	f53f af2c 	bmi.w	8009774 <_svfiprintf_r+0x28>
 800991c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800991e:	b01d      	add	sp, #116	; 0x74
 8009920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009924:	ab03      	add	r3, sp, #12
 8009926:	9300      	str	r3, [sp, #0]
 8009928:	462a      	mov	r2, r5
 800992a:	4b06      	ldr	r3, [pc, #24]	; (8009944 <_svfiprintf_r+0x1f8>)
 800992c:	a904      	add	r1, sp, #16
 800992e:	4638      	mov	r0, r7
 8009930:	f7fe fa5a 	bl	8007de8 <_printf_i>
 8009934:	e7eb      	b.n	800990e <_svfiprintf_r+0x1c2>
 8009936:	bf00      	nop
 8009938:	0800a7dc 	.word	0x0800a7dc
 800993c:	0800a7e6 	.word	0x0800a7e6
 8009940:	080078a1 	.word	0x080078a1
 8009944:	08009695 	.word	0x08009695
 8009948:	0800a7e2 	.word	0x0800a7e2

0800994c <_sbrk_r>:
 800994c:	b538      	push	{r3, r4, r5, lr}
 800994e:	4d06      	ldr	r5, [pc, #24]	; (8009968 <_sbrk_r+0x1c>)
 8009950:	2300      	movs	r3, #0
 8009952:	4604      	mov	r4, r0
 8009954:	4608      	mov	r0, r1
 8009956:	602b      	str	r3, [r5, #0]
 8009958:	f7f8 ff44 	bl	80027e4 <_sbrk>
 800995c:	1c43      	adds	r3, r0, #1
 800995e:	d102      	bne.n	8009966 <_sbrk_r+0x1a>
 8009960:	682b      	ldr	r3, [r5, #0]
 8009962:	b103      	cbz	r3, 8009966 <_sbrk_r+0x1a>
 8009964:	6023      	str	r3, [r4, #0]
 8009966:	bd38      	pop	{r3, r4, r5, pc}
 8009968:	200005fc 	.word	0x200005fc

0800996c <__assert_func>:
 800996c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800996e:	4614      	mov	r4, r2
 8009970:	461a      	mov	r2, r3
 8009972:	4b09      	ldr	r3, [pc, #36]	; (8009998 <__assert_func+0x2c>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4605      	mov	r5, r0
 8009978:	68d8      	ldr	r0, [r3, #12]
 800997a:	b14c      	cbz	r4, 8009990 <__assert_func+0x24>
 800997c:	4b07      	ldr	r3, [pc, #28]	; (800999c <__assert_func+0x30>)
 800997e:	9100      	str	r1, [sp, #0]
 8009980:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009984:	4906      	ldr	r1, [pc, #24]	; (80099a0 <__assert_func+0x34>)
 8009986:	462b      	mov	r3, r5
 8009988:	f000 f80e 	bl	80099a8 <fiprintf>
 800998c:	f000 faac 	bl	8009ee8 <abort>
 8009990:	4b04      	ldr	r3, [pc, #16]	; (80099a4 <__assert_func+0x38>)
 8009992:	461c      	mov	r4, r3
 8009994:	e7f3      	b.n	800997e <__assert_func+0x12>
 8009996:	bf00      	nop
 8009998:	20000024 	.word	0x20000024
 800999c:	0800a7ed 	.word	0x0800a7ed
 80099a0:	0800a7fa 	.word	0x0800a7fa
 80099a4:	0800a828 	.word	0x0800a828

080099a8 <fiprintf>:
 80099a8:	b40e      	push	{r1, r2, r3}
 80099aa:	b503      	push	{r0, r1, lr}
 80099ac:	4601      	mov	r1, r0
 80099ae:	ab03      	add	r3, sp, #12
 80099b0:	4805      	ldr	r0, [pc, #20]	; (80099c8 <fiprintf+0x20>)
 80099b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80099b6:	6800      	ldr	r0, [r0, #0]
 80099b8:	9301      	str	r3, [sp, #4]
 80099ba:	f000 f897 	bl	8009aec <_vfiprintf_r>
 80099be:	b002      	add	sp, #8
 80099c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80099c4:	b003      	add	sp, #12
 80099c6:	4770      	bx	lr
 80099c8:	20000024 	.word	0x20000024

080099cc <__ascii_mbtowc>:
 80099cc:	b082      	sub	sp, #8
 80099ce:	b901      	cbnz	r1, 80099d2 <__ascii_mbtowc+0x6>
 80099d0:	a901      	add	r1, sp, #4
 80099d2:	b142      	cbz	r2, 80099e6 <__ascii_mbtowc+0x1a>
 80099d4:	b14b      	cbz	r3, 80099ea <__ascii_mbtowc+0x1e>
 80099d6:	7813      	ldrb	r3, [r2, #0]
 80099d8:	600b      	str	r3, [r1, #0]
 80099da:	7812      	ldrb	r2, [r2, #0]
 80099dc:	1e10      	subs	r0, r2, #0
 80099de:	bf18      	it	ne
 80099e0:	2001      	movne	r0, #1
 80099e2:	b002      	add	sp, #8
 80099e4:	4770      	bx	lr
 80099e6:	4610      	mov	r0, r2
 80099e8:	e7fb      	b.n	80099e2 <__ascii_mbtowc+0x16>
 80099ea:	f06f 0001 	mvn.w	r0, #1
 80099ee:	e7f8      	b.n	80099e2 <__ascii_mbtowc+0x16>

080099f0 <memmove>:
 80099f0:	4288      	cmp	r0, r1
 80099f2:	b510      	push	{r4, lr}
 80099f4:	eb01 0402 	add.w	r4, r1, r2
 80099f8:	d902      	bls.n	8009a00 <memmove+0x10>
 80099fa:	4284      	cmp	r4, r0
 80099fc:	4623      	mov	r3, r4
 80099fe:	d807      	bhi.n	8009a10 <memmove+0x20>
 8009a00:	1e43      	subs	r3, r0, #1
 8009a02:	42a1      	cmp	r1, r4
 8009a04:	d008      	beq.n	8009a18 <memmove+0x28>
 8009a06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a0e:	e7f8      	b.n	8009a02 <memmove+0x12>
 8009a10:	4402      	add	r2, r0
 8009a12:	4601      	mov	r1, r0
 8009a14:	428a      	cmp	r2, r1
 8009a16:	d100      	bne.n	8009a1a <memmove+0x2a>
 8009a18:	bd10      	pop	{r4, pc}
 8009a1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a22:	e7f7      	b.n	8009a14 <memmove+0x24>

08009a24 <__malloc_lock>:
 8009a24:	4801      	ldr	r0, [pc, #4]	; (8009a2c <__malloc_lock+0x8>)
 8009a26:	f000 bc1f 	b.w	800a268 <__retarget_lock_acquire_recursive>
 8009a2a:	bf00      	nop
 8009a2c:	20000600 	.word	0x20000600

08009a30 <__malloc_unlock>:
 8009a30:	4801      	ldr	r0, [pc, #4]	; (8009a38 <__malloc_unlock+0x8>)
 8009a32:	f000 bc1a 	b.w	800a26a <__retarget_lock_release_recursive>
 8009a36:	bf00      	nop
 8009a38:	20000600 	.word	0x20000600

08009a3c <_realloc_r>:
 8009a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a40:	4680      	mov	r8, r0
 8009a42:	4614      	mov	r4, r2
 8009a44:	460e      	mov	r6, r1
 8009a46:	b921      	cbnz	r1, 8009a52 <_realloc_r+0x16>
 8009a48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a4c:	4611      	mov	r1, r2
 8009a4e:	f7ff bdad 	b.w	80095ac <_malloc_r>
 8009a52:	b92a      	cbnz	r2, 8009a60 <_realloc_r+0x24>
 8009a54:	f7ff fd3e 	bl	80094d4 <_free_r>
 8009a58:	4625      	mov	r5, r4
 8009a5a:	4628      	mov	r0, r5
 8009a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a60:	f000 fc6a 	bl	800a338 <_malloc_usable_size_r>
 8009a64:	4284      	cmp	r4, r0
 8009a66:	4607      	mov	r7, r0
 8009a68:	d802      	bhi.n	8009a70 <_realloc_r+0x34>
 8009a6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009a6e:	d812      	bhi.n	8009a96 <_realloc_r+0x5a>
 8009a70:	4621      	mov	r1, r4
 8009a72:	4640      	mov	r0, r8
 8009a74:	f7ff fd9a 	bl	80095ac <_malloc_r>
 8009a78:	4605      	mov	r5, r0
 8009a7a:	2800      	cmp	r0, #0
 8009a7c:	d0ed      	beq.n	8009a5a <_realloc_r+0x1e>
 8009a7e:	42bc      	cmp	r4, r7
 8009a80:	4622      	mov	r2, r4
 8009a82:	4631      	mov	r1, r6
 8009a84:	bf28      	it	cs
 8009a86:	463a      	movcs	r2, r7
 8009a88:	f7ff f97c 	bl	8008d84 <memcpy>
 8009a8c:	4631      	mov	r1, r6
 8009a8e:	4640      	mov	r0, r8
 8009a90:	f7ff fd20 	bl	80094d4 <_free_r>
 8009a94:	e7e1      	b.n	8009a5a <_realloc_r+0x1e>
 8009a96:	4635      	mov	r5, r6
 8009a98:	e7df      	b.n	8009a5a <_realloc_r+0x1e>

08009a9a <__sfputc_r>:
 8009a9a:	6893      	ldr	r3, [r2, #8]
 8009a9c:	3b01      	subs	r3, #1
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	b410      	push	{r4}
 8009aa2:	6093      	str	r3, [r2, #8]
 8009aa4:	da08      	bge.n	8009ab8 <__sfputc_r+0x1e>
 8009aa6:	6994      	ldr	r4, [r2, #24]
 8009aa8:	42a3      	cmp	r3, r4
 8009aaa:	db01      	blt.n	8009ab0 <__sfputc_r+0x16>
 8009aac:	290a      	cmp	r1, #10
 8009aae:	d103      	bne.n	8009ab8 <__sfputc_r+0x1e>
 8009ab0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ab4:	f000 b94a 	b.w	8009d4c <__swbuf_r>
 8009ab8:	6813      	ldr	r3, [r2, #0]
 8009aba:	1c58      	adds	r0, r3, #1
 8009abc:	6010      	str	r0, [r2, #0]
 8009abe:	7019      	strb	r1, [r3, #0]
 8009ac0:	4608      	mov	r0, r1
 8009ac2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ac6:	4770      	bx	lr

08009ac8 <__sfputs_r>:
 8009ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aca:	4606      	mov	r6, r0
 8009acc:	460f      	mov	r7, r1
 8009ace:	4614      	mov	r4, r2
 8009ad0:	18d5      	adds	r5, r2, r3
 8009ad2:	42ac      	cmp	r4, r5
 8009ad4:	d101      	bne.n	8009ada <__sfputs_r+0x12>
 8009ad6:	2000      	movs	r0, #0
 8009ad8:	e007      	b.n	8009aea <__sfputs_r+0x22>
 8009ada:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ade:	463a      	mov	r2, r7
 8009ae0:	4630      	mov	r0, r6
 8009ae2:	f7ff ffda 	bl	8009a9a <__sfputc_r>
 8009ae6:	1c43      	adds	r3, r0, #1
 8009ae8:	d1f3      	bne.n	8009ad2 <__sfputs_r+0xa>
 8009aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009aec <_vfiprintf_r>:
 8009aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009af0:	460d      	mov	r5, r1
 8009af2:	b09d      	sub	sp, #116	; 0x74
 8009af4:	4614      	mov	r4, r2
 8009af6:	4698      	mov	r8, r3
 8009af8:	4606      	mov	r6, r0
 8009afa:	b118      	cbz	r0, 8009b04 <_vfiprintf_r+0x18>
 8009afc:	6983      	ldr	r3, [r0, #24]
 8009afe:	b90b      	cbnz	r3, 8009b04 <_vfiprintf_r+0x18>
 8009b00:	f000 fb14 	bl	800a12c <__sinit>
 8009b04:	4b89      	ldr	r3, [pc, #548]	; (8009d2c <_vfiprintf_r+0x240>)
 8009b06:	429d      	cmp	r5, r3
 8009b08:	d11b      	bne.n	8009b42 <_vfiprintf_r+0x56>
 8009b0a:	6875      	ldr	r5, [r6, #4]
 8009b0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b0e:	07d9      	lsls	r1, r3, #31
 8009b10:	d405      	bmi.n	8009b1e <_vfiprintf_r+0x32>
 8009b12:	89ab      	ldrh	r3, [r5, #12]
 8009b14:	059a      	lsls	r2, r3, #22
 8009b16:	d402      	bmi.n	8009b1e <_vfiprintf_r+0x32>
 8009b18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b1a:	f000 fba5 	bl	800a268 <__retarget_lock_acquire_recursive>
 8009b1e:	89ab      	ldrh	r3, [r5, #12]
 8009b20:	071b      	lsls	r3, r3, #28
 8009b22:	d501      	bpl.n	8009b28 <_vfiprintf_r+0x3c>
 8009b24:	692b      	ldr	r3, [r5, #16]
 8009b26:	b9eb      	cbnz	r3, 8009b64 <_vfiprintf_r+0x78>
 8009b28:	4629      	mov	r1, r5
 8009b2a:	4630      	mov	r0, r6
 8009b2c:	f000 f96e 	bl	8009e0c <__swsetup_r>
 8009b30:	b1c0      	cbz	r0, 8009b64 <_vfiprintf_r+0x78>
 8009b32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b34:	07dc      	lsls	r4, r3, #31
 8009b36:	d50e      	bpl.n	8009b56 <_vfiprintf_r+0x6a>
 8009b38:	f04f 30ff 	mov.w	r0, #4294967295
 8009b3c:	b01d      	add	sp, #116	; 0x74
 8009b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b42:	4b7b      	ldr	r3, [pc, #492]	; (8009d30 <_vfiprintf_r+0x244>)
 8009b44:	429d      	cmp	r5, r3
 8009b46:	d101      	bne.n	8009b4c <_vfiprintf_r+0x60>
 8009b48:	68b5      	ldr	r5, [r6, #8]
 8009b4a:	e7df      	b.n	8009b0c <_vfiprintf_r+0x20>
 8009b4c:	4b79      	ldr	r3, [pc, #484]	; (8009d34 <_vfiprintf_r+0x248>)
 8009b4e:	429d      	cmp	r5, r3
 8009b50:	bf08      	it	eq
 8009b52:	68f5      	ldreq	r5, [r6, #12]
 8009b54:	e7da      	b.n	8009b0c <_vfiprintf_r+0x20>
 8009b56:	89ab      	ldrh	r3, [r5, #12]
 8009b58:	0598      	lsls	r0, r3, #22
 8009b5a:	d4ed      	bmi.n	8009b38 <_vfiprintf_r+0x4c>
 8009b5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b5e:	f000 fb84 	bl	800a26a <__retarget_lock_release_recursive>
 8009b62:	e7e9      	b.n	8009b38 <_vfiprintf_r+0x4c>
 8009b64:	2300      	movs	r3, #0
 8009b66:	9309      	str	r3, [sp, #36]	; 0x24
 8009b68:	2320      	movs	r3, #32
 8009b6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b72:	2330      	movs	r3, #48	; 0x30
 8009b74:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009d38 <_vfiprintf_r+0x24c>
 8009b78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b7c:	f04f 0901 	mov.w	r9, #1
 8009b80:	4623      	mov	r3, r4
 8009b82:	469a      	mov	sl, r3
 8009b84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b88:	b10a      	cbz	r2, 8009b8e <_vfiprintf_r+0xa2>
 8009b8a:	2a25      	cmp	r2, #37	; 0x25
 8009b8c:	d1f9      	bne.n	8009b82 <_vfiprintf_r+0x96>
 8009b8e:	ebba 0b04 	subs.w	fp, sl, r4
 8009b92:	d00b      	beq.n	8009bac <_vfiprintf_r+0xc0>
 8009b94:	465b      	mov	r3, fp
 8009b96:	4622      	mov	r2, r4
 8009b98:	4629      	mov	r1, r5
 8009b9a:	4630      	mov	r0, r6
 8009b9c:	f7ff ff94 	bl	8009ac8 <__sfputs_r>
 8009ba0:	3001      	adds	r0, #1
 8009ba2:	f000 80aa 	beq.w	8009cfa <_vfiprintf_r+0x20e>
 8009ba6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ba8:	445a      	add	r2, fp
 8009baa:	9209      	str	r2, [sp, #36]	; 0x24
 8009bac:	f89a 3000 	ldrb.w	r3, [sl]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	f000 80a2 	beq.w	8009cfa <_vfiprintf_r+0x20e>
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8009bbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bc0:	f10a 0a01 	add.w	sl, sl, #1
 8009bc4:	9304      	str	r3, [sp, #16]
 8009bc6:	9307      	str	r3, [sp, #28]
 8009bc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009bcc:	931a      	str	r3, [sp, #104]	; 0x68
 8009bce:	4654      	mov	r4, sl
 8009bd0:	2205      	movs	r2, #5
 8009bd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bd6:	4858      	ldr	r0, [pc, #352]	; (8009d38 <_vfiprintf_r+0x24c>)
 8009bd8:	f7f6 fb22 	bl	8000220 <memchr>
 8009bdc:	9a04      	ldr	r2, [sp, #16]
 8009bde:	b9d8      	cbnz	r0, 8009c18 <_vfiprintf_r+0x12c>
 8009be0:	06d1      	lsls	r1, r2, #27
 8009be2:	bf44      	itt	mi
 8009be4:	2320      	movmi	r3, #32
 8009be6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bea:	0713      	lsls	r3, r2, #28
 8009bec:	bf44      	itt	mi
 8009bee:	232b      	movmi	r3, #43	; 0x2b
 8009bf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bf4:	f89a 3000 	ldrb.w	r3, [sl]
 8009bf8:	2b2a      	cmp	r3, #42	; 0x2a
 8009bfa:	d015      	beq.n	8009c28 <_vfiprintf_r+0x13c>
 8009bfc:	9a07      	ldr	r2, [sp, #28]
 8009bfe:	4654      	mov	r4, sl
 8009c00:	2000      	movs	r0, #0
 8009c02:	f04f 0c0a 	mov.w	ip, #10
 8009c06:	4621      	mov	r1, r4
 8009c08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c0c:	3b30      	subs	r3, #48	; 0x30
 8009c0e:	2b09      	cmp	r3, #9
 8009c10:	d94e      	bls.n	8009cb0 <_vfiprintf_r+0x1c4>
 8009c12:	b1b0      	cbz	r0, 8009c42 <_vfiprintf_r+0x156>
 8009c14:	9207      	str	r2, [sp, #28]
 8009c16:	e014      	b.n	8009c42 <_vfiprintf_r+0x156>
 8009c18:	eba0 0308 	sub.w	r3, r0, r8
 8009c1c:	fa09 f303 	lsl.w	r3, r9, r3
 8009c20:	4313      	orrs	r3, r2
 8009c22:	9304      	str	r3, [sp, #16]
 8009c24:	46a2      	mov	sl, r4
 8009c26:	e7d2      	b.n	8009bce <_vfiprintf_r+0xe2>
 8009c28:	9b03      	ldr	r3, [sp, #12]
 8009c2a:	1d19      	adds	r1, r3, #4
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	9103      	str	r1, [sp, #12]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	bfbb      	ittet	lt
 8009c34:	425b      	neglt	r3, r3
 8009c36:	f042 0202 	orrlt.w	r2, r2, #2
 8009c3a:	9307      	strge	r3, [sp, #28]
 8009c3c:	9307      	strlt	r3, [sp, #28]
 8009c3e:	bfb8      	it	lt
 8009c40:	9204      	strlt	r2, [sp, #16]
 8009c42:	7823      	ldrb	r3, [r4, #0]
 8009c44:	2b2e      	cmp	r3, #46	; 0x2e
 8009c46:	d10c      	bne.n	8009c62 <_vfiprintf_r+0x176>
 8009c48:	7863      	ldrb	r3, [r4, #1]
 8009c4a:	2b2a      	cmp	r3, #42	; 0x2a
 8009c4c:	d135      	bne.n	8009cba <_vfiprintf_r+0x1ce>
 8009c4e:	9b03      	ldr	r3, [sp, #12]
 8009c50:	1d1a      	adds	r2, r3, #4
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	9203      	str	r2, [sp, #12]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	bfb8      	it	lt
 8009c5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c5e:	3402      	adds	r4, #2
 8009c60:	9305      	str	r3, [sp, #20]
 8009c62:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009d48 <_vfiprintf_r+0x25c>
 8009c66:	7821      	ldrb	r1, [r4, #0]
 8009c68:	2203      	movs	r2, #3
 8009c6a:	4650      	mov	r0, sl
 8009c6c:	f7f6 fad8 	bl	8000220 <memchr>
 8009c70:	b140      	cbz	r0, 8009c84 <_vfiprintf_r+0x198>
 8009c72:	2340      	movs	r3, #64	; 0x40
 8009c74:	eba0 000a 	sub.w	r0, r0, sl
 8009c78:	fa03 f000 	lsl.w	r0, r3, r0
 8009c7c:	9b04      	ldr	r3, [sp, #16]
 8009c7e:	4303      	orrs	r3, r0
 8009c80:	3401      	adds	r4, #1
 8009c82:	9304      	str	r3, [sp, #16]
 8009c84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c88:	482c      	ldr	r0, [pc, #176]	; (8009d3c <_vfiprintf_r+0x250>)
 8009c8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c8e:	2206      	movs	r2, #6
 8009c90:	f7f6 fac6 	bl	8000220 <memchr>
 8009c94:	2800      	cmp	r0, #0
 8009c96:	d03f      	beq.n	8009d18 <_vfiprintf_r+0x22c>
 8009c98:	4b29      	ldr	r3, [pc, #164]	; (8009d40 <_vfiprintf_r+0x254>)
 8009c9a:	bb1b      	cbnz	r3, 8009ce4 <_vfiprintf_r+0x1f8>
 8009c9c:	9b03      	ldr	r3, [sp, #12]
 8009c9e:	3307      	adds	r3, #7
 8009ca0:	f023 0307 	bic.w	r3, r3, #7
 8009ca4:	3308      	adds	r3, #8
 8009ca6:	9303      	str	r3, [sp, #12]
 8009ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009caa:	443b      	add	r3, r7
 8009cac:	9309      	str	r3, [sp, #36]	; 0x24
 8009cae:	e767      	b.n	8009b80 <_vfiprintf_r+0x94>
 8009cb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009cb4:	460c      	mov	r4, r1
 8009cb6:	2001      	movs	r0, #1
 8009cb8:	e7a5      	b.n	8009c06 <_vfiprintf_r+0x11a>
 8009cba:	2300      	movs	r3, #0
 8009cbc:	3401      	adds	r4, #1
 8009cbe:	9305      	str	r3, [sp, #20]
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	f04f 0c0a 	mov.w	ip, #10
 8009cc6:	4620      	mov	r0, r4
 8009cc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ccc:	3a30      	subs	r2, #48	; 0x30
 8009cce:	2a09      	cmp	r2, #9
 8009cd0:	d903      	bls.n	8009cda <_vfiprintf_r+0x1ee>
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d0c5      	beq.n	8009c62 <_vfiprintf_r+0x176>
 8009cd6:	9105      	str	r1, [sp, #20]
 8009cd8:	e7c3      	b.n	8009c62 <_vfiprintf_r+0x176>
 8009cda:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cde:	4604      	mov	r4, r0
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	e7f0      	b.n	8009cc6 <_vfiprintf_r+0x1da>
 8009ce4:	ab03      	add	r3, sp, #12
 8009ce6:	9300      	str	r3, [sp, #0]
 8009ce8:	462a      	mov	r2, r5
 8009cea:	4b16      	ldr	r3, [pc, #88]	; (8009d44 <_vfiprintf_r+0x258>)
 8009cec:	a904      	add	r1, sp, #16
 8009cee:	4630      	mov	r0, r6
 8009cf0:	f7fd fdd6 	bl	80078a0 <_printf_float>
 8009cf4:	4607      	mov	r7, r0
 8009cf6:	1c78      	adds	r0, r7, #1
 8009cf8:	d1d6      	bne.n	8009ca8 <_vfiprintf_r+0x1bc>
 8009cfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cfc:	07d9      	lsls	r1, r3, #31
 8009cfe:	d405      	bmi.n	8009d0c <_vfiprintf_r+0x220>
 8009d00:	89ab      	ldrh	r3, [r5, #12]
 8009d02:	059a      	lsls	r2, r3, #22
 8009d04:	d402      	bmi.n	8009d0c <_vfiprintf_r+0x220>
 8009d06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d08:	f000 faaf 	bl	800a26a <__retarget_lock_release_recursive>
 8009d0c:	89ab      	ldrh	r3, [r5, #12]
 8009d0e:	065b      	lsls	r3, r3, #25
 8009d10:	f53f af12 	bmi.w	8009b38 <_vfiprintf_r+0x4c>
 8009d14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d16:	e711      	b.n	8009b3c <_vfiprintf_r+0x50>
 8009d18:	ab03      	add	r3, sp, #12
 8009d1a:	9300      	str	r3, [sp, #0]
 8009d1c:	462a      	mov	r2, r5
 8009d1e:	4b09      	ldr	r3, [pc, #36]	; (8009d44 <_vfiprintf_r+0x258>)
 8009d20:	a904      	add	r1, sp, #16
 8009d22:	4630      	mov	r0, r6
 8009d24:	f7fe f860 	bl	8007de8 <_printf_i>
 8009d28:	e7e4      	b.n	8009cf4 <_vfiprintf_r+0x208>
 8009d2a:	bf00      	nop
 8009d2c:	0800a954 	.word	0x0800a954
 8009d30:	0800a974 	.word	0x0800a974
 8009d34:	0800a934 	.word	0x0800a934
 8009d38:	0800a7dc 	.word	0x0800a7dc
 8009d3c:	0800a7e6 	.word	0x0800a7e6
 8009d40:	080078a1 	.word	0x080078a1
 8009d44:	08009ac9 	.word	0x08009ac9
 8009d48:	0800a7e2 	.word	0x0800a7e2

08009d4c <__swbuf_r>:
 8009d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d4e:	460e      	mov	r6, r1
 8009d50:	4614      	mov	r4, r2
 8009d52:	4605      	mov	r5, r0
 8009d54:	b118      	cbz	r0, 8009d5e <__swbuf_r+0x12>
 8009d56:	6983      	ldr	r3, [r0, #24]
 8009d58:	b90b      	cbnz	r3, 8009d5e <__swbuf_r+0x12>
 8009d5a:	f000 f9e7 	bl	800a12c <__sinit>
 8009d5e:	4b21      	ldr	r3, [pc, #132]	; (8009de4 <__swbuf_r+0x98>)
 8009d60:	429c      	cmp	r4, r3
 8009d62:	d12b      	bne.n	8009dbc <__swbuf_r+0x70>
 8009d64:	686c      	ldr	r4, [r5, #4]
 8009d66:	69a3      	ldr	r3, [r4, #24]
 8009d68:	60a3      	str	r3, [r4, #8]
 8009d6a:	89a3      	ldrh	r3, [r4, #12]
 8009d6c:	071a      	lsls	r2, r3, #28
 8009d6e:	d52f      	bpl.n	8009dd0 <__swbuf_r+0x84>
 8009d70:	6923      	ldr	r3, [r4, #16]
 8009d72:	b36b      	cbz	r3, 8009dd0 <__swbuf_r+0x84>
 8009d74:	6923      	ldr	r3, [r4, #16]
 8009d76:	6820      	ldr	r0, [r4, #0]
 8009d78:	1ac0      	subs	r0, r0, r3
 8009d7a:	6963      	ldr	r3, [r4, #20]
 8009d7c:	b2f6      	uxtb	r6, r6
 8009d7e:	4283      	cmp	r3, r0
 8009d80:	4637      	mov	r7, r6
 8009d82:	dc04      	bgt.n	8009d8e <__swbuf_r+0x42>
 8009d84:	4621      	mov	r1, r4
 8009d86:	4628      	mov	r0, r5
 8009d88:	f000 f93c 	bl	800a004 <_fflush_r>
 8009d8c:	bb30      	cbnz	r0, 8009ddc <__swbuf_r+0x90>
 8009d8e:	68a3      	ldr	r3, [r4, #8]
 8009d90:	3b01      	subs	r3, #1
 8009d92:	60a3      	str	r3, [r4, #8]
 8009d94:	6823      	ldr	r3, [r4, #0]
 8009d96:	1c5a      	adds	r2, r3, #1
 8009d98:	6022      	str	r2, [r4, #0]
 8009d9a:	701e      	strb	r6, [r3, #0]
 8009d9c:	6963      	ldr	r3, [r4, #20]
 8009d9e:	3001      	adds	r0, #1
 8009da0:	4283      	cmp	r3, r0
 8009da2:	d004      	beq.n	8009dae <__swbuf_r+0x62>
 8009da4:	89a3      	ldrh	r3, [r4, #12]
 8009da6:	07db      	lsls	r3, r3, #31
 8009da8:	d506      	bpl.n	8009db8 <__swbuf_r+0x6c>
 8009daa:	2e0a      	cmp	r6, #10
 8009dac:	d104      	bne.n	8009db8 <__swbuf_r+0x6c>
 8009dae:	4621      	mov	r1, r4
 8009db0:	4628      	mov	r0, r5
 8009db2:	f000 f927 	bl	800a004 <_fflush_r>
 8009db6:	b988      	cbnz	r0, 8009ddc <__swbuf_r+0x90>
 8009db8:	4638      	mov	r0, r7
 8009dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dbc:	4b0a      	ldr	r3, [pc, #40]	; (8009de8 <__swbuf_r+0x9c>)
 8009dbe:	429c      	cmp	r4, r3
 8009dc0:	d101      	bne.n	8009dc6 <__swbuf_r+0x7a>
 8009dc2:	68ac      	ldr	r4, [r5, #8]
 8009dc4:	e7cf      	b.n	8009d66 <__swbuf_r+0x1a>
 8009dc6:	4b09      	ldr	r3, [pc, #36]	; (8009dec <__swbuf_r+0xa0>)
 8009dc8:	429c      	cmp	r4, r3
 8009dca:	bf08      	it	eq
 8009dcc:	68ec      	ldreq	r4, [r5, #12]
 8009dce:	e7ca      	b.n	8009d66 <__swbuf_r+0x1a>
 8009dd0:	4621      	mov	r1, r4
 8009dd2:	4628      	mov	r0, r5
 8009dd4:	f000 f81a 	bl	8009e0c <__swsetup_r>
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	d0cb      	beq.n	8009d74 <__swbuf_r+0x28>
 8009ddc:	f04f 37ff 	mov.w	r7, #4294967295
 8009de0:	e7ea      	b.n	8009db8 <__swbuf_r+0x6c>
 8009de2:	bf00      	nop
 8009de4:	0800a954 	.word	0x0800a954
 8009de8:	0800a974 	.word	0x0800a974
 8009dec:	0800a934 	.word	0x0800a934

08009df0 <__ascii_wctomb>:
 8009df0:	b149      	cbz	r1, 8009e06 <__ascii_wctomb+0x16>
 8009df2:	2aff      	cmp	r2, #255	; 0xff
 8009df4:	bf85      	ittet	hi
 8009df6:	238a      	movhi	r3, #138	; 0x8a
 8009df8:	6003      	strhi	r3, [r0, #0]
 8009dfa:	700a      	strbls	r2, [r1, #0]
 8009dfc:	f04f 30ff 	movhi.w	r0, #4294967295
 8009e00:	bf98      	it	ls
 8009e02:	2001      	movls	r0, #1
 8009e04:	4770      	bx	lr
 8009e06:	4608      	mov	r0, r1
 8009e08:	4770      	bx	lr
	...

08009e0c <__swsetup_r>:
 8009e0c:	4b32      	ldr	r3, [pc, #200]	; (8009ed8 <__swsetup_r+0xcc>)
 8009e0e:	b570      	push	{r4, r5, r6, lr}
 8009e10:	681d      	ldr	r5, [r3, #0]
 8009e12:	4606      	mov	r6, r0
 8009e14:	460c      	mov	r4, r1
 8009e16:	b125      	cbz	r5, 8009e22 <__swsetup_r+0x16>
 8009e18:	69ab      	ldr	r3, [r5, #24]
 8009e1a:	b913      	cbnz	r3, 8009e22 <__swsetup_r+0x16>
 8009e1c:	4628      	mov	r0, r5
 8009e1e:	f000 f985 	bl	800a12c <__sinit>
 8009e22:	4b2e      	ldr	r3, [pc, #184]	; (8009edc <__swsetup_r+0xd0>)
 8009e24:	429c      	cmp	r4, r3
 8009e26:	d10f      	bne.n	8009e48 <__swsetup_r+0x3c>
 8009e28:	686c      	ldr	r4, [r5, #4]
 8009e2a:	89a3      	ldrh	r3, [r4, #12]
 8009e2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e30:	0719      	lsls	r1, r3, #28
 8009e32:	d42c      	bmi.n	8009e8e <__swsetup_r+0x82>
 8009e34:	06dd      	lsls	r5, r3, #27
 8009e36:	d411      	bmi.n	8009e5c <__swsetup_r+0x50>
 8009e38:	2309      	movs	r3, #9
 8009e3a:	6033      	str	r3, [r6, #0]
 8009e3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009e40:	81a3      	strh	r3, [r4, #12]
 8009e42:	f04f 30ff 	mov.w	r0, #4294967295
 8009e46:	e03e      	b.n	8009ec6 <__swsetup_r+0xba>
 8009e48:	4b25      	ldr	r3, [pc, #148]	; (8009ee0 <__swsetup_r+0xd4>)
 8009e4a:	429c      	cmp	r4, r3
 8009e4c:	d101      	bne.n	8009e52 <__swsetup_r+0x46>
 8009e4e:	68ac      	ldr	r4, [r5, #8]
 8009e50:	e7eb      	b.n	8009e2a <__swsetup_r+0x1e>
 8009e52:	4b24      	ldr	r3, [pc, #144]	; (8009ee4 <__swsetup_r+0xd8>)
 8009e54:	429c      	cmp	r4, r3
 8009e56:	bf08      	it	eq
 8009e58:	68ec      	ldreq	r4, [r5, #12]
 8009e5a:	e7e6      	b.n	8009e2a <__swsetup_r+0x1e>
 8009e5c:	0758      	lsls	r0, r3, #29
 8009e5e:	d512      	bpl.n	8009e86 <__swsetup_r+0x7a>
 8009e60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e62:	b141      	cbz	r1, 8009e76 <__swsetup_r+0x6a>
 8009e64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e68:	4299      	cmp	r1, r3
 8009e6a:	d002      	beq.n	8009e72 <__swsetup_r+0x66>
 8009e6c:	4630      	mov	r0, r6
 8009e6e:	f7ff fb31 	bl	80094d4 <_free_r>
 8009e72:	2300      	movs	r3, #0
 8009e74:	6363      	str	r3, [r4, #52]	; 0x34
 8009e76:	89a3      	ldrh	r3, [r4, #12]
 8009e78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009e7c:	81a3      	strh	r3, [r4, #12]
 8009e7e:	2300      	movs	r3, #0
 8009e80:	6063      	str	r3, [r4, #4]
 8009e82:	6923      	ldr	r3, [r4, #16]
 8009e84:	6023      	str	r3, [r4, #0]
 8009e86:	89a3      	ldrh	r3, [r4, #12]
 8009e88:	f043 0308 	orr.w	r3, r3, #8
 8009e8c:	81a3      	strh	r3, [r4, #12]
 8009e8e:	6923      	ldr	r3, [r4, #16]
 8009e90:	b94b      	cbnz	r3, 8009ea6 <__swsetup_r+0x9a>
 8009e92:	89a3      	ldrh	r3, [r4, #12]
 8009e94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e9c:	d003      	beq.n	8009ea6 <__swsetup_r+0x9a>
 8009e9e:	4621      	mov	r1, r4
 8009ea0:	4630      	mov	r0, r6
 8009ea2:	f000 fa09 	bl	800a2b8 <__smakebuf_r>
 8009ea6:	89a0      	ldrh	r0, [r4, #12]
 8009ea8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009eac:	f010 0301 	ands.w	r3, r0, #1
 8009eb0:	d00a      	beq.n	8009ec8 <__swsetup_r+0xbc>
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	60a3      	str	r3, [r4, #8]
 8009eb6:	6963      	ldr	r3, [r4, #20]
 8009eb8:	425b      	negs	r3, r3
 8009eba:	61a3      	str	r3, [r4, #24]
 8009ebc:	6923      	ldr	r3, [r4, #16]
 8009ebe:	b943      	cbnz	r3, 8009ed2 <__swsetup_r+0xc6>
 8009ec0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009ec4:	d1ba      	bne.n	8009e3c <__swsetup_r+0x30>
 8009ec6:	bd70      	pop	{r4, r5, r6, pc}
 8009ec8:	0781      	lsls	r1, r0, #30
 8009eca:	bf58      	it	pl
 8009ecc:	6963      	ldrpl	r3, [r4, #20]
 8009ece:	60a3      	str	r3, [r4, #8]
 8009ed0:	e7f4      	b.n	8009ebc <__swsetup_r+0xb0>
 8009ed2:	2000      	movs	r0, #0
 8009ed4:	e7f7      	b.n	8009ec6 <__swsetup_r+0xba>
 8009ed6:	bf00      	nop
 8009ed8:	20000024 	.word	0x20000024
 8009edc:	0800a954 	.word	0x0800a954
 8009ee0:	0800a974 	.word	0x0800a974
 8009ee4:	0800a934 	.word	0x0800a934

08009ee8 <abort>:
 8009ee8:	b508      	push	{r3, lr}
 8009eea:	2006      	movs	r0, #6
 8009eec:	f000 fa54 	bl	800a398 <raise>
 8009ef0:	2001      	movs	r0, #1
 8009ef2:	f7f8 fbff 	bl	80026f4 <_exit>
	...

08009ef8 <__sflush_r>:
 8009ef8:	898a      	ldrh	r2, [r1, #12]
 8009efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009efe:	4605      	mov	r5, r0
 8009f00:	0710      	lsls	r0, r2, #28
 8009f02:	460c      	mov	r4, r1
 8009f04:	d458      	bmi.n	8009fb8 <__sflush_r+0xc0>
 8009f06:	684b      	ldr	r3, [r1, #4]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	dc05      	bgt.n	8009f18 <__sflush_r+0x20>
 8009f0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	dc02      	bgt.n	8009f18 <__sflush_r+0x20>
 8009f12:	2000      	movs	r0, #0
 8009f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f1a:	2e00      	cmp	r6, #0
 8009f1c:	d0f9      	beq.n	8009f12 <__sflush_r+0x1a>
 8009f1e:	2300      	movs	r3, #0
 8009f20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009f24:	682f      	ldr	r7, [r5, #0]
 8009f26:	602b      	str	r3, [r5, #0]
 8009f28:	d032      	beq.n	8009f90 <__sflush_r+0x98>
 8009f2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009f2c:	89a3      	ldrh	r3, [r4, #12]
 8009f2e:	075a      	lsls	r2, r3, #29
 8009f30:	d505      	bpl.n	8009f3e <__sflush_r+0x46>
 8009f32:	6863      	ldr	r3, [r4, #4]
 8009f34:	1ac0      	subs	r0, r0, r3
 8009f36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009f38:	b10b      	cbz	r3, 8009f3e <__sflush_r+0x46>
 8009f3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009f3c:	1ac0      	subs	r0, r0, r3
 8009f3e:	2300      	movs	r3, #0
 8009f40:	4602      	mov	r2, r0
 8009f42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f44:	6a21      	ldr	r1, [r4, #32]
 8009f46:	4628      	mov	r0, r5
 8009f48:	47b0      	blx	r6
 8009f4a:	1c43      	adds	r3, r0, #1
 8009f4c:	89a3      	ldrh	r3, [r4, #12]
 8009f4e:	d106      	bne.n	8009f5e <__sflush_r+0x66>
 8009f50:	6829      	ldr	r1, [r5, #0]
 8009f52:	291d      	cmp	r1, #29
 8009f54:	d82c      	bhi.n	8009fb0 <__sflush_r+0xb8>
 8009f56:	4a2a      	ldr	r2, [pc, #168]	; (800a000 <__sflush_r+0x108>)
 8009f58:	40ca      	lsrs	r2, r1
 8009f5a:	07d6      	lsls	r6, r2, #31
 8009f5c:	d528      	bpl.n	8009fb0 <__sflush_r+0xb8>
 8009f5e:	2200      	movs	r2, #0
 8009f60:	6062      	str	r2, [r4, #4]
 8009f62:	04d9      	lsls	r1, r3, #19
 8009f64:	6922      	ldr	r2, [r4, #16]
 8009f66:	6022      	str	r2, [r4, #0]
 8009f68:	d504      	bpl.n	8009f74 <__sflush_r+0x7c>
 8009f6a:	1c42      	adds	r2, r0, #1
 8009f6c:	d101      	bne.n	8009f72 <__sflush_r+0x7a>
 8009f6e:	682b      	ldr	r3, [r5, #0]
 8009f70:	b903      	cbnz	r3, 8009f74 <__sflush_r+0x7c>
 8009f72:	6560      	str	r0, [r4, #84]	; 0x54
 8009f74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f76:	602f      	str	r7, [r5, #0]
 8009f78:	2900      	cmp	r1, #0
 8009f7a:	d0ca      	beq.n	8009f12 <__sflush_r+0x1a>
 8009f7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f80:	4299      	cmp	r1, r3
 8009f82:	d002      	beq.n	8009f8a <__sflush_r+0x92>
 8009f84:	4628      	mov	r0, r5
 8009f86:	f7ff faa5 	bl	80094d4 <_free_r>
 8009f8a:	2000      	movs	r0, #0
 8009f8c:	6360      	str	r0, [r4, #52]	; 0x34
 8009f8e:	e7c1      	b.n	8009f14 <__sflush_r+0x1c>
 8009f90:	6a21      	ldr	r1, [r4, #32]
 8009f92:	2301      	movs	r3, #1
 8009f94:	4628      	mov	r0, r5
 8009f96:	47b0      	blx	r6
 8009f98:	1c41      	adds	r1, r0, #1
 8009f9a:	d1c7      	bne.n	8009f2c <__sflush_r+0x34>
 8009f9c:	682b      	ldr	r3, [r5, #0]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d0c4      	beq.n	8009f2c <__sflush_r+0x34>
 8009fa2:	2b1d      	cmp	r3, #29
 8009fa4:	d001      	beq.n	8009faa <__sflush_r+0xb2>
 8009fa6:	2b16      	cmp	r3, #22
 8009fa8:	d101      	bne.n	8009fae <__sflush_r+0xb6>
 8009faa:	602f      	str	r7, [r5, #0]
 8009fac:	e7b1      	b.n	8009f12 <__sflush_r+0x1a>
 8009fae:	89a3      	ldrh	r3, [r4, #12]
 8009fb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fb4:	81a3      	strh	r3, [r4, #12]
 8009fb6:	e7ad      	b.n	8009f14 <__sflush_r+0x1c>
 8009fb8:	690f      	ldr	r7, [r1, #16]
 8009fba:	2f00      	cmp	r7, #0
 8009fbc:	d0a9      	beq.n	8009f12 <__sflush_r+0x1a>
 8009fbe:	0793      	lsls	r3, r2, #30
 8009fc0:	680e      	ldr	r6, [r1, #0]
 8009fc2:	bf08      	it	eq
 8009fc4:	694b      	ldreq	r3, [r1, #20]
 8009fc6:	600f      	str	r7, [r1, #0]
 8009fc8:	bf18      	it	ne
 8009fca:	2300      	movne	r3, #0
 8009fcc:	eba6 0807 	sub.w	r8, r6, r7
 8009fd0:	608b      	str	r3, [r1, #8]
 8009fd2:	f1b8 0f00 	cmp.w	r8, #0
 8009fd6:	dd9c      	ble.n	8009f12 <__sflush_r+0x1a>
 8009fd8:	6a21      	ldr	r1, [r4, #32]
 8009fda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009fdc:	4643      	mov	r3, r8
 8009fde:	463a      	mov	r2, r7
 8009fe0:	4628      	mov	r0, r5
 8009fe2:	47b0      	blx	r6
 8009fe4:	2800      	cmp	r0, #0
 8009fe6:	dc06      	bgt.n	8009ff6 <__sflush_r+0xfe>
 8009fe8:	89a3      	ldrh	r3, [r4, #12]
 8009fea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fee:	81a3      	strh	r3, [r4, #12]
 8009ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ff4:	e78e      	b.n	8009f14 <__sflush_r+0x1c>
 8009ff6:	4407      	add	r7, r0
 8009ff8:	eba8 0800 	sub.w	r8, r8, r0
 8009ffc:	e7e9      	b.n	8009fd2 <__sflush_r+0xda>
 8009ffe:	bf00      	nop
 800a000:	20400001 	.word	0x20400001

0800a004 <_fflush_r>:
 800a004:	b538      	push	{r3, r4, r5, lr}
 800a006:	690b      	ldr	r3, [r1, #16]
 800a008:	4605      	mov	r5, r0
 800a00a:	460c      	mov	r4, r1
 800a00c:	b913      	cbnz	r3, 800a014 <_fflush_r+0x10>
 800a00e:	2500      	movs	r5, #0
 800a010:	4628      	mov	r0, r5
 800a012:	bd38      	pop	{r3, r4, r5, pc}
 800a014:	b118      	cbz	r0, 800a01e <_fflush_r+0x1a>
 800a016:	6983      	ldr	r3, [r0, #24]
 800a018:	b90b      	cbnz	r3, 800a01e <_fflush_r+0x1a>
 800a01a:	f000 f887 	bl	800a12c <__sinit>
 800a01e:	4b14      	ldr	r3, [pc, #80]	; (800a070 <_fflush_r+0x6c>)
 800a020:	429c      	cmp	r4, r3
 800a022:	d11b      	bne.n	800a05c <_fflush_r+0x58>
 800a024:	686c      	ldr	r4, [r5, #4]
 800a026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d0ef      	beq.n	800a00e <_fflush_r+0xa>
 800a02e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a030:	07d0      	lsls	r0, r2, #31
 800a032:	d404      	bmi.n	800a03e <_fflush_r+0x3a>
 800a034:	0599      	lsls	r1, r3, #22
 800a036:	d402      	bmi.n	800a03e <_fflush_r+0x3a>
 800a038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a03a:	f000 f915 	bl	800a268 <__retarget_lock_acquire_recursive>
 800a03e:	4628      	mov	r0, r5
 800a040:	4621      	mov	r1, r4
 800a042:	f7ff ff59 	bl	8009ef8 <__sflush_r>
 800a046:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a048:	07da      	lsls	r2, r3, #31
 800a04a:	4605      	mov	r5, r0
 800a04c:	d4e0      	bmi.n	800a010 <_fflush_r+0xc>
 800a04e:	89a3      	ldrh	r3, [r4, #12]
 800a050:	059b      	lsls	r3, r3, #22
 800a052:	d4dd      	bmi.n	800a010 <_fflush_r+0xc>
 800a054:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a056:	f000 f908 	bl	800a26a <__retarget_lock_release_recursive>
 800a05a:	e7d9      	b.n	800a010 <_fflush_r+0xc>
 800a05c:	4b05      	ldr	r3, [pc, #20]	; (800a074 <_fflush_r+0x70>)
 800a05e:	429c      	cmp	r4, r3
 800a060:	d101      	bne.n	800a066 <_fflush_r+0x62>
 800a062:	68ac      	ldr	r4, [r5, #8]
 800a064:	e7df      	b.n	800a026 <_fflush_r+0x22>
 800a066:	4b04      	ldr	r3, [pc, #16]	; (800a078 <_fflush_r+0x74>)
 800a068:	429c      	cmp	r4, r3
 800a06a:	bf08      	it	eq
 800a06c:	68ec      	ldreq	r4, [r5, #12]
 800a06e:	e7da      	b.n	800a026 <_fflush_r+0x22>
 800a070:	0800a954 	.word	0x0800a954
 800a074:	0800a974 	.word	0x0800a974
 800a078:	0800a934 	.word	0x0800a934

0800a07c <std>:
 800a07c:	2300      	movs	r3, #0
 800a07e:	b510      	push	{r4, lr}
 800a080:	4604      	mov	r4, r0
 800a082:	e9c0 3300 	strd	r3, r3, [r0]
 800a086:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a08a:	6083      	str	r3, [r0, #8]
 800a08c:	8181      	strh	r1, [r0, #12]
 800a08e:	6643      	str	r3, [r0, #100]	; 0x64
 800a090:	81c2      	strh	r2, [r0, #14]
 800a092:	6183      	str	r3, [r0, #24]
 800a094:	4619      	mov	r1, r3
 800a096:	2208      	movs	r2, #8
 800a098:	305c      	adds	r0, #92	; 0x5c
 800a09a:	f7fd fb59 	bl	8007750 <memset>
 800a09e:	4b05      	ldr	r3, [pc, #20]	; (800a0b4 <std+0x38>)
 800a0a0:	6263      	str	r3, [r4, #36]	; 0x24
 800a0a2:	4b05      	ldr	r3, [pc, #20]	; (800a0b8 <std+0x3c>)
 800a0a4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a0a6:	4b05      	ldr	r3, [pc, #20]	; (800a0bc <std+0x40>)
 800a0a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a0aa:	4b05      	ldr	r3, [pc, #20]	; (800a0c0 <std+0x44>)
 800a0ac:	6224      	str	r4, [r4, #32]
 800a0ae:	6323      	str	r3, [r4, #48]	; 0x30
 800a0b0:	bd10      	pop	{r4, pc}
 800a0b2:	bf00      	nop
 800a0b4:	0800a3d1 	.word	0x0800a3d1
 800a0b8:	0800a3f3 	.word	0x0800a3f3
 800a0bc:	0800a42b 	.word	0x0800a42b
 800a0c0:	0800a44f 	.word	0x0800a44f

0800a0c4 <_cleanup_r>:
 800a0c4:	4901      	ldr	r1, [pc, #4]	; (800a0cc <_cleanup_r+0x8>)
 800a0c6:	f000 b8af 	b.w	800a228 <_fwalk_reent>
 800a0ca:	bf00      	nop
 800a0cc:	0800a005 	.word	0x0800a005

0800a0d0 <__sfmoreglue>:
 800a0d0:	b570      	push	{r4, r5, r6, lr}
 800a0d2:	2268      	movs	r2, #104	; 0x68
 800a0d4:	1e4d      	subs	r5, r1, #1
 800a0d6:	4355      	muls	r5, r2
 800a0d8:	460e      	mov	r6, r1
 800a0da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a0de:	f7ff fa65 	bl	80095ac <_malloc_r>
 800a0e2:	4604      	mov	r4, r0
 800a0e4:	b140      	cbz	r0, 800a0f8 <__sfmoreglue+0x28>
 800a0e6:	2100      	movs	r1, #0
 800a0e8:	e9c0 1600 	strd	r1, r6, [r0]
 800a0ec:	300c      	adds	r0, #12
 800a0ee:	60a0      	str	r0, [r4, #8]
 800a0f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a0f4:	f7fd fb2c 	bl	8007750 <memset>
 800a0f8:	4620      	mov	r0, r4
 800a0fa:	bd70      	pop	{r4, r5, r6, pc}

0800a0fc <__sfp_lock_acquire>:
 800a0fc:	4801      	ldr	r0, [pc, #4]	; (800a104 <__sfp_lock_acquire+0x8>)
 800a0fe:	f000 b8b3 	b.w	800a268 <__retarget_lock_acquire_recursive>
 800a102:	bf00      	nop
 800a104:	20000601 	.word	0x20000601

0800a108 <__sfp_lock_release>:
 800a108:	4801      	ldr	r0, [pc, #4]	; (800a110 <__sfp_lock_release+0x8>)
 800a10a:	f000 b8ae 	b.w	800a26a <__retarget_lock_release_recursive>
 800a10e:	bf00      	nop
 800a110:	20000601 	.word	0x20000601

0800a114 <__sinit_lock_acquire>:
 800a114:	4801      	ldr	r0, [pc, #4]	; (800a11c <__sinit_lock_acquire+0x8>)
 800a116:	f000 b8a7 	b.w	800a268 <__retarget_lock_acquire_recursive>
 800a11a:	bf00      	nop
 800a11c:	20000602 	.word	0x20000602

0800a120 <__sinit_lock_release>:
 800a120:	4801      	ldr	r0, [pc, #4]	; (800a128 <__sinit_lock_release+0x8>)
 800a122:	f000 b8a2 	b.w	800a26a <__retarget_lock_release_recursive>
 800a126:	bf00      	nop
 800a128:	20000602 	.word	0x20000602

0800a12c <__sinit>:
 800a12c:	b510      	push	{r4, lr}
 800a12e:	4604      	mov	r4, r0
 800a130:	f7ff fff0 	bl	800a114 <__sinit_lock_acquire>
 800a134:	69a3      	ldr	r3, [r4, #24]
 800a136:	b11b      	cbz	r3, 800a140 <__sinit+0x14>
 800a138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a13c:	f7ff bff0 	b.w	800a120 <__sinit_lock_release>
 800a140:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a144:	6523      	str	r3, [r4, #80]	; 0x50
 800a146:	4b13      	ldr	r3, [pc, #76]	; (800a194 <__sinit+0x68>)
 800a148:	4a13      	ldr	r2, [pc, #76]	; (800a198 <__sinit+0x6c>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a14e:	42a3      	cmp	r3, r4
 800a150:	bf04      	itt	eq
 800a152:	2301      	moveq	r3, #1
 800a154:	61a3      	streq	r3, [r4, #24]
 800a156:	4620      	mov	r0, r4
 800a158:	f000 f820 	bl	800a19c <__sfp>
 800a15c:	6060      	str	r0, [r4, #4]
 800a15e:	4620      	mov	r0, r4
 800a160:	f000 f81c 	bl	800a19c <__sfp>
 800a164:	60a0      	str	r0, [r4, #8]
 800a166:	4620      	mov	r0, r4
 800a168:	f000 f818 	bl	800a19c <__sfp>
 800a16c:	2200      	movs	r2, #0
 800a16e:	60e0      	str	r0, [r4, #12]
 800a170:	2104      	movs	r1, #4
 800a172:	6860      	ldr	r0, [r4, #4]
 800a174:	f7ff ff82 	bl	800a07c <std>
 800a178:	68a0      	ldr	r0, [r4, #8]
 800a17a:	2201      	movs	r2, #1
 800a17c:	2109      	movs	r1, #9
 800a17e:	f7ff ff7d 	bl	800a07c <std>
 800a182:	68e0      	ldr	r0, [r4, #12]
 800a184:	2202      	movs	r2, #2
 800a186:	2112      	movs	r1, #18
 800a188:	f7ff ff78 	bl	800a07c <std>
 800a18c:	2301      	movs	r3, #1
 800a18e:	61a3      	str	r3, [r4, #24]
 800a190:	e7d2      	b.n	800a138 <__sinit+0xc>
 800a192:	bf00      	nop
 800a194:	0800a5b8 	.word	0x0800a5b8
 800a198:	0800a0c5 	.word	0x0800a0c5

0800a19c <__sfp>:
 800a19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a19e:	4607      	mov	r7, r0
 800a1a0:	f7ff ffac 	bl	800a0fc <__sfp_lock_acquire>
 800a1a4:	4b1e      	ldr	r3, [pc, #120]	; (800a220 <__sfp+0x84>)
 800a1a6:	681e      	ldr	r6, [r3, #0]
 800a1a8:	69b3      	ldr	r3, [r6, #24]
 800a1aa:	b913      	cbnz	r3, 800a1b2 <__sfp+0x16>
 800a1ac:	4630      	mov	r0, r6
 800a1ae:	f7ff ffbd 	bl	800a12c <__sinit>
 800a1b2:	3648      	adds	r6, #72	; 0x48
 800a1b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a1b8:	3b01      	subs	r3, #1
 800a1ba:	d503      	bpl.n	800a1c4 <__sfp+0x28>
 800a1bc:	6833      	ldr	r3, [r6, #0]
 800a1be:	b30b      	cbz	r3, 800a204 <__sfp+0x68>
 800a1c0:	6836      	ldr	r6, [r6, #0]
 800a1c2:	e7f7      	b.n	800a1b4 <__sfp+0x18>
 800a1c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a1c8:	b9d5      	cbnz	r5, 800a200 <__sfp+0x64>
 800a1ca:	4b16      	ldr	r3, [pc, #88]	; (800a224 <__sfp+0x88>)
 800a1cc:	60e3      	str	r3, [r4, #12]
 800a1ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a1d2:	6665      	str	r5, [r4, #100]	; 0x64
 800a1d4:	f000 f847 	bl	800a266 <__retarget_lock_init_recursive>
 800a1d8:	f7ff ff96 	bl	800a108 <__sfp_lock_release>
 800a1dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a1e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a1e4:	6025      	str	r5, [r4, #0]
 800a1e6:	61a5      	str	r5, [r4, #24]
 800a1e8:	2208      	movs	r2, #8
 800a1ea:	4629      	mov	r1, r5
 800a1ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a1f0:	f7fd faae 	bl	8007750 <memset>
 800a1f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a1f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a200:	3468      	adds	r4, #104	; 0x68
 800a202:	e7d9      	b.n	800a1b8 <__sfp+0x1c>
 800a204:	2104      	movs	r1, #4
 800a206:	4638      	mov	r0, r7
 800a208:	f7ff ff62 	bl	800a0d0 <__sfmoreglue>
 800a20c:	4604      	mov	r4, r0
 800a20e:	6030      	str	r0, [r6, #0]
 800a210:	2800      	cmp	r0, #0
 800a212:	d1d5      	bne.n	800a1c0 <__sfp+0x24>
 800a214:	f7ff ff78 	bl	800a108 <__sfp_lock_release>
 800a218:	230c      	movs	r3, #12
 800a21a:	603b      	str	r3, [r7, #0]
 800a21c:	e7ee      	b.n	800a1fc <__sfp+0x60>
 800a21e:	bf00      	nop
 800a220:	0800a5b8 	.word	0x0800a5b8
 800a224:	ffff0001 	.word	0xffff0001

0800a228 <_fwalk_reent>:
 800a228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a22c:	4606      	mov	r6, r0
 800a22e:	4688      	mov	r8, r1
 800a230:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a234:	2700      	movs	r7, #0
 800a236:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a23a:	f1b9 0901 	subs.w	r9, r9, #1
 800a23e:	d505      	bpl.n	800a24c <_fwalk_reent+0x24>
 800a240:	6824      	ldr	r4, [r4, #0]
 800a242:	2c00      	cmp	r4, #0
 800a244:	d1f7      	bne.n	800a236 <_fwalk_reent+0xe>
 800a246:	4638      	mov	r0, r7
 800a248:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a24c:	89ab      	ldrh	r3, [r5, #12]
 800a24e:	2b01      	cmp	r3, #1
 800a250:	d907      	bls.n	800a262 <_fwalk_reent+0x3a>
 800a252:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a256:	3301      	adds	r3, #1
 800a258:	d003      	beq.n	800a262 <_fwalk_reent+0x3a>
 800a25a:	4629      	mov	r1, r5
 800a25c:	4630      	mov	r0, r6
 800a25e:	47c0      	blx	r8
 800a260:	4307      	orrs	r7, r0
 800a262:	3568      	adds	r5, #104	; 0x68
 800a264:	e7e9      	b.n	800a23a <_fwalk_reent+0x12>

0800a266 <__retarget_lock_init_recursive>:
 800a266:	4770      	bx	lr

0800a268 <__retarget_lock_acquire_recursive>:
 800a268:	4770      	bx	lr

0800a26a <__retarget_lock_release_recursive>:
 800a26a:	4770      	bx	lr

0800a26c <__swhatbuf_r>:
 800a26c:	b570      	push	{r4, r5, r6, lr}
 800a26e:	460e      	mov	r6, r1
 800a270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a274:	2900      	cmp	r1, #0
 800a276:	b096      	sub	sp, #88	; 0x58
 800a278:	4614      	mov	r4, r2
 800a27a:	461d      	mov	r5, r3
 800a27c:	da08      	bge.n	800a290 <__swhatbuf_r+0x24>
 800a27e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a282:	2200      	movs	r2, #0
 800a284:	602a      	str	r2, [r5, #0]
 800a286:	061a      	lsls	r2, r3, #24
 800a288:	d410      	bmi.n	800a2ac <__swhatbuf_r+0x40>
 800a28a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a28e:	e00e      	b.n	800a2ae <__swhatbuf_r+0x42>
 800a290:	466a      	mov	r2, sp
 800a292:	f000 f903 	bl	800a49c <_fstat_r>
 800a296:	2800      	cmp	r0, #0
 800a298:	dbf1      	blt.n	800a27e <__swhatbuf_r+0x12>
 800a29a:	9a01      	ldr	r2, [sp, #4]
 800a29c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a2a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a2a4:	425a      	negs	r2, r3
 800a2a6:	415a      	adcs	r2, r3
 800a2a8:	602a      	str	r2, [r5, #0]
 800a2aa:	e7ee      	b.n	800a28a <__swhatbuf_r+0x1e>
 800a2ac:	2340      	movs	r3, #64	; 0x40
 800a2ae:	2000      	movs	r0, #0
 800a2b0:	6023      	str	r3, [r4, #0]
 800a2b2:	b016      	add	sp, #88	; 0x58
 800a2b4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a2b8 <__smakebuf_r>:
 800a2b8:	898b      	ldrh	r3, [r1, #12]
 800a2ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a2bc:	079d      	lsls	r5, r3, #30
 800a2be:	4606      	mov	r6, r0
 800a2c0:	460c      	mov	r4, r1
 800a2c2:	d507      	bpl.n	800a2d4 <__smakebuf_r+0x1c>
 800a2c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a2c8:	6023      	str	r3, [r4, #0]
 800a2ca:	6123      	str	r3, [r4, #16]
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	6163      	str	r3, [r4, #20]
 800a2d0:	b002      	add	sp, #8
 800a2d2:	bd70      	pop	{r4, r5, r6, pc}
 800a2d4:	ab01      	add	r3, sp, #4
 800a2d6:	466a      	mov	r2, sp
 800a2d8:	f7ff ffc8 	bl	800a26c <__swhatbuf_r>
 800a2dc:	9900      	ldr	r1, [sp, #0]
 800a2de:	4605      	mov	r5, r0
 800a2e0:	4630      	mov	r0, r6
 800a2e2:	f7ff f963 	bl	80095ac <_malloc_r>
 800a2e6:	b948      	cbnz	r0, 800a2fc <__smakebuf_r+0x44>
 800a2e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2ec:	059a      	lsls	r2, r3, #22
 800a2ee:	d4ef      	bmi.n	800a2d0 <__smakebuf_r+0x18>
 800a2f0:	f023 0303 	bic.w	r3, r3, #3
 800a2f4:	f043 0302 	orr.w	r3, r3, #2
 800a2f8:	81a3      	strh	r3, [r4, #12]
 800a2fa:	e7e3      	b.n	800a2c4 <__smakebuf_r+0xc>
 800a2fc:	4b0d      	ldr	r3, [pc, #52]	; (800a334 <__smakebuf_r+0x7c>)
 800a2fe:	62b3      	str	r3, [r6, #40]	; 0x28
 800a300:	89a3      	ldrh	r3, [r4, #12]
 800a302:	6020      	str	r0, [r4, #0]
 800a304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a308:	81a3      	strh	r3, [r4, #12]
 800a30a:	9b00      	ldr	r3, [sp, #0]
 800a30c:	6163      	str	r3, [r4, #20]
 800a30e:	9b01      	ldr	r3, [sp, #4]
 800a310:	6120      	str	r0, [r4, #16]
 800a312:	b15b      	cbz	r3, 800a32c <__smakebuf_r+0x74>
 800a314:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a318:	4630      	mov	r0, r6
 800a31a:	f000 f8d1 	bl	800a4c0 <_isatty_r>
 800a31e:	b128      	cbz	r0, 800a32c <__smakebuf_r+0x74>
 800a320:	89a3      	ldrh	r3, [r4, #12]
 800a322:	f023 0303 	bic.w	r3, r3, #3
 800a326:	f043 0301 	orr.w	r3, r3, #1
 800a32a:	81a3      	strh	r3, [r4, #12]
 800a32c:	89a0      	ldrh	r0, [r4, #12]
 800a32e:	4305      	orrs	r5, r0
 800a330:	81a5      	strh	r5, [r4, #12]
 800a332:	e7cd      	b.n	800a2d0 <__smakebuf_r+0x18>
 800a334:	0800a0c5 	.word	0x0800a0c5

0800a338 <_malloc_usable_size_r>:
 800a338:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a33c:	1f18      	subs	r0, r3, #4
 800a33e:	2b00      	cmp	r3, #0
 800a340:	bfbc      	itt	lt
 800a342:	580b      	ldrlt	r3, [r1, r0]
 800a344:	18c0      	addlt	r0, r0, r3
 800a346:	4770      	bx	lr

0800a348 <_raise_r>:
 800a348:	291f      	cmp	r1, #31
 800a34a:	b538      	push	{r3, r4, r5, lr}
 800a34c:	4604      	mov	r4, r0
 800a34e:	460d      	mov	r5, r1
 800a350:	d904      	bls.n	800a35c <_raise_r+0x14>
 800a352:	2316      	movs	r3, #22
 800a354:	6003      	str	r3, [r0, #0]
 800a356:	f04f 30ff 	mov.w	r0, #4294967295
 800a35a:	bd38      	pop	{r3, r4, r5, pc}
 800a35c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a35e:	b112      	cbz	r2, 800a366 <_raise_r+0x1e>
 800a360:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a364:	b94b      	cbnz	r3, 800a37a <_raise_r+0x32>
 800a366:	4620      	mov	r0, r4
 800a368:	f000 f830 	bl	800a3cc <_getpid_r>
 800a36c:	462a      	mov	r2, r5
 800a36e:	4601      	mov	r1, r0
 800a370:	4620      	mov	r0, r4
 800a372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a376:	f000 b817 	b.w	800a3a8 <_kill_r>
 800a37a:	2b01      	cmp	r3, #1
 800a37c:	d00a      	beq.n	800a394 <_raise_r+0x4c>
 800a37e:	1c59      	adds	r1, r3, #1
 800a380:	d103      	bne.n	800a38a <_raise_r+0x42>
 800a382:	2316      	movs	r3, #22
 800a384:	6003      	str	r3, [r0, #0]
 800a386:	2001      	movs	r0, #1
 800a388:	e7e7      	b.n	800a35a <_raise_r+0x12>
 800a38a:	2400      	movs	r4, #0
 800a38c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a390:	4628      	mov	r0, r5
 800a392:	4798      	blx	r3
 800a394:	2000      	movs	r0, #0
 800a396:	e7e0      	b.n	800a35a <_raise_r+0x12>

0800a398 <raise>:
 800a398:	4b02      	ldr	r3, [pc, #8]	; (800a3a4 <raise+0xc>)
 800a39a:	4601      	mov	r1, r0
 800a39c:	6818      	ldr	r0, [r3, #0]
 800a39e:	f7ff bfd3 	b.w	800a348 <_raise_r>
 800a3a2:	bf00      	nop
 800a3a4:	20000024 	.word	0x20000024

0800a3a8 <_kill_r>:
 800a3a8:	b538      	push	{r3, r4, r5, lr}
 800a3aa:	4d07      	ldr	r5, [pc, #28]	; (800a3c8 <_kill_r+0x20>)
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	4604      	mov	r4, r0
 800a3b0:	4608      	mov	r0, r1
 800a3b2:	4611      	mov	r1, r2
 800a3b4:	602b      	str	r3, [r5, #0]
 800a3b6:	f7f8 f98d 	bl	80026d4 <_kill>
 800a3ba:	1c43      	adds	r3, r0, #1
 800a3bc:	d102      	bne.n	800a3c4 <_kill_r+0x1c>
 800a3be:	682b      	ldr	r3, [r5, #0]
 800a3c0:	b103      	cbz	r3, 800a3c4 <_kill_r+0x1c>
 800a3c2:	6023      	str	r3, [r4, #0]
 800a3c4:	bd38      	pop	{r3, r4, r5, pc}
 800a3c6:	bf00      	nop
 800a3c8:	200005fc 	.word	0x200005fc

0800a3cc <_getpid_r>:
 800a3cc:	f7f8 b97a 	b.w	80026c4 <_getpid>

0800a3d0 <__sread>:
 800a3d0:	b510      	push	{r4, lr}
 800a3d2:	460c      	mov	r4, r1
 800a3d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3d8:	f000 f894 	bl	800a504 <_read_r>
 800a3dc:	2800      	cmp	r0, #0
 800a3de:	bfab      	itete	ge
 800a3e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a3e2:	89a3      	ldrhlt	r3, [r4, #12]
 800a3e4:	181b      	addge	r3, r3, r0
 800a3e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a3ea:	bfac      	ite	ge
 800a3ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800a3ee:	81a3      	strhlt	r3, [r4, #12]
 800a3f0:	bd10      	pop	{r4, pc}

0800a3f2 <__swrite>:
 800a3f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3f6:	461f      	mov	r7, r3
 800a3f8:	898b      	ldrh	r3, [r1, #12]
 800a3fa:	05db      	lsls	r3, r3, #23
 800a3fc:	4605      	mov	r5, r0
 800a3fe:	460c      	mov	r4, r1
 800a400:	4616      	mov	r6, r2
 800a402:	d505      	bpl.n	800a410 <__swrite+0x1e>
 800a404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a408:	2302      	movs	r3, #2
 800a40a:	2200      	movs	r2, #0
 800a40c:	f000 f868 	bl	800a4e0 <_lseek_r>
 800a410:	89a3      	ldrh	r3, [r4, #12]
 800a412:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a416:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a41a:	81a3      	strh	r3, [r4, #12]
 800a41c:	4632      	mov	r2, r6
 800a41e:	463b      	mov	r3, r7
 800a420:	4628      	mov	r0, r5
 800a422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a426:	f000 b817 	b.w	800a458 <_write_r>

0800a42a <__sseek>:
 800a42a:	b510      	push	{r4, lr}
 800a42c:	460c      	mov	r4, r1
 800a42e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a432:	f000 f855 	bl	800a4e0 <_lseek_r>
 800a436:	1c43      	adds	r3, r0, #1
 800a438:	89a3      	ldrh	r3, [r4, #12]
 800a43a:	bf15      	itete	ne
 800a43c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a43e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a442:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a446:	81a3      	strheq	r3, [r4, #12]
 800a448:	bf18      	it	ne
 800a44a:	81a3      	strhne	r3, [r4, #12]
 800a44c:	bd10      	pop	{r4, pc}

0800a44e <__sclose>:
 800a44e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a452:	f000 b813 	b.w	800a47c <_close_r>
	...

0800a458 <_write_r>:
 800a458:	b538      	push	{r3, r4, r5, lr}
 800a45a:	4d07      	ldr	r5, [pc, #28]	; (800a478 <_write_r+0x20>)
 800a45c:	4604      	mov	r4, r0
 800a45e:	4608      	mov	r0, r1
 800a460:	4611      	mov	r1, r2
 800a462:	2200      	movs	r2, #0
 800a464:	602a      	str	r2, [r5, #0]
 800a466:	461a      	mov	r2, r3
 800a468:	f7f8 f96b 	bl	8002742 <_write>
 800a46c:	1c43      	adds	r3, r0, #1
 800a46e:	d102      	bne.n	800a476 <_write_r+0x1e>
 800a470:	682b      	ldr	r3, [r5, #0]
 800a472:	b103      	cbz	r3, 800a476 <_write_r+0x1e>
 800a474:	6023      	str	r3, [r4, #0]
 800a476:	bd38      	pop	{r3, r4, r5, pc}
 800a478:	200005fc 	.word	0x200005fc

0800a47c <_close_r>:
 800a47c:	b538      	push	{r3, r4, r5, lr}
 800a47e:	4d06      	ldr	r5, [pc, #24]	; (800a498 <_close_r+0x1c>)
 800a480:	2300      	movs	r3, #0
 800a482:	4604      	mov	r4, r0
 800a484:	4608      	mov	r0, r1
 800a486:	602b      	str	r3, [r5, #0]
 800a488:	f7f8 f977 	bl	800277a <_close>
 800a48c:	1c43      	adds	r3, r0, #1
 800a48e:	d102      	bne.n	800a496 <_close_r+0x1a>
 800a490:	682b      	ldr	r3, [r5, #0]
 800a492:	b103      	cbz	r3, 800a496 <_close_r+0x1a>
 800a494:	6023      	str	r3, [r4, #0]
 800a496:	bd38      	pop	{r3, r4, r5, pc}
 800a498:	200005fc 	.word	0x200005fc

0800a49c <_fstat_r>:
 800a49c:	b538      	push	{r3, r4, r5, lr}
 800a49e:	4d07      	ldr	r5, [pc, #28]	; (800a4bc <_fstat_r+0x20>)
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	4604      	mov	r4, r0
 800a4a4:	4608      	mov	r0, r1
 800a4a6:	4611      	mov	r1, r2
 800a4a8:	602b      	str	r3, [r5, #0]
 800a4aa:	f7f8 f972 	bl	8002792 <_fstat>
 800a4ae:	1c43      	adds	r3, r0, #1
 800a4b0:	d102      	bne.n	800a4b8 <_fstat_r+0x1c>
 800a4b2:	682b      	ldr	r3, [r5, #0]
 800a4b4:	b103      	cbz	r3, 800a4b8 <_fstat_r+0x1c>
 800a4b6:	6023      	str	r3, [r4, #0]
 800a4b8:	bd38      	pop	{r3, r4, r5, pc}
 800a4ba:	bf00      	nop
 800a4bc:	200005fc 	.word	0x200005fc

0800a4c0 <_isatty_r>:
 800a4c0:	b538      	push	{r3, r4, r5, lr}
 800a4c2:	4d06      	ldr	r5, [pc, #24]	; (800a4dc <_isatty_r+0x1c>)
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	4604      	mov	r4, r0
 800a4c8:	4608      	mov	r0, r1
 800a4ca:	602b      	str	r3, [r5, #0]
 800a4cc:	f7f8 f971 	bl	80027b2 <_isatty>
 800a4d0:	1c43      	adds	r3, r0, #1
 800a4d2:	d102      	bne.n	800a4da <_isatty_r+0x1a>
 800a4d4:	682b      	ldr	r3, [r5, #0]
 800a4d6:	b103      	cbz	r3, 800a4da <_isatty_r+0x1a>
 800a4d8:	6023      	str	r3, [r4, #0]
 800a4da:	bd38      	pop	{r3, r4, r5, pc}
 800a4dc:	200005fc 	.word	0x200005fc

0800a4e0 <_lseek_r>:
 800a4e0:	b538      	push	{r3, r4, r5, lr}
 800a4e2:	4d07      	ldr	r5, [pc, #28]	; (800a500 <_lseek_r+0x20>)
 800a4e4:	4604      	mov	r4, r0
 800a4e6:	4608      	mov	r0, r1
 800a4e8:	4611      	mov	r1, r2
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	602a      	str	r2, [r5, #0]
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	f7f8 f96a 	bl	80027c8 <_lseek>
 800a4f4:	1c43      	adds	r3, r0, #1
 800a4f6:	d102      	bne.n	800a4fe <_lseek_r+0x1e>
 800a4f8:	682b      	ldr	r3, [r5, #0]
 800a4fa:	b103      	cbz	r3, 800a4fe <_lseek_r+0x1e>
 800a4fc:	6023      	str	r3, [r4, #0]
 800a4fe:	bd38      	pop	{r3, r4, r5, pc}
 800a500:	200005fc 	.word	0x200005fc

0800a504 <_read_r>:
 800a504:	b538      	push	{r3, r4, r5, lr}
 800a506:	4d07      	ldr	r5, [pc, #28]	; (800a524 <_read_r+0x20>)
 800a508:	4604      	mov	r4, r0
 800a50a:	4608      	mov	r0, r1
 800a50c:	4611      	mov	r1, r2
 800a50e:	2200      	movs	r2, #0
 800a510:	602a      	str	r2, [r5, #0]
 800a512:	461a      	mov	r2, r3
 800a514:	f7f8 f8f8 	bl	8002708 <_read>
 800a518:	1c43      	adds	r3, r0, #1
 800a51a:	d102      	bne.n	800a522 <_read_r+0x1e>
 800a51c:	682b      	ldr	r3, [r5, #0]
 800a51e:	b103      	cbz	r3, 800a522 <_read_r+0x1e>
 800a520:	6023      	str	r3, [r4, #0]
 800a522:	bd38      	pop	{r3, r4, r5, pc}
 800a524:	200005fc 	.word	0x200005fc

0800a528 <_init>:
 800a528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a52a:	bf00      	nop
 800a52c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a52e:	bc08      	pop	{r3}
 800a530:	469e      	mov	lr, r3
 800a532:	4770      	bx	lr

0800a534 <_fini>:
 800a534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a536:	bf00      	nop
 800a538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a53a:	bc08      	pop	{r3}
 800a53c:	469e      	mov	lr, r3
 800a53e:	4770      	bx	lr
